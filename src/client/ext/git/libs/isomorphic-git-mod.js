/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var git;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/async-lock/index.js":
/*!******************************************!*\
  !*** ./node_modules/async-lock/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./lib */ \"./node_modules/async-lock/lib/index.js\");\n\n\n//# sourceURL=webpack://git/./node_modules/async-lock/index.js?");

/***/ }),

/***/ "./node_modules/async-lock/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/async-lock/lib/index.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar AsyncLock = function (opts) {\n\topts = opts || {};\n\n\tthis.Promise = opts.Promise || Promise;\n\n\t// format: {key : [fn, fn]}\n\t// queues[key] = null indicates no job running for key\n\tthis.queues = Object.create(null);\n\n\t// lock is reentrant for same domain\n\tthis.domainReentrant = opts.domainReentrant || false;\n\tif (this.domainReentrant) {\n\t\tif (typeof process === 'undefined' || typeof process.domain === 'undefined') {\n\t\t\tthrow new Error(\n\t\t\t\t'Domain-reentrant locks require `process.domain` to exist. Please flip `opts.domainReentrant = false`, ' +\n\t\t\t\t'use a NodeJS version that still implements Domain, or install a browser polyfill.');\n\t\t}\n\t\t// domain of current running func {key : fn}\n\t\tthis.domains = Object.create(null);\n\t}\n\n\tthis.timeout = opts.timeout || AsyncLock.DEFAULT_TIMEOUT;\n\tthis.maxOccupationTime = opts.maxOccupationTime || AsyncLock.DEFAULT_MAX_OCCUPATION_TIME;\n\tthis.maxExecutionTime = opts.maxExecutionTime || AsyncLock.DEFAULT_MAX_EXECUTION_TIME;\n\tif (opts.maxPending === Infinity || (Number.isInteger(opts.maxPending) && opts.maxPending >= 0)) {\n\t\tthis.maxPending = opts.maxPending;\n\t} else {\n\t\tthis.maxPending = AsyncLock.DEFAULT_MAX_PENDING;\n\t}\n};\n\nAsyncLock.DEFAULT_TIMEOUT = 0; //Never\nAsyncLock.DEFAULT_MAX_OCCUPATION_TIME = 0; //Never\nAsyncLock.DEFAULT_MAX_EXECUTION_TIME = 0; //Never\nAsyncLock.DEFAULT_MAX_PENDING = 1000;\n\n/**\n * Acquire Locks\n *\n * @param {String|Array} key \tresource key or keys to lock\n * @param {function} fn \tasync function\n * @param {function} cb \tcallback function, otherwise will return a promise\n * @param {Object} opts \toptions\n */\nAsyncLock.prototype.acquire = function (key, fn, cb, opts) {\n\tif (Array.isArray(key)) {\n\t\treturn this._acquireBatch(key, fn, cb, opts);\n\t}\n\n\tif (typeof (fn) !== 'function') {\n\t\tthrow new Error('You must pass a function to execute');\n\t}\n\n\t// faux-deferred promise using new Promise() (as Promise.defer is deprecated)\n\tvar deferredResolve = null;\n\tvar deferredReject = null;\n\tvar deferred = null;\n\n\tif (typeof (cb) !== 'function') {\n\t\topts = cb;\n\t\tcb = null;\n\n\t\t// will return a promise\n\t\tdeferred = new this.Promise(function(resolve, reject) {\n\t\t\tdeferredResolve = resolve;\n\t\t\tdeferredReject = reject;\n\t\t});\n\t}\n\n\topts = opts || {};\n\n\tvar resolved = false;\n\tvar timer = null;\n\tvar occupationTimer = null;\n\tvar executionTimer = null;\n\tvar self = this;\n\n\tvar done = function (locked, err, ret) {\n\n\t\tif (occupationTimer) {\n\t\t\tclearTimeout(occupationTimer);\n\t\t\toccupationTimer = null;\n\t\t}\n\n\t\tif (executionTimer) {\n\t\t\tclearTimeout(executionTimer);\n\t\t\texecutionTimer = null;\n\t\t}\n\n\t\tif (locked) {\n\t\t\tif (!!self.queues[key] && self.queues[key].length === 0) {\n\t\t\t\tdelete self.queues[key];\n\t\t\t}\n\t\t\tif (self.domainReentrant) {\n\t\t\t\tdelete self.domains[key];\n\t\t\t}\n\t\t}\n\n\t\tif (!resolved) {\n\t\t\tif (!deferred) {\n\t\t\t\tif (typeof (cb) === 'function') {\n\t\t\t\t\tcb(err, ret);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//promise mode\n\t\t\t\tif (err) {\n\t\t\t\t\tdeferredReject(err);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdeferredResolve(ret);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolved = true;\n\t\t}\n\n\t\tif (locked) {\n\t\t\t//run next func\n\t\t\tif (!!self.queues[key] && self.queues[key].length > 0) {\n\t\t\t\tself.queues[key].shift()();\n\t\t\t}\n\t\t}\n\t};\n\n\tvar exec = function (locked) {\n\t\tif (resolved) { // may due to timed out\n\t\t\treturn done(locked);\n\t\t}\n\n\t\tif (timer) {\n\t\t\tclearTimeout(timer);\n\t\t\ttimer = null;\n\t\t}\n\n\t\tif (self.domainReentrant && locked) {\n\t\t\tself.domains[key] = process.domain;\n\t\t}\n\n\t\tvar maxExecutionTime = opts.maxExecutionTime || self.maxExecutionTime;\n\t\tif (maxExecutionTime) {\n\t\t\texecutionTimer = setTimeout(function () {\n\t\t\t\tif (!!self.queues[key]) {\n\t\t\t\t\tdone(locked, new Error('Maximum execution time is exceeded ' + key));\n\t\t\t\t}\n\t\t\t}, maxExecutionTime);\n\t\t}\n\n\t\t// Callback mode\n\t\tif (fn.length === 1) {\n\t\t\tvar called = false;\n\t\t\ttry {\n\t\t\t\tfn(function (err, ret) {\n\t\t\t\t\tif (!called) {\n\t\t\t\t\t\tcalled = true;\n\t\t\t\t\t\tdone(locked, err, ret);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\t// catching error thrown in user function fn\n\t\t\t\tif (!called) {\n\t\t\t\t\tcalled = true;\n\t\t\t\t\tdone(locked, err);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Promise mode\n\t\t\tself._promiseTry(function () {\n\t\t\t\treturn fn();\n\t\t\t})\n\t\t\t.then(function(ret){\n\t\t\t\tdone(locked, undefined, ret);\n\t\t\t}, function(error){\n\t\t\t\tdone(locked, error);\n\t\t\t});\n\t\t}\n\t};\n\n\tif (self.domainReentrant && !!process.domain) {\n\t\texec = process.domain.bind(exec);\n\t}\n\n\tif (!self.queues[key]) {\n\t\tself.queues[key] = [];\n\t\texec(true);\n\t}\n\telse if (self.domainReentrant && !!process.domain && process.domain === self.domains[key]) {\n\t\t// If code is in the same domain of current running task, run it directly\n\t\t// Since lock is re-enterable\n\t\texec(false);\n\t}\n\telse if (self.queues[key].length >= self.maxPending) {\n\t\tdone(false, new Error('Too many pending tasks in queue ' + key));\n\t}\n\telse {\n\t\tvar taskFn = function () {\n\t\t\texec(true);\n\t\t};\n\t\tif (opts.skipQueue) {\n\t\t\tself.queues[key].unshift(taskFn);\n\t\t} else {\n\t\t\tself.queues[key].push(taskFn);\n\t\t}\n\n\t\tvar timeout = opts.timeout || self.timeout;\n\t\tif (timeout) {\n\t\t\ttimer = setTimeout(function () {\n\t\t\t\ttimer = null;\n\t\t\t\tdone(false, new Error('async-lock timed out in queue ' + key));\n\t\t\t}, timeout);\n\t\t}\n\t}\n\n\tvar maxOccupationTime = opts.maxOccupationTime || self.maxOccupationTime;\n\t\tif (maxOccupationTime) {\n\t\t\toccupationTimer = setTimeout(function () {\n\t\t\t\tif (!!self.queues[key]) {\n\t\t\t\t\tdone(false, new Error('Maximum occupation time is exceeded in queue ' + key));\n\t\t\t\t}\n\t\t\t}, maxOccupationTime);\n\t\t}\n\n\tif (deferred) {\n\t\treturn deferred;\n\t}\n};\n\n/*\n * Below is how this function works:\n *\n * Equivalent code:\n * self.acquire(key1, function(cb){\n *     self.acquire(key2, function(cb){\n *         self.acquire(key3, fn, cb);\n *     }, cb);\n * }, cb);\n *\n * Equivalent code:\n * var fn3 = getFn(key3, fn);\n * var fn2 = getFn(key2, fn3);\n * var fn1 = getFn(key1, fn2);\n * fn1(cb);\n */\nAsyncLock.prototype._acquireBatch = function (keys, fn, cb, opts) {\n\tif (typeof (cb) !== 'function') {\n\t\topts = cb;\n\t\tcb = null;\n\t}\n\n\tvar self = this;\n\tvar getFn = function (key, fn) {\n\t\treturn function (cb) {\n\t\t\tself.acquire(key, fn, cb, opts);\n\t\t};\n\t};\n\n\tvar fnx = keys.reduceRight(function (prev, key) {\n\t\treturn getFn(key, prev);\n\t}, fn);\n\n\tif (typeof (cb) === 'function') {\n\t\tfnx(cb);\n\t}\n\telse {\n\t\treturn new this.Promise(function (resolve, reject) {\n\t\t\t// check for promise mode in case keys is empty array\n\t\t\tif (fnx.length === 1) {\n\t\t\t\tfnx(function (err, ret) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresolve(ret);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tresolve(fnx());\n\t\t\t}\n\t\t});\n\t}\n};\n\n/*\n *\tWhether there is any running or pending asyncFunc\n *\n *\t@param {String} key\n */\nAsyncLock.prototype.isBusy = function (key) {\n\tif (!key) {\n\t\treturn Object.keys(this.queues).length > 0;\n\t}\n\telse {\n\t\treturn !!this.queues[key];\n\t}\n};\n\n/**\n * Promise.try() implementation to become independent of Q-specific methods\n */\nAsyncLock.prototype._promiseTry = function(fn) {\n\ttry {\n\t\treturn this.Promise.resolve(fn());\n\t} catch (e) {\n\t\treturn this.Promise.reject(e);\n\t}\n};\n\nmodule.exports = AsyncLock;\n\n\n//# sourceURL=webpack://git/./node_modules/async-lock/lib/index.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\nvar AsyncLock = _interopDefault(__webpack_require__(/*! async-lock */ \"./node_modules/async-lock/index.js\"));\nvar Hash = _interopDefault(__webpack_require__(/*! sha.js/sha1.js */ \"./node_modules/sha.js/sha1.js\"));\nvar crc32 = _interopDefault(__webpack_require__(/*! crc-32 */ \"./node_modules/crc-32/crc32.js\"));\nvar pako = _interopDefault(__webpack_require__(/*! pako */ \"./node_modules/pako/index.js\"));\nvar ignore = _interopDefault(__webpack_require__(/*! ignore */ \"./node_modules/ignore/index.js\"));\nvar pify = _interopDefault(__webpack_require__(/*! pify */ \"./node_modules/pify/index.js\"));\nvar cleanGitRef = _interopDefault(__webpack_require__(/*! clean-git-ref */ \"./node_modules/clean-git-ref/lib/index.js\"));\nvar diff3Merge = _interopDefault(__webpack_require__(/*! diff3 */ \"./node_modules/diff3/diff3.js\"));\n\n/**\n * @typedef {Object} GitProgressEvent\n * @property {string} phase\n * @property {number} loaded\n * @property {number} total\n */\n\n/**\n * @callback ProgressCallback\n * @param {GitProgressEvent} progress\n * @returns {void | Promise<void>}\n */\n\n/**\n * @typedef {Object} GitHttpRequest\n * @property {string} url - The URL to request\n * @property {string} [method='GET'] - The HTTP method to use\n * @property {Object<string, string>} [headers={}] - Headers to include in the HTTP request\n * @property {AsyncIterableIterator<Uint8Array>} [body] - An async iterator of Uint8Arrays that make up the body of POST requests\n * @property {ProgressCallback} [onProgress] - Reserved for future use (emitting `GitProgressEvent`s)\n * @property {object} [signal] - Reserved for future use (canceling a request)\n */\n\n/**\n * @typedef {Object} GitHttpResponse\n * @property {string} url - The final URL that was fetched after any redirects\n * @property {string} [method] - The HTTP method that was used\n * @property {Object<string, string>} [headers] - HTTP response headers\n * @property {AsyncIterableIterator<Uint8Array>} [body] - An async iterator of Uint8Arrays that make up the body of the response\n * @property {number} statusCode - The HTTP status code\n * @property {string} statusMessage - The HTTP status message\n */\n\n/**\n * @callback HttpFetch\n * @param {GitHttpRequest} request\n * @returns {Promise<GitHttpResponse>}\n */\n\n/**\n * @typedef {Object} HttpClient\n * @property {HttpFetch} request\n */\n\n/**\n * A git commit object.\n *\n * @typedef {Object} CommitObject\n * @property {string} message Commit message\n * @property {string} tree SHA-1 object id of corresponding file tree\n * @property {string[]} parent an array of zero or more SHA-1 object ids\n * @property {Object} author\n * @property {string} author.name The author's name\n * @property {string} author.email The author's email\n * @property {number} author.timestamp UTC Unix timestamp in seconds\n * @property {number} author.timezoneOffset Timezone difference from UTC in minutes\n * @property {Object} committer\n * @property {string} committer.name The committer's name\n * @property {string} committer.email The committer's email\n * @property {number} committer.timestamp UTC Unix timestamp in seconds\n * @property {number} committer.timezoneOffset Timezone difference from UTC in minutes\n * @property {string} [gpgsig] PGP signature (if present)\n */\n\n/**\n * An entry from a git tree object. Files are called 'blobs' and directories are called 'trees'.\n *\n * @typedef {Object} TreeEntry\n * @property {string} mode the 6 digit hexadecimal mode\n * @property {string} path the name of the file or directory\n * @property {string} oid the SHA-1 object id of the blob or tree\n * @property {'commit'|'blob'|'tree'} type the type of object\n */\n\n/**\n * A git tree object. Trees represent a directory snapshot.\n *\n * @typedef {TreeEntry[]} TreeObject\n */\n\n/**\n * A git annotated tag object.\n *\n * @typedef {Object} TagObject\n * @property {string} object SHA-1 object id of object being tagged\n * @property {'blob' | 'tree' | 'commit' | 'tag'} type the type of the object being tagged\n * @property {string} tag the tag name\n * @property {Object} tagger\n * @property {string} tagger.name the tagger's name\n * @property {string} tagger.email the tagger's email\n * @property {number} tagger.timestamp UTC Unix timestamp in seconds\n * @property {number} tagger.timezoneOffset timezone difference from UTC in minutes\n * @property {string} message tag message\n * @property {string} [gpgsig] PGP signature (if present)\n */\n\n/**\n * @typedef {Object} ReadCommitResult\n * @property {string} oid - SHA-1 object id of this commit\n * @property {CommitObject} commit - the parsed commit object\n * @property {string} payload - PGP signing payload\n */\n\n/**\n * @typedef {Object} ServerRef - This object has the following schema:\n * @property {string} ref - The name of the ref\n * @property {string} oid - The SHA-1 object id the ref points to\n * @property {string} [target] - The target ref pointed to by a symbolic ref\n * @property {string} [peeled] - If the oid is the SHA-1 object id of an annotated tag, this is the SHA-1 object id that the annotated tag points to\n */\n\n/**\n * @typedef Walker\n * @property {Symbol} Symbol('GitWalkerSymbol')\n */\n\n/**\n * Normalized subset of filesystem `stat` data:\n *\n * @typedef {Object} Stat\n * @property {number} ctimeSeconds\n * @property {number} ctimeNanoseconds\n * @property {number} mtimeSeconds\n * @property {number} mtimeNanoseconds\n * @property {number} dev\n * @property {number} ino\n * @property {number} mode\n * @property {number} uid\n * @property {number} gid\n * @property {number} size\n */\n\n/**\n * The `WalkerEntry` is an interface that abstracts computing many common tree / blob stats.\n *\n * @typedef {Object} WalkerEntry\n * @property {function(): Promise<'tree'|'blob'|'special'|'commit'>} type\n * @property {function(): Promise<number>} mode\n * @property {function(): Promise<string>} oid\n * @property {function(): Promise<Uint8Array|void>} content\n * @property {function(): Promise<Stat>} stat\n */\n\n/**\n * @typedef {Object} CallbackFsClient\n * @property {function} readFile - https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback\n * @property {function} writeFile - https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback\n * @property {function} unlink - https://nodejs.org/api/fs.html#fs_fs_unlink_path_callback\n * @property {function} readdir - https://nodejs.org/api/fs.html#fs_fs_readdir_path_options_callback\n * @property {function} mkdir - https://nodejs.org/api/fs.html#fs_fs_mkdir_path_mode_callback\n * @property {function} rmdir - https://nodejs.org/api/fs.html#fs_fs_rmdir_path_callback\n * @property {function} stat - https://nodejs.org/api/fs.html#fs_fs_stat_path_options_callback\n * @property {function} lstat - https://nodejs.org/api/fs.html#fs_fs_lstat_path_options_callback\n * @property {function} [readlink] - https://nodejs.org/api/fs.html#fs_fs_readlink_path_options_callback\n * @property {function} [symlink] - https://nodejs.org/api/fs.html#fs_fs_symlink_target_path_type_callback\n * @property {function} [chmod] - https://nodejs.org/api/fs.html#fs_fs_chmod_path_mode_callback\n */\n\n/**\n * @typedef {Object} PromiseFsClient\n * @property {Object} promises\n * @property {function} promises.readFile - https://nodejs.org/api/fs.html#fs_fspromises_readfile_path_options\n * @property {function} promises.writeFile - https://nodejs.org/api/fs.html#fs_fspromises_writefile_file_data_options\n * @property {function} promises.unlink - https://nodejs.org/api/fs.html#fs_fspromises_unlink_path\n * @property {function} promises.readdir - https://nodejs.org/api/fs.html#fs_fspromises_readdir_path_options\n * @property {function} promises.mkdir - https://nodejs.org/api/fs.html#fs_fspromises_mkdir_path_options\n * @property {function} promises.rmdir - https://nodejs.org/api/fs.html#fs_fspromises_rmdir_path\n * @property {function} promises.stat - https://nodejs.org/api/fs.html#fs_fspromises_stat_path_options\n * @property {function} promises.lstat - https://nodejs.org/api/fs.html#fs_fspromises_lstat_path_options\n * @property {function} [promises.readlink] - https://nodejs.org/api/fs.html#fs_fspromises_readlink_path_options\n * @property {function} [promises.symlink] - https://nodejs.org/api/fs.html#fs_fspromises_symlink_target_path_type\n * @property {function} [promises.chmod] - https://nodejs.org/api/fs.html#fs_fspromises_chmod_path_mode\n */\n\n/**\n * @typedef {CallbackFsClient | PromiseFsClient} FsClient\n */\n\n/**\n * @callback MessageCallback\n * @param {string} message\n * @returns {void | Promise<void>}\n */\n\n/**\n * @typedef {Object} GitAuth\n * @property {string} [username]\n * @property {string} [password]\n * @property {Object<string, string>} [headers]\n * @property {boolean} [cancel] Tells git to throw a `UserCanceledError` (instead of an `HttpError`).\n */\n\n/**\n * @callback AuthCallback\n * @param {string} url\n * @param {GitAuth} auth Might have some values if the URL itself originally contained a username or password.\n * @returns {GitAuth | void | Promise<GitAuth | void>}\n */\n\n/**\n * @callback AuthFailureCallback\n * @param {string} url\n * @param {GitAuth} auth The credentials that failed\n * @returns {GitAuth | void | Promise<GitAuth | void>}\n */\n\n/**\n * @callback AuthSuccessCallback\n * @param {string} url\n * @param {GitAuth} auth\n * @returns {void | Promise<void>}\n */\n\n/**\n * @typedef {Object} SignParams\n * @property {string} payload - a plaintext message\n * @property {string} secretKey - an 'ASCII armor' encoded PGP key (technically can actually contain _multiple_ keys)\n */\n\n/**\n * @callback SignCallback\n * @param {SignParams} args\n * @return {{signature: string} | Promise<{signature: string}>} - an 'ASCII armor' encoded \"detached\" signature\n */\n\n/**\n * @callback WalkerMap\n * @param {string} filename\n * @param {WalkerEntry[]} entries\n * @returns {Promise<any>}\n */\n\n/**\n * @callback WalkerReduce\n * @param {any} parent\n * @param {any[]} children\n * @returns {Promise<any>}\n */\n\n/**\n * @callback WalkerIterateCallback\n * @param {WalkerEntry[]} entries\n * @returns {Promise<any[]>}\n */\n\n/**\n * @callback WalkerIterate\n * @param {WalkerIterateCallback} walk\n * @param {IterableIterator<WalkerEntry[]>} children\n * @returns {Promise<any[]>}\n */\n\n/**\n * @typedef {Object} RefUpdateStatus\n * @property {boolean} ok\n * @property {string} error\n */\n\n/**\n * @typedef {Object} PushResult\n * @property {boolean} ok\n * @property {?string} error\n * @property {Object<string, RefUpdateStatus>} refs\n * @property {Object<string, string>} [headers]\n */\n\n/**\n * @typedef {0|1} HeadStatus\n */\n\n/**\n * @typedef {0|1|2} WorkdirStatus\n */\n\n/**\n * @typedef {0|1|2|3} StageStatus\n */\n\n/**\n * @typedef {[string, HeadStatus, WorkdirStatus, StageStatus]} StatusRow\n */\n\nclass BaseError extends Error {\n  constructor(message) {\n    super(message);\n    // Setting this here allows TS to infer that all git errors have a `caller` property and\n    // that its type is string.\n    this.caller = '';\n  }\n  toJSON() {\n    // Error objects aren't normally serializable. So we do something about that.\n    return {\n      code: this.code,\n      data: this.data,\n      caller: this.caller,\n      message: this.message,\n      stack: this.stack\n    };\n  }\n  fromJSON(json) {\n    const e = new BaseError(json.message);\n    e.code = json.code;\n    e.data = json.data;\n    e.caller = json.caller;\n    e.stack = json.stack;\n    return e;\n  }\n  get isIsomorphicGitError() {\n    return true;\n  }\n}\nclass InternalError extends BaseError {\n  /**\n   * @param {string} message\n   */\n  constructor(message) {\n    super(`An internal error caused this command to fail. Please file a bug report at https://github.com/isomorphic-git/isomorphic-git/issues with this error message: ${message}`);\n    this.code = this.name = InternalError.code;\n    this.data = {\n      message\n    };\n  }\n}\n/** @type {'InternalError'} */\nInternalError.code = 'InternalError';\n\n// Modeled after https://github.com/tjfontaine/node-buffercursor\n// but with the goal of being much lighter weight.\nclass BufferCursor {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this._start = 0;\n  }\n  eof() {\n    return this._start >= this.buffer.length;\n  }\n  tell() {\n    return this._start;\n  }\n  seek(n) {\n    this._start = n;\n  }\n  slice(n) {\n    const r = this.buffer.slice(this._start, this._start + n);\n    this._start += n;\n    return r;\n  }\n  toString(enc, length) {\n    const r = this.buffer.toString(enc, this._start, this._start + length);\n    this._start += length;\n    return r;\n  }\n  write(value, length, enc) {\n    const r = this.buffer.write(value, this._start, length, enc);\n    this._start += length;\n    return r;\n  }\n  copy(source, start, end) {\n    const r = source.copy(this.buffer, this._start, start, end);\n    this._start += r;\n    return r;\n  }\n  readUInt8() {\n    const r = this.buffer.readUInt8(this._start);\n    this._start += 1;\n    return r;\n  }\n  writeUInt8(value) {\n    const r = this.buffer.writeUInt8(value, this._start);\n    this._start += 1;\n    return r;\n  }\n  readUInt16BE() {\n    const r = this.buffer.readUInt16BE(this._start);\n    this._start += 2;\n    return r;\n  }\n  writeUInt16BE(value) {\n    const r = this.buffer.writeUInt16BE(value, this._start);\n    this._start += 2;\n    return r;\n  }\n  readUInt32BE() {\n    const r = this.buffer.readUInt32BE(this._start);\n    this._start += 4;\n    return r;\n  }\n  writeUInt32BE(value) {\n    const r = this.buffer.writeUInt32BE(value, this._start);\n    this._start += 4;\n    return r;\n  }\n}\nfunction compareStrings(a, b) {\n  // https://stackoverflow.com/a/40355107/2168416\n  return -(a < b) || +(a > b);\n}\nfunction comparePath(a, b) {\n  // https://stackoverflow.com/a/40355107/2168416\n  return compareStrings(a.path, b.path);\n}\n\n/**\n * From https://github.com/git/git/blob/master/Documentation/technical/index-format.txt\n *\n * 32-bit mode, split into (high to low bits)\n *\n *  4-bit object type\n *    valid values in binary are 1000 (regular file), 1010 (symbolic link)\n *    and 1110 (gitlink)\n *\n *  3-bit unused\n *\n *  9-bit unix permission. Only 0755 and 0644 are valid for regular files.\n *  Symbolic links and gitlinks have value 0 in this field.\n */\nfunction normalizeMode(mode) {\n  // Note: BrowserFS will use -1 for \"unknown\"\n  // I need to make it non-negative for these bitshifts to work.\n  let type = mode > 0 ? mode >> 12 : 0;\n  // If it isn't valid, assume it as a \"regular file\"\n  // 0100 = directory\n  // 1000 = regular file\n  // 1010 = symlink\n  // 1110 = gitlink\n  if (type !== 0b0100 && type !== 0b1000 && type !== 0b1010 && type !== 0b1110) {\n    type = 0b1000;\n  }\n  let permissions = mode & 0o777;\n  // Is the file executable? then 755. Else 644.\n  if (permissions & 0b001001001) {\n    permissions = 0o755;\n  } else {\n    permissions = 0o644;\n  }\n  // If it's not a regular file, scrub all permissions\n  if (type !== 0b1000) permissions = 0;\n  return (type << 12) + permissions;\n}\nconst MAX_UINT32 = 2 ** 32;\nfunction SecondsNanoseconds(givenSeconds, givenNanoseconds, milliseconds, date) {\n  if (givenSeconds !== undefined && givenNanoseconds !== undefined) {\n    return [givenSeconds, givenNanoseconds];\n  }\n  if (milliseconds === undefined) {\n    milliseconds = date.valueOf();\n  }\n  const seconds = Math.floor(milliseconds / 1000);\n  const nanoseconds = (milliseconds - seconds * 1000) * 1000000;\n  return [seconds, nanoseconds];\n}\nfunction normalizeStats(e) {\n  const [ctimeSeconds, ctimeNanoseconds] = SecondsNanoseconds(e.ctimeSeconds, e.ctimeNanoseconds, e.ctimeMs, e.ctime);\n  const [mtimeSeconds, mtimeNanoseconds] = SecondsNanoseconds(e.mtimeSeconds, e.mtimeNanoseconds, e.mtimeMs, e.mtime);\n  return {\n    ctimeSeconds: ctimeSeconds % MAX_UINT32,\n    ctimeNanoseconds: ctimeNanoseconds % MAX_UINT32,\n    mtimeSeconds: mtimeSeconds % MAX_UINT32,\n    mtimeNanoseconds: mtimeNanoseconds % MAX_UINT32,\n    dev: e.dev % MAX_UINT32,\n    ino: e.ino % MAX_UINT32,\n    mode: normalizeMode(e.mode % MAX_UINT32),\n    uid: e.uid % MAX_UINT32,\n    gid: e.gid % MAX_UINT32,\n    // size of -1 happens over a BrowserFS HTTP Backend that doesn't serve Content-Length headers\n    // (like the Karma webserver) because BrowserFS HTTP Backend uses HTTP HEAD requests to do fs.stat\n    size: e.size > -1 ? e.size % MAX_UINT32 : 0\n  };\n}\nfunction toHex(buffer) {\n  let hex = '';\n  for (const byte of new Uint8Array(buffer)) {\n    if (byte < 16) hex += '0';\n    hex += byte.toString(16);\n  }\n  return hex;\n}\n\n/* eslint-env node, browser */\n\nlet supportsSubtleSHA1 = null;\nfunction shasum(_x) {\n  return _shasum.apply(this, arguments);\n} // This is modeled after @dominictarr's \"shasum\" module,\n// but without the 'json-stable-stringify' dependency and\n// extra type-casting features.\nfunction _shasum() {\n  _shasum = _asyncToGenerator(function* (buffer) {\n    if (supportsSubtleSHA1 === null) {\n      supportsSubtleSHA1 = yield testSubtleSHA1();\n    }\n    return supportsSubtleSHA1 ? subtleSHA1(buffer) : shasumSync(buffer);\n  });\n  return _shasum.apply(this, arguments);\n}\nfunction shasumSync(buffer) {\n  return new Hash().update(buffer).digest('hex');\n}\nfunction subtleSHA1(_x2) {\n  return _subtleSHA.apply(this, arguments);\n}\nfunction _subtleSHA() {\n  _subtleSHA = _asyncToGenerator(function* (buffer) {\n    const hash = yield crypto.subtle.digest('SHA-1', buffer);\n    return toHex(hash);\n  });\n  return _subtleSHA.apply(this, arguments);\n}\nfunction testSubtleSHA1() {\n  return _testSubtleSHA.apply(this, arguments);\n} // Extract 1-bit assume-valid, 1-bit extended flag, 2-bit merge state flag, 12-bit path length flag\nfunction _testSubtleSHA() {\n  _testSubtleSHA = _asyncToGenerator(function* () {\n    // I'm using a rather crude method of progressive enhancement, because\n    // some browsers that have crypto.subtle.digest don't actually implement SHA-1.\n    try {\n      const hash = yield subtleSHA1(new Uint8Array([]));\n      if (hash === 'da39a3ee5e6b4b0d3255bfef95601890afd80709') return true;\n    } catch (_) {\n      // no bother\n    }\n    return false;\n  });\n  return _testSubtleSHA.apply(this, arguments);\n}\nfunction parseCacheEntryFlags(bits) {\n  return {\n    assumeValid: Boolean(bits & 0b1000000000000000),\n    extended: Boolean(bits & 0b0100000000000000),\n    stage: (bits & 0b0011000000000000) >> 12,\n    nameLength: bits & 0b0000111111111111\n  };\n}\nfunction renderCacheEntryFlags(entry) {\n  const flags = entry.flags;\n  // 1-bit extended flag (must be zero in version 2)\n  flags.extended = false;\n  // 12-bit name length if the length is less than 0xFFF; otherwise 0xFFF\n  // is stored in this field.\n  flags.nameLength = Math.min(Buffer.from(entry.path).length, 0xfff);\n  return (flags.assumeValid ? 0b1000000000000000 : 0) + (flags.extended ? 0b0100000000000000 : 0) + ((flags.stage & 0b11) << 12) + (flags.nameLength & 0b111111111111);\n}\nconst MERGE_SUFFIX = \"\\x00-stage:\";\nfunction getIndexKey(path, stage) {\n  switch (stage) {\n    case 1:\n    case 2:\n    case 3:\n      return path + MERGE_SUFFIX + stage;\n    default:\n      throw new Error('Invalid stage decimal: ' + stage);\n  }\n}\nfunction clearConflicts(entries, path) {\n  for (let i = 1; i <= 3; i++) {\n    if (entries.has(getIndexKey(path, i))) {\n      entries.delete(getIndexKey(path, i));\n    }\n  }\n}\nclass GitIndex {\n  /*::\n   _entries: Map<string, CacheEntry>\n   _dirty: boolean // Used to determine if index needs to be saved to filesystem\n   */\n  constructor(entries) {\n    this._dirty = false;\n    this._entries = entries || new Map();\n  }\n  static from(buffer) {\n    return _asyncToGenerator(function* () {\n      if (Buffer.isBuffer(buffer)) {\n        return GitIndex.fromBuffer(buffer);\n      } else if (buffer === null) {\n        return new GitIndex(null);\n      } else {\n        throw new InternalError('invalid type passed to GitIndex.from');\n      }\n    })();\n  }\n  static fromBuffer(buffer) {\n    return _asyncToGenerator(function* () {\n      // Verify shasum\n      const shaComputed = yield shasum(buffer.slice(0, -20));\n      const shaClaimed = buffer.slice(-20).toString('hex');\n      if (shaClaimed !== shaComputed) {\n        throw new InternalError(`Invalid checksum in GitIndex buffer: expected ${shaClaimed} but saw ${shaComputed}`);\n      }\n      const reader = new BufferCursor(buffer);\n      const _entries = new Map();\n      const magic = reader.toString('utf8', 4);\n      if (magic !== 'DIRC') {\n        throw new InternalError(`Inavlid dircache magic file number: ${magic}`);\n      }\n      const version = reader.readUInt32BE();\n      if (version !== 2) {\n        throw new InternalError(`Unsupported dircache version: ${version}`);\n      }\n      const numEntries = reader.readUInt32BE();\n      let i = 0;\n      while (!reader.eof() && i < numEntries) {\n        const entry = {};\n        entry.ctimeSeconds = reader.readUInt32BE();\n        entry.ctimeNanoseconds = reader.readUInt32BE();\n        entry.mtimeSeconds = reader.readUInt32BE();\n        entry.mtimeNanoseconds = reader.readUInt32BE();\n        entry.dev = reader.readUInt32BE();\n        entry.ino = reader.readUInt32BE();\n        entry.mode = reader.readUInt32BE();\n        entry.uid = reader.readUInt32BE();\n        entry.gid = reader.readUInt32BE();\n        entry.size = reader.readUInt32BE();\n        entry.oid = reader.slice(20).toString('hex');\n        const flags = reader.readUInt16BE();\n        entry.flags = parseCacheEntryFlags(flags);\n        // TODO: handle if (version === 3 && entry.flags.extended)\n        const pathlength = buffer.indexOf(0, reader.tell() + 1) - reader.tell();\n        if (pathlength < 1) {\n          throw new InternalError(`Got a path length of: ${pathlength}`);\n        }\n        // TODO: handle pathnames larger than 12 bits\n        entry.path = reader.toString('utf8', pathlength);\n        // The next bit is awkward. We expect 1 to 8 null characters\n        // such that the total size of the entry is a multiple of 8 bits.\n        // (Hence subtract 12 bytes for the header.)\n        let padding = 8 - (reader.tell() - 12) % 8;\n        if (padding === 0) padding = 8;\n        while (padding--) {\n          const tmp = reader.readUInt8();\n          if (tmp !== 0) {\n            throw new InternalError(`Expected 1-8 null characters but got '${tmp}' after ${entry.path}`);\n          } else if (reader.eof()) {\n            throw new InternalError('Unexpected end of file');\n          }\n        }\n        if (entry.flags.stage === 0) _entries.set(entry.path, entry);else _entries.set(getIndexKey(entry.path, entry.flags.stage), entry);\n        // end of awkward part\n        i++;\n      }\n      return new GitIndex(_entries);\n    })();\n  }\n  get entries() {\n    return [...this._entries.values()].sort(comparePath);\n  }\n  get entriesMap() {\n    return this._entries;\n  }\n  *[Symbol.iterator]() {\n    for (const entry of this.entries) {\n      yield entry;\n    }\n  }\n  insert({\n    filepath,\n    stats,\n    oid,\n    stage = 0\n  }) {\n    stats = normalizeStats(stats);\n    const bfilepath = Buffer.from(filepath);\n    const entry = {\n      ctimeSeconds: stats.ctimeSeconds,\n      ctimeNanoseconds: stats.ctimeNanoseconds,\n      mtimeSeconds: stats.mtimeSeconds,\n      mtimeNanoseconds: stats.mtimeNanoseconds,\n      dev: stats.dev,\n      ino: stats.ino,\n      // We provide a fallback value for `mode` here because not all fs\n      // implementations assign it, but we use it in GitTree.\n      // '100644' is for a \"regular non-executable file\"\n      mode: stats.mode || 0o100644,\n      uid: stats.uid,\n      gid: stats.gid,\n      size: stats.size,\n      path: filepath,\n      oid: oid,\n      flags: {\n        assumeValid: false,\n        extended: false,\n        stage: stage,\n        nameLength: bfilepath.length < 0xfff ? bfilepath.length : 0xfff\n      }\n    };\n    if (stage === 0) {\n      clearConflicts(this._entries, entry.path);\n      this._entries.set(entry.path, entry);\n    } else {\n      if (this._entries.has(entry.path)) {\n        this._entries.delete(entry.path);\n      }\n      this._entries.set(getIndexKey(entry.path, stage), entry);\n    }\n    this._dirty = true;\n  }\n  delete({\n    filepath\n  }) {\n    if (this._entries.has(filepath)) {\n      this._entries.delete(filepath);\n    } else {\n      clearConflicts(this._entries, filepath);\n      for (const key of this._entries.keys()) {\n        if (key.startsWith(filepath + '/')) {\n          this._entries.delete(key);\n        }\n      }\n    }\n    this._dirty = true;\n  }\n  clear() {\n    this._entries.clear();\n    this._dirty = true;\n  }\n  render() {\n    return this.entries.map(entry => `${entry.mode.toString(8)} ${entry.oid}    ${entry.path}`).join('\\n');\n  }\n  toObject() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const header = Buffer.alloc(12);\n      const writer = new BufferCursor(header);\n      writer.write('DIRC', 4, 'utf8');\n      writer.writeUInt32BE(2);\n      writer.writeUInt32BE(_this.entries.length);\n      const body = Buffer.concat(_this.entries.map(entry => {\n        const bpath = Buffer.from(entry.path);\n        // the fixed length + the filename + at least one null char => align by 8\n        const length = Math.ceil((62 + bpath.length + 1) / 8) * 8;\n        const written = Buffer.alloc(length);\n        const writer = new BufferCursor(written);\n        const stat = normalizeStats(entry);\n        writer.writeUInt32BE(stat.ctimeSeconds);\n        writer.writeUInt32BE(stat.ctimeNanoseconds);\n        writer.writeUInt32BE(stat.mtimeSeconds);\n        writer.writeUInt32BE(stat.mtimeNanoseconds);\n        writer.writeUInt32BE(stat.dev);\n        writer.writeUInt32BE(stat.ino);\n        writer.writeUInt32BE(stat.mode);\n        writer.writeUInt32BE(stat.uid);\n        writer.writeUInt32BE(stat.gid);\n        writer.writeUInt32BE(stat.size);\n        writer.write(entry.oid, 20, 'hex');\n        writer.writeUInt16BE(renderCacheEntryFlags(entry));\n        writer.write(entry.path, bpath.length, 'utf8');\n        return written;\n      }));\n      const main = Buffer.concat([header, body]);\n      const sum = yield shasum(main);\n      return Buffer.concat([main, Buffer.from(sum, 'hex')]);\n    })();\n  }\n}\nfunction compareStats(entry, stats) {\n  // Comparison based on the description in Paragraph 4 of\n  // https://www.kernel.org/pub/software/scm/git/docs/technical/racy-git.txt\n  const e = normalizeStats(entry);\n  const s = normalizeStats(stats);\n  const staleness = e.mode !== s.mode || e.mtimeSeconds !== s.mtimeSeconds || e.ctimeSeconds !== s.ctimeSeconds || e.uid !== s.uid || e.gid !== s.gid || e.ino !== s.ino || e.size !== s.size;\n  return staleness;\n}\n\n// import LockManager from 'travix-lock-manager'\n\n// import Lock from '../utils.js'\n\n// const lm = new LockManager()\nlet lock = null;\nfunction createCache() {\n  return {\n    map: new Map(),\n    stats: new Map()\n  };\n}\nfunction updateCachedIndexFile(_x3, _x4, _x5) {\n  return _updateCachedIndexFile.apply(this, arguments);\n} // Determine whether our copy of the index file is stale\nfunction _updateCachedIndexFile() {\n  _updateCachedIndexFile = _asyncToGenerator(function* (fs, filepath, cache) {\n    const stat = yield fs.lstat(filepath);\n    const rawIndexFile = yield fs.read(filepath);\n    const index = yield GitIndex.from(rawIndexFile);\n    // cache the GitIndex object so we don't need to re-read it every time.\n    cache.map.set(filepath, index);\n    // Save the stat data for the index so we know whether the cached file is stale (modified by an outside process).\n    cache.stats.set(filepath, stat);\n  });\n  return _updateCachedIndexFile.apply(this, arguments);\n}\nfunction isIndexStale(_x6, _x7, _x8) {\n  return _isIndexStale.apply(this, arguments);\n}\nfunction _isIndexStale() {\n  _isIndexStale = _asyncToGenerator(function* (fs, filepath, cache) {\n    const savedStats = cache.stats.get(filepath);\n    if (savedStats === undefined) return true;\n    const currStats = yield fs.lstat(filepath);\n    if (savedStats === null) return false;\n    if (currStats === null) return false;\n    return compareStats(savedStats, currStats);\n  });\n  return _isIndexStale.apply(this, arguments);\n}\nclass GitIndexManager {\n  /**\n   *\n   * @param {object} opts\n   * @param {import('../models/FileSystem.js').FileSystem} opts.fs\n   * @param {string} opts.gitdir\n   * @param {object} opts.cache\n   * @param {function(GitIndex): any} closure\n   */\n  static acquire({\n    fs,\n    gitdir,\n    cache\n  }, closure) {\n    return _asyncToGenerator(function* () {\n      if (!cache.index) cache.index = createCache();\n      const filepath = `${gitdir}/index`;\n      if (lock === null) lock = new AsyncLock({\n        maxPending: Infinity\n      });\n      let result;\n      yield lock.acquire(filepath, /*#__PURE__*/_asyncToGenerator(function* () {\n        // Acquire a file lock while we're reading the index\n        // to make sure other processes aren't writing to it\n        // simultaneously, which could result in a corrupted index.\n        // const fileLock = await Lock(filepath)\n        if (yield isIndexStale(fs, filepath, cache.index)) {\n          yield updateCachedIndexFile(fs, filepath, cache.index);\n        }\n        const index = cache.index.map.get(filepath);\n        result = yield closure(index);\n        if (index._dirty) {\n          // Acquire a file lock while we're writing the index file\n          // let fileLock = await Lock(filepath)\n          const buffer = yield index.toObject();\n          yield fs.write(filepath, buffer);\n          // Update cached stat value\n          cache.index.stats.set(filepath, yield fs.lstat(filepath));\n          index._dirty = false;\n        }\n      }));\n      return result;\n    })();\n  }\n}\nfunction basename(path) {\n  const last = Math.max(path.lastIndexOf('/'), path.lastIndexOf('\\\\'));\n  if (last > -1) {\n    path = path.slice(last + 1);\n  }\n  return path;\n}\nfunction dirname(path) {\n  const last = Math.max(path.lastIndexOf('/'), path.lastIndexOf('\\\\'));\n  if (last === -1) return '.';\n  if (last === 0) return '/';\n  return path.slice(0, last);\n}\n\n/*::\ntype Node = {\n  type: string,\n  fullpath: string,\n  basename: string,\n  metadata: Object, // mode, oid\n  parent?: Node,\n  children: Array<Node>\n}\n*/\n\nfunction flatFileListToDirectoryStructure(files) {\n  const inodes = new Map();\n  const mkdir = function (name) {\n    if (!inodes.has(name)) {\n      const dir = {\n        type: 'tree',\n        fullpath: name,\n        basename: basename(name),\n        metadata: {},\n        children: []\n      };\n      inodes.set(name, dir);\n      // This recursively generates any missing parent folders.\n      // We do it after we've added the inode to the set so that\n      // we don't recurse infinitely trying to create the root '.' dirname.\n      dir.parent = mkdir(dirname(name));\n      if (dir.parent && dir.parent !== dir) dir.parent.children.push(dir);\n    }\n    return inodes.get(name);\n  };\n  const mkfile = function (name, metadata) {\n    if (!inodes.has(name)) {\n      const file = {\n        type: 'blob',\n        fullpath: name,\n        basename: basename(name),\n        metadata: metadata,\n        // This recursively generates any missing parent folders.\n        parent: mkdir(dirname(name)),\n        children: []\n      };\n      if (file.parent) file.parent.children.push(file);\n      inodes.set(name, file);\n    } else {\n      const duplicate = inodes.get(name);\n      if (!duplicate.conflictData) duplicate.conflictData = [];\n      duplicate.conflictData.push(metadata);\n    }\n    return inodes.get(name);\n  };\n  mkdir('.');\n  for (const file of files) {\n    mkfile(file.path, file);\n  }\n  return inodes;\n}\n\n/**\n *\n * @param {number} mode\n */\nfunction mode2type(mode) {\n  // prettier-ignore\n  switch (mode) {\n    case 0o040000:\n      return 'tree';\n    case 0o100644:\n      return 'blob';\n    case 0o100755:\n      return 'blob';\n    case 0o120000:\n      return 'blob';\n    case 0o160000:\n      return 'commit';\n  }\n  throw new InternalError(`Unexpected GitTree entry mode: ${mode.toString(8)}`);\n}\nclass GitWalkerIndex {\n  constructor({\n    fs,\n    gitdir,\n    cache\n  }) {\n    this.treePromise = GitIndexManager.acquire({\n      fs,\n      gitdir,\n      cache\n    }, /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (index) {\n        return flatFileListToDirectoryStructure(index.entries);\n      });\n      return function (_x9) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    const walker = this;\n    this.ConstructEntry = class StageEntry {\n      constructor(fullpath) {\n        this._fullpath = fullpath;\n        this._type = false;\n        this._mode = false;\n        this._stat = false;\n        this._oid = false;\n      }\n      type() {\n        var _this2 = this;\n        return _asyncToGenerator(function* () {\n          return walker.type(_this2);\n        })();\n      }\n      mode() {\n        var _this3 = this;\n        return _asyncToGenerator(function* () {\n          return walker.mode(_this3);\n        })();\n      }\n      stat() {\n        var _this4 = this;\n        return _asyncToGenerator(function* () {\n          return walker.stat(_this4);\n        })();\n      }\n      content() {\n        var _this5 = this;\n        return _asyncToGenerator(function* () {\n          return walker.content(_this5);\n        })();\n      }\n      oid() {\n        var _this6 = this;\n        return _asyncToGenerator(function* () {\n          return walker.oid(_this6);\n        })();\n      }\n      isConflict() {\n        var _this7 = this;\n        return _asyncToGenerator(function* () {\n          const inode = (yield walker.treePromise).get(_this7._fullpath);\n          if (inode) return inode.metadata.flags.stage !== 0;\n          return false;\n        })();\n      }\n      conflictData() {\n        var _this8 = this;\n        return _asyncToGenerator(function* () {\n          const inode = (yield walker.treePromise).get(_this8._fullpath);\n          if (inode) return conflictStatus({\n            fs,\n            cache,\n            gitdir,\n            entries: [inode.metadata, ...(inode.conflictData ? inode.conflictData : [])]\n          });\n        })();\n      }\n    };\n  }\n  readdir(entry) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const filepath = entry._fullpath;\n      const tree = yield _this9.treePromise;\n      const inode = tree.get(filepath);\n      if (!inode) return null;\n      if (inode.type === 'blob') return null;\n      if (inode.type !== 'tree') {\n        throw new Error(`ENOTDIR: not a directory, scandir '${filepath}'`);\n      }\n      const names = inode.children.map(inode => inode.fullpath);\n      names.sort(compareStrings);\n      return names;\n    })();\n  }\n  type(entry) {\n    return _asyncToGenerator(function* () {\n      if (entry._type === false) {\n        yield entry.stat();\n      }\n      return entry._type;\n    })();\n  }\n  mode(entry) {\n    return _asyncToGenerator(function* () {\n      if (entry._mode === false) {\n        yield entry.stat();\n      }\n      return entry._mode;\n    })();\n  }\n  stat(entry) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      if (entry._stat === false) {\n        const tree = yield _this10.treePromise;\n        const inode = tree.get(entry._fullpath);\n        if (!inode) {\n          throw new Error(`ENOENT: no such file or directory, lstat '${entry._fullpath}'`);\n        }\n        const stats = inode.type === 'tree' ? {} : normalizeStats(inode.metadata);\n        entry._type = inode.type === 'tree' ? 'tree' : mode2type(stats.mode);\n        entry._mode = stats.mode;\n        if (inode.type === 'tree') {\n          entry._stat = undefined;\n        } else {\n          entry._stat = stats;\n        }\n      }\n      return entry._stat;\n    })();\n  }\n  content(_entry) {\n    return _asyncToGenerator(function* () {})();\n  } // Cannot get content for an index entry\n  oid(entry) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      if (entry._oid === false) {\n        const tree = yield _this11.treePromise;\n        const inode = tree.get(entry._fullpath);\n        entry._oid = inode.metadata.oid;\n      }\n      return entry._oid;\n    })();\n  }\n}\n\n// This is part of an elaborate system to facilitate code-splitting / tree-shaking.\n// commands/walk.js can depend on only this, and the actual Walker classes exported\n// can be opaque - only having a single property (this symbol) that is not enumerable,\n// and thus the constructor can be passed as an argument to walk while being \"unusable\"\n// outside of it.\nconst GitWalkSymbol = Symbol('GitWalkSymbol');\n\n// @ts-check\n\n/**\n * @returns {Walker}\n */\nfunction STAGE() {\n  const o = Object.create(null);\n  Object.defineProperty(o, GitWalkSymbol, {\n    value: function ({\n      fs,\n      gitdir,\n      cache\n    }) {\n      return new GitWalkerIndex({\n        fs,\n        gitdir,\n        cache\n      });\n    }\n  });\n  Object.freeze(o);\n  return o;\n}\n\n// @ts-check\n\nclass NotFoundError extends BaseError {\n  /**\n   * @param {string} what\n   */\n  constructor(what) {\n    super(`Could not find ${what}.`);\n    this.code = this.name = NotFoundError.code;\n    this.data = {\n      what\n    };\n  }\n}\n/** @type {'NotFoundError'} */\nNotFoundError.code = 'NotFoundError';\nclass ObjectTypeError extends BaseError {\n  /**\n   * @param {string} oid\n   * @param {'blob'|'commit'|'tag'|'tree'} actual\n   * @param {'blob'|'commit'|'tag'|'tree'} expected\n   * @param {string} [filepath]\n   */\n  constructor(oid, actual, expected, filepath) {\n    super(`Object ${oid} ${filepath ? `at ${filepath}` : ''}was anticipated to be a ${expected} but it is a ${actual}.`);\n    this.code = this.name = ObjectTypeError.code;\n    this.data = {\n      oid,\n      actual,\n      expected,\n      filepath\n    };\n  }\n}\n/** @type {'ObjectTypeError'} */\nObjectTypeError.code = 'ObjectTypeError';\nclass InvalidOidError extends BaseError {\n  /**\n   * @param {string} value\n   */\n  constructor(value) {\n    super(`Expected a 40-char hex object id but saw \"${value}\".`);\n    this.code = this.name = InvalidOidError.code;\n    this.data = {\n      value\n    };\n  }\n}\n/** @type {'InvalidOidError'} */\nInvalidOidError.code = 'InvalidOidError';\nclass NoRefspecError extends BaseError {\n  /**\n   * @param {string} remote\n   */\n  constructor(remote) {\n    super(`Could not find a fetch refspec for remote \"${remote}\". Make sure the config file has an entry like the following:\n[remote \"${remote}\"]\n\\tfetch = +refs/heads/*:refs/remotes/origin/*\n`);\n    this.code = this.name = NoRefspecError.code;\n    this.data = {\n      remote\n    };\n  }\n}\n/** @type {'NoRefspecError'} */\nNoRefspecError.code = 'NoRefspecError';\nclass GitPackedRefs {\n  constructor(text) {\n    this.refs = new Map();\n    this.parsedConfig = [];\n    if (text) {\n      let key = null;\n      this.parsedConfig = text.trim().split('\\n').map(line => {\n        if (/^\\s*#/.test(line)) {\n          return {\n            line,\n            comment: true\n          };\n        }\n        const i = line.indexOf(' ');\n        if (line.startsWith('^')) {\n          // This is a oid for the commit associated with the annotated tag immediately preceding this line.\n          // Trim off the '^'\n          const value = line.slice(1);\n          // The tagname^{} syntax is based on the output of `git show-ref --tags -d`\n          this.refs.set(key + '^{}', value);\n          return {\n            line,\n            ref: key,\n            peeled: value\n          };\n        } else {\n          // This is an oid followed by the ref name\n          const value = line.slice(0, i);\n          key = line.slice(i + 1);\n          this.refs.set(key, value);\n          return {\n            line,\n            ref: key,\n            oid: value\n          };\n        }\n      });\n    }\n    return this;\n  }\n  static from(text) {\n    return new GitPackedRefs(text);\n  }\n  delete(ref) {\n    this.parsedConfig = this.parsedConfig.filter(entry => entry.ref !== ref);\n    this.refs.delete(ref);\n  }\n  toString() {\n    return this.parsedConfig.map(({\n      line\n    }) => line).join('\\n') + '\\n';\n  }\n}\nclass GitRefSpec {\n  constructor({\n    remotePath,\n    localPath,\n    force,\n    matchPrefix\n  }) {\n    Object.assign(this, {\n      remotePath,\n      localPath,\n      force,\n      matchPrefix\n    });\n  }\n  static from(refspec) {\n    const [forceMatch, remotePath, remoteGlobMatch, localPath, localGlobMatch] = refspec.match(/^(\\+?)(.*?)(\\*?):(.*?)(\\*?)$/).slice(1);\n    const force = forceMatch === '+';\n    const remoteIsGlob = remoteGlobMatch === '*';\n    const localIsGlob = localGlobMatch === '*';\n    // validate\n    // TODO: Make this check more nuanced, and depend on whether this is a fetch refspec or a push refspec\n    if (remoteIsGlob !== localIsGlob) {\n      throw new InternalError('Invalid refspec');\n    }\n    return new GitRefSpec({\n      remotePath,\n      localPath,\n      force,\n      matchPrefix: remoteIsGlob\n    });\n    // TODO: We need to run resolveRef on both paths to expand them to their full name.\n  }\n  translate(remoteBranch) {\n    if (this.matchPrefix) {\n      if (remoteBranch.startsWith(this.remotePath)) {\n        return this.localPath + remoteBranch.replace(this.remotePath, '');\n      }\n    } else {\n      if (remoteBranch === this.remotePath) return this.localPath;\n    }\n    return null;\n  }\n  reverseTranslate(localBranch) {\n    if (this.matchPrefix) {\n      if (localBranch.startsWith(this.localPath)) {\n        return this.remotePath + localBranch.replace(this.localPath, '');\n      }\n    } else {\n      if (localBranch === this.localPath) return this.remotePath;\n    }\n    return null;\n  }\n}\nclass GitRefSpecSet {\n  constructor(rules = []) {\n    this.rules = rules;\n  }\n  static from(refspecs) {\n    const rules = [];\n    for (const refspec of refspecs) {\n      rules.push(GitRefSpec.from(refspec)); // might throw\n    }\n    return new GitRefSpecSet(rules);\n  }\n  add(refspec) {\n    const rule = GitRefSpec.from(refspec); // might throw\n    this.rules.push(rule);\n  }\n  translate(remoteRefs) {\n    const result = [];\n    for (const rule of this.rules) {\n      for (const remoteRef of remoteRefs) {\n        const localRef = rule.translate(remoteRef);\n        if (localRef) {\n          result.push([remoteRef, localRef]);\n        }\n      }\n    }\n    return result;\n  }\n  translateOne(remoteRef) {\n    let result = null;\n    for (const rule of this.rules) {\n      const localRef = rule.translate(remoteRef);\n      if (localRef) {\n        result = localRef;\n      }\n    }\n    return result;\n  }\n  localNamespaces() {\n    return this.rules.filter(rule => rule.matchPrefix).map(rule => rule.localPath.replace(/\\/$/, ''));\n  }\n}\nfunction compareRefNames(a, b) {\n  // https://stackoverflow.com/a/40355107/2168416\n  const _a = a.replace(/\\^\\{\\}$/, '');\n  const _b = b.replace(/\\^\\{\\}$/, '');\n  const tmp = -(_a < _b) || +(_a > _b);\n  if (tmp === 0) {\n    return a.endsWith('^{}') ? 1 : -1;\n  }\n  return tmp;\n}\nfunction normalizePath(path) {\n  return path.replace(/\\/\\.\\//g, '/') // Replace '/./' with '/'\n  .replace(/\\/{2,}/g, '/') // Replace consecutive '/'\n  .replace(/^\\/\\.$/, '/') // if path === '/.' return '/'\n  .replace(/^\\.\\/$/, '.') // if path === './' return '.'\n  .replace(/^\\.\\//, '') // Remove leading './'\n  .replace(/\\/\\.$/, '') // Remove trailing '/.'\n  .replace(/(.+)\\/$/, '$1') // Remove trailing '/'\n  .replace(/^$/, '.'); // if path === '' return '.'\n}\n\n// For some reason path.posix.join is undefined in webpack\n\nfunction join(...parts) {\n  return normalizePath(parts.map(normalizePath).join('/'));\n}\n\n// This is straight from parse_unit_factor in config.c of canonical git\nconst num = val => {\n  val = val.toLowerCase();\n  let n = parseInt(val);\n  if (val.endsWith('k')) n *= 1024;\n  if (val.endsWith('m')) n *= 1024 * 1024;\n  if (val.endsWith('g')) n *= 1024 * 1024 * 1024;\n  return n;\n};\n\n// This is straight from git_parse_maybe_bool_text in config.c of canonical git\nconst bool = val => {\n  val = val.trim().toLowerCase();\n  if (val === 'true' || val === 'yes' || val === 'on') return true;\n  if (val === 'false' || val === 'no' || val === 'off') return false;\n  throw Error(`Expected 'true', 'false', 'yes', 'no', 'on', or 'off', but got ${val}`);\n};\nconst schema = {\n  core: {\n    filemode: bool,\n    bare: bool,\n    logallrefupdates: bool,\n    symlinks: bool,\n    ignorecase: bool,\n    bigFileThreshold: num\n  }\n};\n\n// https://git-scm.com/docs/git-config#_syntax\n\n// section starts with [ and ends with ]\n// section is alphanumeric (ASCII) with - and .\n// section is case insensitive\n// subsection is optionnal\n// subsection is specified after section and one or more spaces\n// subsection is specified between double quotes\nconst SECTION_LINE_REGEX = /^\\[([A-Za-z0-9-.]+)(?: \"(.*)\")?\\]$/;\nconst SECTION_REGEX = /^[A-Za-z0-9-.]+$/;\n\n// variable lines contain a name, and equal sign and then a value\n// variable lines can also only contain a name (the implicit value is a boolean true)\n// variable name is alphanumeric (ASCII) with -\n// variable name starts with an alphabetic character\n// variable name is case insensitive\nconst VARIABLE_LINE_REGEX = /^([A-Za-z][A-Za-z-]*)(?: *= *(.*))?$/;\nconst VARIABLE_NAME_REGEX = /^[A-Za-z][A-Za-z-]*$/;\nconst VARIABLE_VALUE_COMMENT_REGEX = /^(.*?)( *[#;].*)$/;\nconst extractSectionLine = line => {\n  const matches = SECTION_LINE_REGEX.exec(line);\n  if (matches != null) {\n    const [section, subsection] = matches.slice(1);\n    return [section, subsection];\n  }\n  return null;\n};\nconst extractVariableLine = line => {\n  const matches = VARIABLE_LINE_REGEX.exec(line);\n  if (matches != null) {\n    const [name, rawValue = 'true'] = matches.slice(1);\n    const valueWithoutComments = removeComments(rawValue);\n    const valueWithoutQuotes = removeQuotes(valueWithoutComments);\n    return [name, valueWithoutQuotes];\n  }\n  return null;\n};\nconst removeComments = rawValue => {\n  const commentMatches = VARIABLE_VALUE_COMMENT_REGEX.exec(rawValue);\n  if (commentMatches == null) {\n    return rawValue;\n  }\n  const [valueWithoutComment, comment] = commentMatches.slice(1);\n  // if odd number of quotes before and after comment => comment is escaped\n  if (hasOddNumberOfQuotes(valueWithoutComment) && hasOddNumberOfQuotes(comment)) {\n    return `${valueWithoutComment}${comment}`;\n  }\n  return valueWithoutComment;\n};\nconst hasOddNumberOfQuotes = text => {\n  const numberOfQuotes = (text.match(/(?:^|[^\\\\])\"/g) || []).length;\n  return numberOfQuotes % 2 !== 0;\n};\nconst removeQuotes = text => {\n  return text.split('').reduce((newText, c, idx, text) => {\n    const isQuote = c === '\"' && text[idx - 1] !== '\\\\';\n    const isEscapeForQuote = c === '\\\\' && text[idx + 1] === '\"';\n    if (isQuote || isEscapeForQuote) {\n      return newText;\n    }\n    return newText + c;\n  }, '');\n};\nconst lower = text => {\n  return text != null ? text.toLowerCase() : null;\n};\nconst getPath = (section, subsection, name) => {\n  return [lower(section), subsection, lower(name)].filter(a => a != null).join('.');\n};\nconst findLastIndex = (array, callback) => {\n  return array.reduce((lastIndex, item, index) => {\n    return callback(item) ? index : lastIndex;\n  }, -1);\n};\n\n// Note: there are a LOT of edge cases that aren't covered (e.g. keys in sections that also\n// have subsections, [include] directives, etc.\nclass GitConfig {\n  constructor(text) {\n    let section = null;\n    let subsection = null;\n    this.parsedConfig = text.split('\\n').map(line => {\n      let name = null;\n      let value = null;\n      const trimmedLine = line.trim();\n      const extractedSection = extractSectionLine(trimmedLine);\n      const isSection = extractedSection != null;\n      if (isSection) {\n        ;\n        [section, subsection] = extractedSection;\n      } else {\n        const extractedVariable = extractVariableLine(trimmedLine);\n        const isVariable = extractedVariable != null;\n        if (isVariable) {\n          ;\n          [name, value] = extractedVariable;\n        }\n      }\n      const path = getPath(section, subsection, name);\n      return {\n        line,\n        isSection,\n        section,\n        subsection,\n        name,\n        value,\n        path\n      };\n    });\n  }\n  static from(text) {\n    return new GitConfig(text);\n  }\n  get(path, getall = false) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      const allValues = _this12.parsedConfig.filter(config => config.path === path.toLowerCase()).map(({\n        section,\n        name,\n        value\n      }) => {\n        const fn = schema[section] && schema[section][name];\n        return fn ? fn(value) : value;\n      });\n      return getall ? allValues : allValues.pop();\n    })();\n  }\n  getall(path) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      return _this13.get(path, true);\n    })();\n  }\n  getSubsections(section) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      return _this14.parsedConfig.filter(config => config.section === section && config.isSection).map(config => config.subsection);\n    })();\n  }\n  deleteSection(section, subsection) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      _this15.parsedConfig = _this15.parsedConfig.filter(config => !(config.section === section && config.subsection === subsection));\n    })();\n  }\n  append(path, value) {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      return _this16.set(path, value, true);\n    })();\n  }\n  set(path, value, append = false) {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      const configIndex = findLastIndex(_this17.parsedConfig, config => config.path === path.toLowerCase());\n      if (value == null) {\n        if (configIndex !== -1) {\n          _this17.parsedConfig.splice(configIndex, 1);\n        }\n      } else {\n        if (configIndex !== -1) {\n          const config = _this17.parsedConfig[configIndex];\n          const modifiedConfig = Object.assign({}, config, {\n            value,\n            modified: true\n          });\n          if (append) {\n            _this17.parsedConfig.splice(configIndex + 1, 0, modifiedConfig);\n          } else {\n            _this17.parsedConfig[configIndex] = modifiedConfig;\n          }\n        } else {\n          const sectionPath = path.split('.').slice(0, -1).join('.').toLowerCase();\n          const sectionIndex = _this17.parsedConfig.findIndex(config => config.path === sectionPath);\n          const [section, subsection] = sectionPath.split('.');\n          const name = path.split('.').pop();\n          const newConfig = {\n            section,\n            subsection,\n            name,\n            value,\n            modified: true,\n            path: getPath(section, subsection, name)\n          };\n          if (SECTION_REGEX.test(section) && VARIABLE_NAME_REGEX.test(name)) {\n            if (sectionIndex >= 0) {\n              // Reuse existing section\n              _this17.parsedConfig.splice(sectionIndex + 1, 0, newConfig);\n            } else {\n              // Add a new section\n              const newSection = {\n                section,\n                subsection,\n                modified: true,\n                path: getPath(section, subsection, null)\n              };\n              _this17.parsedConfig.push(newSection, newConfig);\n            }\n          }\n        }\n      }\n    })();\n  }\n  toString() {\n    return this.parsedConfig.map(({\n      line,\n      section,\n      subsection,\n      name,\n      value,\n      modified = false\n    }) => {\n      if (!modified) {\n        return line;\n      }\n      if (name != null && value != null) {\n        return `\\t${name} = ${value}`;\n      }\n      if (subsection != null) {\n        return `[${section} \"${subsection}\"]`;\n      }\n      return `[${section}]`;\n    }).join('\\n');\n  }\n}\nclass GitConfigManager {\n  static get({\n    fs,\n    gitdir\n  }) {\n    return _asyncToGenerator(function* () {\n      // We can improve efficiency and thread safety later if needed.\n      // TODO: read from full list of git config files\n      const text = yield fs.read(`${gitdir}/config`, {\n        encoding: 'utf8'\n      });\n      return GitConfig.from(text);\n    })();\n  }\n  static save({\n    fs,\n    gitdir,\n    config\n  }) {\n    return _asyncToGenerator(function* () {\n      // We can improve efficiency later if needed.\n      // TODO: handle saving to the correct global/user/repo location\n      yield fs.write(`${gitdir}/config`, config.toString(), {\n        encoding: 'utf8'\n      });\n    })();\n  }\n}\n\n// This is a convenience wrapper for reading and writing files in the 'refs' directory.\n\n// @see https://git-scm.com/docs/git-rev-parse.html#_specifying_revisions\nconst refpaths = ref => [`${ref}`, `refs/${ref}`, `refs/tags/${ref}`, `refs/heads/${ref}`, `refs/remotes/${ref}`, `refs/remotes/${ref}/HEAD`];\n\n// @see https://git-scm.com/docs/gitrepository-layout\nconst GIT_FILES = ['config', 'description', 'index', 'shallow', 'commondir'];\nclass GitRefManager {\n  static updateRemoteRefs({\n    fs,\n    gitdir,\n    remote,\n    refs,\n    symrefs,\n    tags,\n    refspecs = undefined,\n    prune = false,\n    pruneTags = false\n  }) {\n    return _asyncToGenerator(function* () {\n      // Validate input\n      for (const value of refs.values()) {\n        if (!value.match(/[0-9a-f]{40}/)) {\n          throw new InvalidOidError(value);\n        }\n      }\n      const config = yield GitConfigManager.get({\n        fs,\n        gitdir\n      });\n      if (!refspecs) {\n        refspecs = yield config.getall(`remote.${remote}.fetch`);\n        if (refspecs.length === 0) {\n          throw new NoRefspecError(remote);\n        }\n        // There's some interesting behavior with HEAD that doesn't follow the refspec.\n        refspecs.unshift(`+HEAD:refs/remotes/${remote}/HEAD`);\n      }\n      const refspec = GitRefSpecSet.from(refspecs);\n      const actualRefsToWrite = new Map();\n      // Delete all current tags if the pruneTags argument is true.\n      if (pruneTags) {\n        const tags = yield GitRefManager.listRefs({\n          fs,\n          gitdir,\n          filepath: 'refs/tags'\n        });\n        yield GitRefManager.deleteRefs({\n          fs,\n          gitdir,\n          refs: tags.map(tag => `refs/tags/${tag}`)\n        });\n      }\n      // Add all tags if the fetch tags argument is true.\n      if (tags) {\n        for (const serverRef of refs.keys()) {\n          if (serverRef.startsWith('refs/tags') && !serverRef.endsWith('^{}')) {\n            // Git's behavior is to only fetch tags that do not conflict with tags already present.\n            if (!(yield GitRefManager.exists({\n              fs,\n              gitdir,\n              ref: serverRef\n            }))) {\n              // If there is a dereferenced an annotated tag value available, prefer that.\n              const oid = refs.get(serverRef + '^{}') || refs.get(serverRef);\n              actualRefsToWrite.set(serverRef, oid);\n            }\n          }\n        }\n      }\n      // Combine refs and symrefs giving symrefs priority\n      const refTranslations = refspec.translate([...refs.keys()]);\n      for (const [serverRef, translatedRef] of refTranslations) {\n        const value = refs.get(serverRef);\n        actualRefsToWrite.set(translatedRef, value);\n      }\n      const symrefTranslations = refspec.translate([...symrefs.keys()]);\n      for (const [serverRef, translatedRef] of symrefTranslations) {\n        const value = symrefs.get(serverRef);\n        const symtarget = refspec.translateOne(value);\n        if (symtarget) {\n          actualRefsToWrite.set(translatedRef, `ref: ${symtarget}`);\n        }\n      }\n      // If `prune` argument is true, clear out the existing local refspec roots\n      const pruned = [];\n      if (prune) {\n        for (const filepath of refspec.localNamespaces()) {\n          const refs = (yield GitRefManager.listRefs({\n            fs,\n            gitdir,\n            filepath\n          })).map(file => `${filepath}/${file}`);\n          for (const ref of refs) {\n            if (!actualRefsToWrite.has(ref)) {\n              pruned.push(ref);\n            }\n          }\n        }\n        if (pruned.length > 0) {\n          yield GitRefManager.deleteRefs({\n            fs,\n            gitdir,\n            refs: pruned\n          });\n        }\n      }\n      // Update files\n      // TODO: For large repos with a history of thousands of pull requests\n      // (i.e. gitlab-ce) it would be vastly more efficient to write them\n      // to .git/packed-refs.\n      // The trick is to make sure we a) don't write a packed ref that is\n      // already shadowed by a loose ref and b) don't loose any refs already\n      // in packed-refs. Doing this efficiently may be difficult. A\n      // solution that might work is\n      // a) load the current packed-refs file\n      // b) add actualRefsToWrite, overriding the existing values if present\n      // c) enumerate all the loose refs currently in .git/refs/remotes/${remote}\n      // d) overwrite their value with the new value.\n      // Examples of refs we need to avoid writing in loose format for efficieny's sake\n      // are .git/refs/remotes/origin/refs/remotes/remote_mirror_3059\n      // and .git/refs/remotes/origin/refs/merge-requests\n      for (const [key, value] of actualRefsToWrite) {\n        yield fs.write(join(gitdir, key), `${value.trim()}\\n`, 'utf8');\n      }\n      return {\n        pruned\n      };\n    })();\n  }\n\n  // TODO: make this less crude?\n  static writeRef({\n    fs,\n    gitdir,\n    ref,\n    value\n  }) {\n    return _asyncToGenerator(function* () {\n      // Validate input\n      if (!value.match(/[0-9a-f]{40}/)) {\n        throw new InvalidOidError(value);\n      }\n      yield fs.write(join(gitdir, ref), `${value.trim()}\\n`, 'utf8');\n    })();\n  }\n  static writeSymbolicRef({\n    fs,\n    gitdir,\n    ref,\n    value\n  }) {\n    return _asyncToGenerator(function* () {\n      yield fs.write(join(gitdir, ref), 'ref: ' + `${value.trim()}\\n`, 'utf8');\n    })();\n  }\n  static deleteRef({\n    fs,\n    gitdir,\n    ref\n  }) {\n    return _asyncToGenerator(function* () {\n      return GitRefManager.deleteRefs({\n        fs,\n        gitdir,\n        refs: [ref]\n      });\n    })();\n  }\n  static deleteRefs({\n    fs,\n    gitdir,\n    refs\n  }) {\n    return _asyncToGenerator(function* () {\n      // Delete regular ref\n      yield Promise.all(refs.map(ref => fs.rm(join(gitdir, ref))));\n      // Delete any packed ref\n      let text = yield fs.read(`${gitdir}/packed-refs`, {\n        encoding: 'utf8'\n      });\n      const packed = GitPackedRefs.from(text);\n      const beforeSize = packed.refs.size;\n      for (const ref of refs) {\n        if (packed.refs.has(ref)) {\n          packed.delete(ref);\n        }\n      }\n      if (packed.refs.size < beforeSize) {\n        text = packed.toString();\n        yield fs.write(`${gitdir}/packed-refs`, text, {\n          encoding: 'utf8'\n        });\n      }\n    })();\n  }\n\n  /**\n   * @param {object} args\n   * @param {import('../models/FileSystem.js').FileSystem} args.fs\n   * @param {string} args.gitdir\n   * @param {string} args.ref\n   * @param {number} [args.depth]\n   * @returns {Promise<string>}\n   */\n  static resolve({\n    fs,\n    gitdir,\n    ref,\n    depth = undefined\n  }) {\n    return _asyncToGenerator(function* () {\n      if (depth !== undefined) {\n        depth--;\n        if (depth === -1) {\n          return ref;\n        }\n      }\n      let sha;\n      // Is it a ref pointer?\n      if (ref.startsWith('ref: ')) {\n        ref = ref.slice('ref: '.length);\n        return GitRefManager.resolve({\n          fs,\n          gitdir,\n          ref,\n          depth\n        });\n      }\n      // Is it a complete and valid SHA?\n      if (ref.length === 40 && /[0-9a-f]{40}/.test(ref)) {\n        return ref;\n      }\n      // We need to alternate between the file system and the packed-refs\n      const packedMap = yield GitRefManager.packedRefs({\n        fs,\n        gitdir\n      });\n      // Look in all the proper paths, in this order\n      const allpaths = refpaths(ref).filter(p => !GIT_FILES.includes(p)); // exclude git system files (#709)\n\n      for (const ref of allpaths) {\n        sha = (yield fs.read(`${gitdir}/${ref}`, {\n          encoding: 'utf8'\n        })) || packedMap.get(ref);\n        if (sha) {\n          return GitRefManager.resolve({\n            fs,\n            gitdir,\n            ref: sha.trim(),\n            depth\n          });\n        }\n      }\n      // Do we give up?\n      throw new NotFoundError(ref);\n    })();\n  }\n  static exists({\n    fs,\n    gitdir,\n    ref\n  }) {\n    return _asyncToGenerator(function* () {\n      try {\n        yield GitRefManager.expand({\n          fs,\n          gitdir,\n          ref\n        });\n        return true;\n      } catch (err) {\n        return false;\n      }\n    })();\n  }\n  static expand({\n    fs,\n    gitdir,\n    ref\n  }) {\n    return _asyncToGenerator(function* () {\n      // Is it a complete and valid SHA?\n      if (ref.length === 40 && /[0-9a-f]{40}/.test(ref)) {\n        return ref;\n      }\n      // We need to alternate between the file system and the packed-refs\n      const packedMap = yield GitRefManager.packedRefs({\n        fs,\n        gitdir\n      });\n      // Look in all the proper paths, in this order\n      const allpaths = refpaths(ref);\n      for (const ref of allpaths) {\n        if (yield fs.exists(`${gitdir}/${ref}`)) return ref;\n        if (packedMap.has(ref)) return ref;\n      }\n      // Do we give up?\n      throw new NotFoundError(ref);\n    })();\n  }\n  static expandAgainstMap({\n    ref,\n    map\n  }) {\n    return _asyncToGenerator(function* () {\n      // Look in all the proper paths, in this order\n      const allpaths = refpaths(ref);\n      for (const ref of allpaths) {\n        if (yield map.has(ref)) return ref;\n      }\n      // Do we give up?\n      throw new NotFoundError(ref);\n    })();\n  }\n  static resolveAgainstMap({\n    ref,\n    fullref = ref,\n    depth = undefined,\n    map\n  }) {\n    if (depth !== undefined) {\n      depth--;\n      if (depth === -1) {\n        return {\n          fullref,\n          oid: ref\n        };\n      }\n    }\n    // Is it a ref pointer?\n    if (ref.startsWith('ref: ')) {\n      ref = ref.slice('ref: '.length);\n      return GitRefManager.resolveAgainstMap({\n        ref,\n        fullref,\n        depth,\n        map\n      });\n    }\n    // Is it a complete and valid SHA?\n    if (ref.length === 40 && /[0-9a-f]{40}/.test(ref)) {\n      return {\n        fullref,\n        oid: ref\n      };\n    }\n    // Look in all the proper paths, in this order\n    const allpaths = refpaths(ref);\n    for (const ref of allpaths) {\n      const sha = map.get(ref);\n      if (sha) {\n        return GitRefManager.resolveAgainstMap({\n          ref: sha.trim(),\n          fullref: ref,\n          depth,\n          map\n        });\n      }\n    }\n    // Do we give up?\n    throw new NotFoundError(ref);\n  }\n  static packedRefs({\n    fs,\n    gitdir\n  }) {\n    return _asyncToGenerator(function* () {\n      const text = yield fs.read(`${gitdir}/packed-refs`, {\n        encoding: 'utf8'\n      });\n      const packed = GitPackedRefs.from(text);\n      return packed.refs;\n    })();\n  }\n\n  // List all the refs that match the `filepath` prefix\n  static listRefs({\n    fs,\n    gitdir,\n    filepath\n  }) {\n    return _asyncToGenerator(function* () {\n      const packedMap = GitRefManager.packedRefs({\n        fs,\n        gitdir\n      });\n      let files = null;\n      try {\n        files = yield fs.readdirDeep(`${gitdir}/${filepath}`);\n        files = files.map(x => x.replace(`${gitdir}/${filepath}/`, ''));\n      } catch (err) {\n        files = [];\n      }\n      for (let key of (yield packedMap).keys()) {\n        // filter by prefix\n        if (key.startsWith(filepath)) {\n          // remove prefix\n          key = key.replace(filepath + '/', '');\n          // Don't include duplicates; the loose files have precedence anyway\n          if (!files.includes(key)) {\n            files.push(key);\n          }\n        }\n      }\n      // since we just appended things onto an array, we need to sort them now\n      files.sort(compareRefNames);\n      return files;\n    })();\n  }\n  static listBranches({\n    fs,\n    gitdir,\n    remote\n  }) {\n    return _asyncToGenerator(function* () {\n      if (remote) {\n        return GitRefManager.listRefs({\n          fs,\n          gitdir,\n          filepath: `refs/remotes/${remote}`\n        });\n      } else {\n        return GitRefManager.listRefs({\n          fs,\n          gitdir,\n          filepath: `refs/heads`\n        });\n      }\n    })();\n  }\n  static listTags({\n    fs,\n    gitdir\n  }) {\n    return _asyncToGenerator(function* () {\n      const tags = yield GitRefManager.listRefs({\n        fs,\n        gitdir,\n        filepath: `refs/tags`\n      });\n      return tags.filter(x => !x.endsWith('^{}'));\n    })();\n  }\n}\nfunction compareTreeEntryPath(a, b) {\n  // Git sorts tree entries as if there is a trailing slash on directory names.\n  return compareStrings(appendSlashIfDir(a), appendSlashIfDir(b));\n}\nfunction appendSlashIfDir(entry) {\n  return entry.mode === '040000' ? entry.path + '/' : entry.path;\n}\n\n/**\n *\n * @typedef {Object} TreeEntry\n * @property {string} mode - the 6 digit hexadecimal mode\n * @property {string} path - the name of the file or directory\n * @property {string} oid - the SHA-1 object id of the blob or tree\n * @property {'commit'|'blob'|'tree'} type - the type of object\n */\n\nfunction mode2type$1(mode) {\n  // prettier-ignore\n  switch (mode) {\n    case '040000':\n      return 'tree';\n    case '100644':\n      return 'blob';\n    case '100755':\n      return 'blob';\n    case '120000':\n      return 'blob';\n    case '160000':\n      return 'commit';\n  }\n  throw new InternalError(`Unexpected GitTree entry mode: ${mode}`);\n}\nfunction parseBuffer(buffer) {\n  const _entries = [];\n  let cursor = 0;\n  while (cursor < buffer.length) {\n    const space = buffer.indexOf(32, cursor);\n    if (space === -1) {\n      throw new InternalError(`GitTree: Error parsing buffer at byte location ${cursor}: Could not find the next space character.`);\n    }\n    const nullchar = buffer.indexOf(0, cursor);\n    if (nullchar === -1) {\n      throw new InternalError(`GitTree: Error parsing buffer at byte location ${cursor}: Could not find the next null character.`);\n    }\n    let mode = buffer.slice(cursor, space).toString('utf8');\n    if (mode === '40000') mode = '040000'; // makes it line up neater in printed output\n    const type = mode2type$1(mode);\n    const path = buffer.slice(space + 1, nullchar).toString('utf8');\n    const oid = buffer.slice(nullchar + 1, nullchar + 21).toString('hex');\n    cursor = nullchar + 21;\n    _entries.push({\n      mode,\n      path,\n      oid,\n      type\n    });\n  }\n  return _entries;\n}\nfunction limitModeToAllowed(mode) {\n  if (typeof mode === 'number') {\n    mode = mode.toString(8);\n  }\n  // tree\n  if (mode.match(/^0?4.*/)) return '040000'; // Directory\n  if (mode.match(/^1006.*/)) return '100644'; // Regular non-executable file\n  if (mode.match(/^1007.*/)) return '100755'; // Regular executable file\n  if (mode.match(/^120.*/)) return '120000'; // Symbolic link\n  if (mode.match(/^160.*/)) return '160000'; // Commit (git submodule reference)\n  throw new InternalError(`Could not understand file mode: ${mode}`);\n}\nfunction nudgeIntoShape(entry) {\n  if (!entry.oid && entry.sha) {\n    entry.oid = entry.sha; // Github\n  }\n  entry.mode = limitModeToAllowed(entry.mode); // index\n  if (!entry.type) {\n    entry.type = mode2type$1(entry.mode); // index\n  }\n  return entry;\n}\nclass GitTree {\n  constructor(entries) {\n    if (Buffer.isBuffer(entries)) {\n      this._entries = parseBuffer(entries);\n    } else if (Array.isArray(entries)) {\n      this._entries = entries.map(nudgeIntoShape);\n    } else {\n      throw new InternalError('invalid type passed to GitTree constructor');\n    }\n    // Tree entries are not sorted alphabetically in the usual sense (see `compareTreeEntryPath`)\n    // but it is important later on that these be sorted in the same order as they would be returned from readdir.\n    this._entries.sort(comparePath);\n  }\n  static from(tree) {\n    return new GitTree(tree);\n  }\n  render() {\n    return this._entries.map(entry => `${entry.mode} ${entry.type} ${entry.oid}    ${entry.path}`).join('\\n');\n  }\n  toObject() {\n    // Adjust the sort order to match git's\n    const entries = [...this._entries];\n    entries.sort(compareTreeEntryPath);\n    return Buffer.concat(entries.map(entry => {\n      const mode = Buffer.from(entry.mode.replace(/^0/, ''));\n      const space = Buffer.from(' ');\n      const path = Buffer.from(entry.path, 'utf8');\n      const nullchar = Buffer.from([0]);\n      const oid = Buffer.from(entry.oid, 'hex');\n      return Buffer.concat([mode, space, path, nullchar, oid]);\n    }));\n  }\n\n  /**\n   * @returns {TreeEntry[]}\n   */\n  entries() {\n    return this._entries;\n  }\n  *[Symbol.iterator]() {\n    for (const entry of this._entries) {\n      yield entry;\n    }\n  }\n}\nclass GitObject {\n  static wrap({\n    type,\n    object\n  }) {\n    return Buffer.concat([Buffer.from(`${type} ${object.byteLength.toString()}\\x00`), Buffer.from(object)]);\n  }\n  static unwrap(buffer) {\n    const s = buffer.indexOf(32); // first space\n    const i = buffer.indexOf(0); // first null value\n    const type = buffer.slice(0, s).toString('utf8'); // get type of object\n    const length = buffer.slice(s + 1, i).toString('utf8'); // get type of object\n    const actualLength = buffer.length - (i + 1);\n    // verify length\n    if (parseInt(length) !== actualLength) {\n      throw new InternalError(`Length mismatch: expected ${length} bytes but got ${actualLength} instead.`);\n    }\n    return {\n      type,\n      object: Buffer.from(buffer.slice(i + 1))\n    };\n  }\n}\nfunction readObjectLoose(_x10) {\n  return _readObjectLoose.apply(this, arguments);\n}\n/**\n * @param {Buffer} delta\n * @param {Buffer} source\n * @returns {Buffer}\n */\nfunction _readObjectLoose() {\n  _readObjectLoose = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    oid\n  }) {\n    const source = `objects/${oid.slice(0, 2)}/${oid.slice(2)}`;\n    const file = yield fs.read(`${gitdir}/${source}`);\n    if (!file) {\n      return null;\n    }\n    return {\n      object: file,\n      format: 'deflated',\n      source\n    };\n  });\n  return _readObjectLoose.apply(this, arguments);\n}\nfunction applyDelta(delta, source) {\n  const reader = new BufferCursor(delta);\n  const sourceSize = readVarIntLE(reader);\n  if (sourceSize !== source.byteLength) {\n    throw new InternalError(`applyDelta expected source buffer to be ${sourceSize} bytes but the provided buffer was ${source.length} bytes`);\n  }\n  const targetSize = readVarIntLE(reader);\n  let target;\n  const firstOp = readOp(reader, source);\n  // Speed optimization - return raw buffer if it's just single simple copy\n  if (firstOp.byteLength === targetSize) {\n    target = firstOp;\n  } else {\n    // Otherwise, allocate a fresh buffer and slices\n    target = Buffer.alloc(targetSize);\n    const writer = new BufferCursor(target);\n    writer.copy(firstOp);\n    while (!reader.eof()) {\n      writer.copy(readOp(reader, source));\n    }\n    const tell = writer.tell();\n    if (targetSize !== tell) {\n      throw new InternalError(`applyDelta expected target buffer to be ${targetSize} bytes but the resulting buffer was ${tell} bytes`);\n    }\n  }\n  return target;\n}\nfunction readVarIntLE(reader) {\n  let result = 0;\n  let shift = 0;\n  let byte = null;\n  do {\n    byte = reader.readUInt8();\n    result |= (byte & 0b01111111) << shift;\n    shift += 7;\n  } while (byte & 0b10000000);\n  return result;\n}\nfunction readCompactLE(reader, flags, size) {\n  let result = 0;\n  let shift = 0;\n  while (size--) {\n    if (flags & 0b00000001) {\n      result |= reader.readUInt8() << shift;\n    }\n    flags >>= 1;\n    shift += 8;\n  }\n  return result;\n}\nfunction readOp(reader, source) {\n  /** @type {number} */\n  const byte = reader.readUInt8();\n  const COPY = 0b10000000;\n  const OFFS = 0b00001111;\n  const SIZE = 0b01110000;\n  if (byte & COPY) {\n    // copy consists of 4 byte offset, 3 byte size (in LE order)\n    const offset = readCompactLE(reader, byte & OFFS, 4);\n    let size = readCompactLE(reader, (byte & SIZE) >> 4, 3);\n    // Yup. They really did this optimization.\n    if (size === 0) size = 0x10000;\n    return source.slice(offset, offset + size);\n  } else {\n    // insert\n    return reader.slice(byte);\n  }\n}\n\n// Convert a value to an Async Iterator\n// This will be easier with async generator functions.\nfunction fromValue(value) {\n  let queue = [value];\n  return {\n    next() {\n      return Promise.resolve({\n        done: queue.length === 0,\n        value: queue.pop()\n      });\n    },\n    return() {\n      queue = [];\n      return {};\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n  };\n}\nfunction getIterator(iterable) {\n  if (iterable[Symbol.asyncIterator]) {\n    return iterable[Symbol.asyncIterator]();\n  }\n  if (iterable[Symbol.iterator]) {\n    return iterable[Symbol.iterator]();\n  }\n  if (iterable.next) {\n    return iterable;\n  }\n  return fromValue(iterable);\n}\n\n// inspired by 'gartal' but lighter-weight and more battle-tested.\nclass StreamReader {\n  constructor(stream) {\n    this.stream = getIterator(stream);\n    this.buffer = null;\n    this.cursor = 0;\n    this.undoCursor = 0;\n    this.started = false;\n    this._ended = false;\n    this._discardedBytes = 0;\n  }\n  eof() {\n    return this._ended && this.cursor === this.buffer.length;\n  }\n  tell() {\n    return this._discardedBytes + this.cursor;\n  }\n  byte() {\n    var _this18 = this;\n    return _asyncToGenerator(function* () {\n      if (_this18.eof()) return;\n      if (!_this18.started) yield _this18._init();\n      if (_this18.cursor === _this18.buffer.length) {\n        yield _this18._loadnext();\n        if (_this18._ended) return;\n      }\n      _this18._moveCursor(1);\n      return _this18.buffer[_this18.undoCursor];\n    })();\n  }\n  chunk() {\n    var _this19 = this;\n    return _asyncToGenerator(function* () {\n      if (_this19.eof()) return;\n      if (!_this19.started) yield _this19._init();\n      if (_this19.cursor === _this19.buffer.length) {\n        yield _this19._loadnext();\n        if (_this19._ended) return;\n      }\n      _this19._moveCursor(_this19.buffer.length);\n      return _this19.buffer.slice(_this19.undoCursor, _this19.cursor);\n    })();\n  }\n  read(n) {\n    var _this20 = this;\n    return _asyncToGenerator(function* () {\n      if (_this20.eof()) return;\n      if (!_this20.started) yield _this20._init();\n      if (_this20.cursor + n > _this20.buffer.length) {\n        _this20._trim();\n        yield _this20._accumulate(n);\n      }\n      _this20._moveCursor(n);\n      return _this20.buffer.slice(_this20.undoCursor, _this20.cursor);\n    })();\n  }\n  skip(n) {\n    var _this21 = this;\n    return _asyncToGenerator(function* () {\n      if (_this21.eof()) return;\n      if (!_this21.started) yield _this21._init();\n      if (_this21.cursor + n > _this21.buffer.length) {\n        _this21._trim();\n        yield _this21._accumulate(n);\n      }\n      _this21._moveCursor(n);\n    })();\n  }\n  undo() {\n    var _this22 = this;\n    return _asyncToGenerator(function* () {\n      _this22.cursor = _this22.undoCursor;\n    })();\n  }\n  _next() {\n    var _this23 = this;\n    return _asyncToGenerator(function* () {\n      _this23.started = true;\n      let {\n        done,\n        value\n      } = yield _this23.stream.next();\n      if (done) {\n        _this23._ended = true;\n      }\n      if (value) {\n        value = Buffer.from(value);\n      }\n      return value;\n    })();\n  }\n  _trim() {\n    // Throw away parts of the buffer we don't need anymore\n    // assert(this.cursor <= this.buffer.length)\n    this.buffer = this.buffer.slice(this.undoCursor);\n    this.cursor -= this.undoCursor;\n    this._discardedBytes += this.undoCursor;\n    this.undoCursor = 0;\n  }\n  _moveCursor(n) {\n    this.undoCursor = this.cursor;\n    this.cursor += n;\n    if (this.cursor > this.buffer.length) {\n      this.cursor = this.buffer.length;\n    }\n  }\n  _accumulate(n) {\n    var _this24 = this;\n    return _asyncToGenerator(function* () {\n      if (_this24._ended) return;\n      // Expand the buffer until we have N bytes of data\n      // or we've reached the end of the stream\n      const buffers = [_this24.buffer];\n      while (_this24.cursor + n > lengthBuffers(buffers)) {\n        const nextbuffer = yield _this24._next();\n        if (_this24._ended) break;\n        buffers.push(nextbuffer);\n      }\n      _this24.buffer = Buffer.concat(buffers);\n    })();\n  }\n  _loadnext() {\n    var _this25 = this;\n    return _asyncToGenerator(function* () {\n      _this25._discardedBytes += _this25.buffer.length;\n      _this25.undoCursor = 0;\n      _this25.cursor = 0;\n      _this25.buffer = yield _this25._next();\n    })();\n  }\n  _init() {\n    var _this26 = this;\n    return _asyncToGenerator(function* () {\n      _this26.buffer = yield _this26._next();\n    })();\n  }\n}\n\n// This helper function helps us postpone concatenating buffers, which\n// would create intermediate buffer objects,\nfunction lengthBuffers(buffers) {\n  return buffers.reduce((acc, buffer) => acc + buffer.length, 0);\n}\n\n// My version of git-list-pack - roughly 15x faster than the original\nfunction listpack(_x11, _x12) {\n  return _listpack.apply(this, arguments);\n}\nfunction _listpack() {\n  _listpack = _asyncToGenerator(function* (stream, onData) {\n    const reader = new StreamReader(stream);\n    let PACK = yield reader.read(4);\n    PACK = PACK.toString('utf8');\n    if (PACK !== 'PACK') {\n      throw new InternalError(`Invalid PACK header '${PACK}'`);\n    }\n    let version = yield reader.read(4);\n    version = version.readUInt32BE(0);\n    if (version !== 2) {\n      throw new InternalError(`Invalid packfile version: ${version}`);\n    }\n    let numObjects = yield reader.read(4);\n    numObjects = numObjects.readUInt32BE(0);\n    // If (for some godforsaken reason) this is an empty packfile, abort now.\n    if (numObjects < 1) return;\n    while (!reader.eof() && numObjects--) {\n      const offset = reader.tell();\n      const {\n        type,\n        length,\n        ofs,\n        reference\n      } = yield parseHeader(reader);\n      const inflator = new pako.Inflate();\n      while (!inflator.result) {\n        const chunk = yield reader.chunk();\n        if (reader.ended) break;\n        inflator.push(chunk, false);\n        if (inflator.err) {\n          throw new InternalError(`Pako error: ${inflator.msg}`);\n        }\n        if (inflator.result) {\n          if (inflator.result.length !== length) {\n            throw new InternalError(`Inflated object size is different from that stated in packfile.`);\n          }\n\n          // Backtrack parser to where deflated data ends\n          yield reader.undo();\n          yield reader.read(chunk.length - inflator.strm.avail_in);\n          const end = reader.tell();\n          yield onData({\n            data: inflator.result,\n            type,\n            num: numObjects,\n            offset,\n            end,\n            reference,\n            ofs\n          });\n        }\n      }\n    }\n  });\n  return _listpack.apply(this, arguments);\n}\nfunction parseHeader(_x13) {\n  return _parseHeader.apply(this, arguments);\n}\n/* eslint-env node, browser */\nfunction _parseHeader() {\n  _parseHeader = _asyncToGenerator(function* (reader) {\n    // Object type is encoded in bits 654\n    let byte = yield reader.byte();\n    const type = byte >> 4 & 0b111;\n    // The length encoding get complicated.\n    // Last four bits of length is encoded in bits 3210\n    let length = byte & 0b1111;\n    // Whether the next byte is part of the variable-length encoded number\n    // is encoded in bit 7\n    if (byte & 0b10000000) {\n      let shift = 4;\n      do {\n        byte = yield reader.byte();\n        length |= (byte & 0b01111111) << shift;\n        shift += 7;\n      } while (byte & 0b10000000);\n    }\n    // Handle deltified objects\n    let ofs;\n    let reference;\n    if (type === 6) {\n      let shift = 0;\n      ofs = 0;\n      const bytes = [];\n      do {\n        byte = yield reader.byte();\n        ofs |= (byte & 0b01111111) << shift;\n        shift += 7;\n        bytes.push(byte);\n      } while (byte & 0b10000000);\n      reference = Buffer.from(bytes);\n    }\n    if (type === 7) {\n      const buf = yield reader.read(20);\n      reference = buf;\n    }\n    return {\n      type,\n      length,\n      ofs,\n      reference\n    };\n  });\n  return _parseHeader.apply(this, arguments);\n}\nlet supportsDecompressionStream = false;\nfunction inflate(_x14) {\n  return _inflate.apply(this, arguments);\n}\nfunction _inflate() {\n  _inflate = _asyncToGenerator(function* (buffer) {\n    if (supportsDecompressionStream === null) {\n      supportsDecompressionStream = testDecompressionStream();\n    }\n    return supportsDecompressionStream ? browserInflate(buffer) : pako.inflate(buffer);\n  });\n  return _inflate.apply(this, arguments);\n}\nfunction browserInflate(_x15) {\n  return _browserInflate.apply(this, arguments);\n}\nfunction _browserInflate() {\n  _browserInflate = _asyncToGenerator(function* (buffer) {\n    const ds = new DecompressionStream('deflate');\n    const d = new Blob([buffer]).stream().pipeThrough(ds);\n    return new Uint8Array(yield new Response(d).arrayBuffer());\n  });\n  return _browserInflate.apply(this, arguments);\n}\nfunction testDecompressionStream() {\n  try {\n    const ds = new DecompressionStream('deflate');\n    if (ds) return true;\n  } catch (_) {\n    // no bother\n  }\n  return false;\n}\nfunction decodeVarInt(reader) {\n  const bytes = [];\n  let byte = 0;\n  let multibyte = 0;\n  do {\n    byte = reader.readUInt8();\n    // We keep bits 6543210\n    const lastSeven = byte & 0b01111111;\n    bytes.push(lastSeven);\n    // Whether the next byte is part of the variable-length encoded number\n    // is encoded in bit 7\n    multibyte = byte & 0b10000000;\n  } while (multibyte);\n  // Now that all the bytes are in big-endian order,\n  // alternate shifting the bits left by 7 and OR-ing the next byte.\n  // And... do a weird increment-by-one thing that I don't quite understand.\n  return bytes.reduce((a, b) => a + 1 << 7 | b, -1);\n}\n\n// I'm pretty much copying this one from the git C source code,\n// because it makes no sense.\nfunction otherVarIntDecode(reader, startWith) {\n  let result = startWith;\n  let shift = 4;\n  let byte = null;\n  do {\n    byte = reader.readUInt8();\n    result |= (byte & 0b01111111) << shift;\n    shift += 7;\n  } while (byte & 0b10000000);\n  return result;\n}\nclass GitPackIndex {\n  constructor(stuff) {\n    Object.assign(this, stuff);\n    this.offsetCache = {};\n  }\n  static fromIdx({\n    idx,\n    getExternalRefDelta\n  }) {\n    return _asyncToGenerator(function* () {\n      const reader = new BufferCursor(idx);\n      const magic = reader.slice(4).toString('hex');\n      // Check for IDX v2 magic number\n      if (magic !== 'ff744f63') {\n        return; // undefined\n      }\n      const version = reader.readUInt32BE();\n      if (version !== 2) {\n        throw new InternalError(`Unable to read version ${version} packfile IDX. (Only version 2 supported)`);\n      }\n      if (idx.byteLength > 2048 * 1024 * 1024) {\n        throw new InternalError(`To keep implementation simple, I haven't implemented the layer 5 feature needed to support packfiles > 2GB in size.`);\n      }\n      // Skip over fanout table\n      reader.seek(reader.tell() + 4 * 255);\n      // Get hashes\n      const size = reader.readUInt32BE();\n      const hashes = [];\n      for (let i = 0; i < size; i++) {\n        const hash = reader.slice(20).toString('hex');\n        hashes[i] = hash;\n      }\n      reader.seek(reader.tell() + 4 * size);\n      // Skip over CRCs\n      // Get offsets\n      const offsets = new Map();\n      for (let i = 0; i < size; i++) {\n        offsets.set(hashes[i], reader.readUInt32BE());\n      }\n      const packfileSha = reader.slice(20).toString('hex');\n      return new GitPackIndex({\n        hashes,\n        crcs: {},\n        offsets,\n        packfileSha,\n        getExternalRefDelta\n      });\n    })();\n  }\n  static fromPack({\n    pack,\n    getExternalRefDelta,\n    onProgress\n  }) {\n    return _asyncToGenerator(function* () {\n      const listpackTypes = {\n        1: 'commit',\n        2: 'tree',\n        3: 'blob',\n        4: 'tag',\n        6: 'ofs-delta',\n        7: 'ref-delta'\n      };\n      const offsetToObject = {};\n\n      // Older packfiles do NOT use the shasum of the pack itself,\n      // so it is recommended to just use whatever bytes are in the trailer.\n      // Source: https://github.com/git/git/commit/1190a1acf800acdcfd7569f87ac1560e2d077414\n      const packfileSha = pack.slice(-20).toString('hex');\n      const hashes = [];\n      const crcs = {};\n      const offsets = new Map();\n      let totalObjectCount = null;\n      let lastPercent = null;\n      yield listpack([pack], /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* ({\n          data,\n          type,\n          reference,\n          offset,\n          num\n        }) {\n          if (totalObjectCount === null) totalObjectCount = num;\n          const percent = Math.floor((totalObjectCount - num) * 100 / totalObjectCount);\n          if (percent !== lastPercent) {\n            if (onProgress) {\n              yield onProgress({\n                phase: 'Receiving objects',\n                loaded: totalObjectCount - num,\n                total: totalObjectCount\n              });\n            }\n          }\n          lastPercent = percent;\n          // Change type from a number to a meaningful string\n          type = listpackTypes[type];\n          if (['commit', 'tree', 'blob', 'tag'].includes(type)) {\n            offsetToObject[offset] = {\n              type,\n              offset\n            };\n          } else if (type === 'ofs-delta') {\n            offsetToObject[offset] = {\n              type,\n              offset\n            };\n          } else if (type === 'ref-delta') {\n            offsetToObject[offset] = {\n              type,\n              offset\n            };\n          }\n        });\n        return function (_x16) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n\n      // We need to know the lengths of the slices to compute the CRCs.\n      const offsetArray = Object.keys(offsetToObject).map(Number);\n      for (const [i, start] of offsetArray.entries()) {\n        const end = i + 1 === offsetArray.length ? pack.byteLength - 20 : offsetArray[i + 1];\n        const o = offsetToObject[start];\n        const crc = crc32.buf(pack.slice(start, end)) >>> 0;\n        o.end = end;\n        o.crc = crc;\n      }\n\n      // We don't have the hashes yet. But we can generate them using the .readSlice function!\n      const p = new GitPackIndex({\n        pack: Promise.resolve(pack),\n        packfileSha,\n        crcs,\n        hashes,\n        offsets,\n        getExternalRefDelta\n      });\n\n      // Resolve deltas and compute the oids\n      lastPercent = null;\n      let count = 0;\n      const objectsByDepth = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      for (let offset in offsetToObject) {\n        offset = Number(offset);\n        const percent = Math.floor(count++ * 100 / totalObjectCount);\n        if (percent !== lastPercent) {\n          if (onProgress) {\n            yield onProgress({\n              phase: 'Resolving deltas',\n              loaded: count,\n              total: totalObjectCount\n            });\n          }\n        }\n        lastPercent = percent;\n        const o = offsetToObject[offset];\n        if (o.oid) continue;\n        try {\n          p.readDepth = 0;\n          p.externalReadDepth = 0;\n          const {\n            type,\n            object\n          } = yield p.readSlice({\n            start: offset\n          });\n          objectsByDepth[p.readDepth] += 1;\n          const oid = yield shasum(GitObject.wrap({\n            type,\n            object\n          }));\n          o.oid = oid;\n          hashes.push(oid);\n          offsets.set(oid, offset);\n          crcs[oid] = o.crc;\n        } catch (err) {\n          continue;\n        }\n      }\n      hashes.sort();\n      return p;\n    })();\n  }\n  toBuffer() {\n    var _this27 = this;\n    return _asyncToGenerator(function* () {\n      const buffers = [];\n      const write = (str, encoding) => {\n        buffers.push(Buffer.from(str, encoding));\n      };\n      // Write out IDX v2 magic number\n      write('ff744f63', 'hex');\n      // Write out version number 2\n      write('00000002', 'hex');\n      // Write fanout table\n      const fanoutBuffer = new BufferCursor(Buffer.alloc(256 * 4));\n      for (let i = 0; i < 256; i++) {\n        let count = 0;\n        for (const hash of _this27.hashes) {\n          if (parseInt(hash.slice(0, 2), 16) <= i) count++;\n        }\n        fanoutBuffer.writeUInt32BE(count);\n      }\n      buffers.push(fanoutBuffer.buffer);\n      // Write out hashes\n      for (const hash of _this27.hashes) {\n        write(hash, 'hex');\n      }\n      // Write out crcs\n      const crcsBuffer = new BufferCursor(Buffer.alloc(_this27.hashes.length * 4));\n      for (const hash of _this27.hashes) {\n        crcsBuffer.writeUInt32BE(_this27.crcs[hash]);\n      }\n      buffers.push(crcsBuffer.buffer);\n      // Write out offsets\n      const offsetsBuffer = new BufferCursor(Buffer.alloc(_this27.hashes.length * 4));\n      for (const hash of _this27.hashes) {\n        offsetsBuffer.writeUInt32BE(_this27.offsets.get(hash));\n      }\n      buffers.push(offsetsBuffer.buffer);\n      // Write out packfile checksum\n      write(_this27.packfileSha, 'hex');\n      // Write out shasum\n      const totalBuffer = Buffer.concat(buffers);\n      const sha = yield shasum(totalBuffer);\n      const shaBuffer = Buffer.alloc(20);\n      shaBuffer.write(sha, 'hex');\n      return Buffer.concat([totalBuffer, shaBuffer]);\n    })();\n  }\n  load({\n    pack\n  }) {\n    var _this28 = this;\n    return _asyncToGenerator(function* () {\n      _this28.pack = pack;\n    })();\n  }\n  unload() {\n    var _this29 = this;\n    return _asyncToGenerator(function* () {\n      _this29.pack = null;\n    })();\n  }\n  read({\n    oid\n  }) {\n    var _this30 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this30.offsets.get(oid)) {\n        if (_this30.getExternalRefDelta) {\n          _this30.externalReadDepth++;\n          return _this30.getExternalRefDelta(oid);\n        } else {\n          throw new InternalError(`Could not read object ${oid} from packfile`);\n        }\n      }\n      const start = _this30.offsets.get(oid);\n      return _this30.readSlice({\n        start\n      });\n    })();\n  }\n  readSlice({\n    start\n  }) {\n    var _this31 = this;\n    return _asyncToGenerator(function* () {\n      if (_this31.offsetCache[start]) {\n        return Object.assign({}, _this31.offsetCache[start]);\n      }\n      _this31.readDepth++;\n      const types = {\n        0b0010000: 'commit',\n        0b0100000: 'tree',\n        0b0110000: 'blob',\n        0b1000000: 'tag',\n        0b1100000: 'ofs_delta',\n        0b1110000: 'ref_delta'\n      };\n      if (!_this31.pack) {\n        throw new InternalError('Tried to read from a GitPackIndex with no packfile loaded into memory');\n      }\n      const raw = (yield _this31.pack).slice(start);\n      const reader = new BufferCursor(raw);\n      const byte = reader.readUInt8();\n      // Object type is encoded in bits 654\n      const btype = byte & 0b1110000;\n      let type = types[btype];\n      if (type === undefined) {\n        throw new InternalError('Unrecognized type: 0b' + btype.toString(2));\n      }\n      // The length encoding get complicated.\n      // Last four bits of length is encoded in bits 3210\n      const lastFour = byte & 0b1111;\n      let length = lastFour;\n      // Whether the next byte is part of the variable-length encoded number\n      // is encoded in bit 7\n      const multibyte = byte & 0b10000000;\n      if (multibyte) {\n        length = otherVarIntDecode(reader, lastFour);\n      }\n      let base = null;\n      let object = null;\n      // Handle deltified objects\n      if (type === 'ofs_delta') {\n        const offset = decodeVarInt(reader);\n        const baseOffset = start - offset;\n        ({\n          object: base,\n          type\n        } = yield _this31.readSlice({\n          start: baseOffset\n        }));\n      }\n      if (type === 'ref_delta') {\n        const oid = reader.slice(20).toString('hex');\n        ({\n          object: base,\n          type\n        } = yield _this31.read({\n          oid\n        }));\n      }\n      // Handle undeltified objects\n      const buffer = raw.slice(reader.tell());\n      object = Buffer.from(yield inflate(buffer));\n      // Assert that the object length is as expected.\n      if (object.byteLength !== length) {\n        throw new InternalError(`Packfile told us object would have length ${length} but it had length ${object.byteLength}`);\n      }\n      if (base) {\n        object = Buffer.from(applyDelta(object, base));\n      }\n      // Cache the result based on depth.\n      if (_this31.readDepth > 3) {\n        // hand tuned for speed / memory usage tradeoff\n        _this31.offsetCache[start] = {\n          type,\n          object\n        };\n      }\n      return {\n        type,\n        format: 'content',\n        object\n      };\n    })();\n  }\n}\nfunction loadPackIndex(_x17) {\n  return _loadPackIndex.apply(this, arguments);\n}\nfunction _loadPackIndex() {\n  _loadPackIndex = _asyncToGenerator(function* ({\n    fs,\n    filename,\n    getExternalRefDelta,\n    emitter,\n    emitterPrefix\n  }) {\n    const idx = yield fs.read(filename);\n    return GitPackIndex.fromIdx({\n      idx,\n      getExternalRefDelta\n    });\n  });\n  return _loadPackIndex.apply(this, arguments);\n}\nfunction readPackIndex({\n  fs,\n  cache,\n  filename,\n  getExternalRefDelta,\n  emitter,\n  emitterPrefix\n}) {\n  // Try to get the packfile index from the in-memory cache\n  if (!cache.packfiles) cache.packfiles = new Map();\n  let p = cache.packfiles.get(filename);\n  if (!p) {\n    p = loadPackIndex({\n      fs,\n      filename,\n      getExternalRefDelta,\n      emitter,\n      emitterPrefix\n    });\n    cache.packfiles.set(filename, p);\n  }\n  return p;\n}\nfunction readObjectPacked(_x18) {\n  return _readObjectPacked.apply(this, arguments);\n}\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} args.gitdir\n * @param {string} args.oid\n * @param {string} [args.format]\n */\nfunction _readObjectPacked() {\n  _readObjectPacked = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid,\n    format = 'content',\n    getExternalRefDelta\n  }) {\n    // Check to see if it's in a packfile.\n    // Iterate through all the .idx files\n    let list = yield fs.readdir(join(gitdir, 'objects/pack'));\n    list = list.filter(x => x.endsWith('.idx'));\n    for (const filename of list) {\n      const indexFile = `${gitdir}/objects/pack/${filename}`;\n      const p = yield readPackIndex({\n        fs,\n        cache,\n        filename: indexFile,\n        getExternalRefDelta\n      });\n      if (p.error) throw new InternalError(p.error);\n      // If the packfile DOES have the oid we're looking for...\n      if (p.offsets.has(oid)) {\n        // Get the resolved git object from the packfile\n        if (!p.pack) {\n          const packFile = indexFile.replace(/idx$/, 'pack');\n          p.pack = fs.read(packFile);\n        }\n        const result = yield p.read({\n          oid,\n          getExternalRefDelta\n        });\n        result.format = 'content';\n        result.source = `objects/pack/${filename.replace(/idx$/, 'pack')}`;\n        return result;\n      }\n    }\n    // Failed to find it\n    return null;\n  });\n  return _readObjectPacked.apply(this, arguments);\n}\nfunction _readObject(_x19) {\n  return _readObject2.apply(this, arguments);\n}\nfunction _readObject2() {\n  _readObject2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid,\n    format = 'content'\n  }) {\n    // Curry the current read method so that the packfile un-deltification\n    // process can acquire external ref-deltas.\n    const getExternalRefDelta = oid => _readObject({\n      fs,\n      cache,\n      gitdir,\n      oid\n    });\n    let result;\n    // Empty tree - hard-coded so we can use it as a shorthand.\n    // Note: I think the canonical git implementation must do this too because\n    // `git cat-file -t 4b825dc642cb6eb9a060e54bf8d69288fbee4904` prints \"tree\" even in empty repos.\n    if (oid === '4b825dc642cb6eb9a060e54bf8d69288fbee4904') {\n      result = {\n        format: 'wrapped',\n        object: Buffer.from(`tree 0\\x00`)\n      };\n    }\n    // Look for it in the loose object directory.\n    if (!result) {\n      result = yield readObjectLoose({\n        fs,\n        gitdir,\n        oid\n      });\n    }\n    // Check to see if it's in a packfile.\n    if (!result) {\n      result = yield readObjectPacked({\n        fs,\n        cache,\n        gitdir,\n        oid,\n        getExternalRefDelta\n      });\n    }\n    // Finally\n    if (!result) {\n      throw new NotFoundError(oid);\n    }\n    if (format === 'deflated') {\n      return result;\n    }\n\n    // BEHOLD! THE ONLY TIME I'VE EVER WANTED TO USE A CASE STATEMENT WITH FOLLOWTHROUGH!\n    // eslint-ignore\n    /* eslint-disable no-fallthrough */\n    switch (result.format) {\n      case 'deflated':\n        {\n          result.object = Buffer.from(yield inflate(result.object));\n          result.format = 'wrapped';\n        }\n      case 'wrapped':\n        {\n          if (format === 'wrapped' && result.format === 'wrapped') {\n            return result;\n          }\n          const sha = yield shasum(result.object);\n          if (sha !== oid) {\n            throw new InternalError(`SHA check failed! Expected ${oid}, computed ${sha}`);\n          }\n          const {\n            object,\n            type\n          } = GitObject.unwrap(result.object);\n          result.type = type;\n          result.object = object;\n          result.format = 'content';\n        }\n      case 'content':\n        {\n          if (format === 'content') return result;\n          break;\n        }\n      default:\n        {\n          throw new InternalError(`invalid format \"${result.format}\"`);\n        }\n    }\n    /* eslint-enable no-fallthrough */\n  });\n  return _readObject2.apply(this, arguments);\n}\nclass AlreadyExistsError extends BaseError {\n  /**\n   * @param {'note'|'remote'|'tag'|'branch'} noun\n   * @param {string} where\n   * @param {boolean} canForce\n   */\n  constructor(noun, where, canForce = true) {\n    super(`Failed to create ${noun} at ${where} because it already exists.${canForce ? ` (Hint: use 'force: true' parameter to overwrite existing ${noun}.)` : ''}`);\n    this.code = this.name = AlreadyExistsError.code;\n    this.data = {\n      noun,\n      where,\n      canForce\n    };\n  }\n}\n/** @type {'AlreadyExistsError'} */\nAlreadyExistsError.code = 'AlreadyExistsError';\nclass AmbiguousError extends BaseError {\n  /**\n   * @param {'oids'|'refs'} nouns\n   * @param {string} short\n   * @param {string[]} matches\n   */\n  constructor(nouns, short, matches) {\n    super(`Found multiple ${nouns} matching \"${short}\" (${matches.join(', ')}). Use a longer abbreviation length to disambiguate them.`);\n    this.code = this.name = AmbiguousError.code;\n    this.data = {\n      nouns,\n      short,\n      matches\n    };\n  }\n}\n/** @type {'AmbiguousError'} */\nAmbiguousError.code = 'AmbiguousError';\nclass CheckoutConflictError extends BaseError {\n  /**\n   * @param {string[]} filepaths\n   */\n  constructor(filepaths) {\n    super(`Your local changes to the following files would be overwritten by checkout: ${filepaths.join(', ')}`);\n    this.code = this.name = CheckoutConflictError.code;\n    this.data = {\n      filepaths\n    };\n  }\n}\n/** @type {'CheckoutConflictError'} */\nCheckoutConflictError.code = 'CheckoutConflictError';\nclass CommitNotFetchedError extends BaseError {\n  /**\n   * @param {string} ref\n   * @param {string} oid\n   */\n  constructor(ref, oid) {\n    super(`Failed to checkout \"${ref}\" because commit ${oid} is not available locally. Do a git fetch to make the branch available locally.`);\n    this.code = this.name = CommitNotFetchedError.code;\n    this.data = {\n      ref,\n      oid\n    };\n  }\n}\n/** @type {'CommitNotFetchedError'} */\nCommitNotFetchedError.code = 'CommitNotFetchedError';\nclass EmptyServerResponseError extends BaseError {\n  constructor() {\n    super(`Empty response from git server.`);\n    this.code = this.name = EmptyServerResponseError.code;\n    this.data = {};\n  }\n}\n/** @type {'EmptyServerResponseError'} */\nEmptyServerResponseError.code = 'EmptyServerResponseError';\nclass FastForwardError extends BaseError {\n  constructor() {\n    super(`A simple fast-forward merge was not possible.`);\n    this.code = this.name = FastForwardError.code;\n    this.data = {};\n  }\n}\n/** @type {'FastForwardError'} */\nFastForwardError.code = 'FastForwardError';\nclass GitPushError extends BaseError {\n  /**\n   * @param {string} prettyDetails\n   * @param {PushResult} result\n   */\n  constructor(prettyDetails, result) {\n    super(`One or more branches were not updated: ${prettyDetails}`);\n    this.code = this.name = GitPushError.code;\n    this.data = {\n      prettyDetails,\n      result\n    };\n  }\n}\n/** @type {'GitPushError'} */\nGitPushError.code = 'GitPushError';\nclass HttpError extends BaseError {\n  /**\n   * @param {number} statusCode\n   * @param {string} statusMessage\n   * @param {string} response\n   */\n  constructor(statusCode, statusMessage, response) {\n    super(`HTTP Error: ${statusCode} ${statusMessage}`);\n    this.code = this.name = HttpError.code;\n    this.data = {\n      statusCode,\n      statusMessage,\n      response\n    };\n  }\n}\n/** @type {'HttpError'} */\nHttpError.code = 'HttpError';\nclass InvalidFilepathError extends BaseError {\n  /**\n   * @param {'leading-slash'|'trailing-slash'} [reason]\n   */\n  constructor(reason) {\n    let message = 'invalid filepath';\n    if (reason === 'leading-slash' || reason === 'trailing-slash') {\n      message = `\"filepath\" parameter should not include leading or trailing directory separators because these can cause problems on some platforms.`;\n    }\n    super(message);\n    this.code = this.name = InvalidFilepathError.code;\n    this.data = {\n      reason\n    };\n  }\n}\n/** @type {'InvalidFilepathError'} */\nInvalidFilepathError.code = 'InvalidFilepathError';\nclass InvalidRefNameError extends BaseError {\n  /**\n   * @param {string} ref\n   * @param {string} suggestion\n   * @param {boolean} canForce\n   */\n  constructor(ref, suggestion) {\n    super(`\"${ref}\" would be an invalid git reference. (Hint: a valid alternative would be \"${suggestion}\".)`);\n    this.code = this.name = InvalidRefNameError.code;\n    this.data = {\n      ref,\n      suggestion\n    };\n  }\n}\n/** @type {'InvalidRefNameError'} */\nInvalidRefNameError.code = 'InvalidRefNameError';\nclass MaxDepthError extends BaseError {\n  /**\n   * @param {number} depth\n   */\n  constructor(depth) {\n    super(`Maximum search depth of ${depth} exceeded.`);\n    this.code = this.name = MaxDepthError.code;\n    this.data = {\n      depth\n    };\n  }\n}\n/** @type {'MaxDepthError'} */\nMaxDepthError.code = 'MaxDepthError';\nclass MergeNotSupportedError extends BaseError {\n  constructor() {\n    super(`Merges with conflicts are not supported yet.`);\n    this.code = this.name = MergeNotSupportedError.code;\n    this.data = {};\n  }\n}\n/** @type {'MergeNotSupportedError'} */\nMergeNotSupportedError.code = 'MergeNotSupportedError';\nclass MissingNameError extends BaseError {\n  /**\n   * @param {'author'|'committer'|'tagger'} role\n   */\n  constructor(role) {\n    super(`No name was provided for ${role} in the argument or in the .git/config file.`);\n    this.code = this.name = MissingNameError.code;\n    this.data = {\n      role\n    };\n  }\n}\n/** @type {'MissingNameError'} */\nMissingNameError.code = 'MissingNameError';\nclass MissingParameterError extends BaseError {\n  /**\n   * @param {string} parameter\n   */\n  constructor(parameter) {\n    super(`The function requires a \"${parameter}\" parameter but none was provided.`);\n    this.code = this.name = MissingParameterError.code;\n    this.data = {\n      parameter\n    };\n  }\n}\n/** @type {'MissingParameterError'} */\nMissingParameterError.code = 'MissingParameterError';\nclass ParseError extends BaseError {\n  /**\n   * @param {string} expected\n   * @param {string} actual\n   */\n  constructor(expected, actual) {\n    super(`Expected \"${expected}\" but received \"${actual}\".`);\n    this.code = this.name = ParseError.code;\n    this.data = {\n      expected,\n      actual\n    };\n  }\n}\n/** @type {'ParseError'} */\nParseError.code = 'ParseError';\nclass PushRejectedError extends BaseError {\n  /**\n   * @param {'not-fast-forward'|'tag-exists'} reason\n   */\n  constructor(reason) {\n    let message = '';\n    if (reason === 'not-fast-forward') {\n      message = ' because it was not a simple fast-forward';\n    } else if (reason === 'tag-exists') {\n      message = ' because tag already exists';\n    }\n    super(`Push rejected${message}. Use \"force: true\" to override.`);\n    this.code = this.name = PushRejectedError.code;\n    this.data = {\n      reason\n    };\n  }\n}\n/** @type {'PushRejectedError'} */\nPushRejectedError.code = 'PushRejectedError';\nclass RemoteCapabilityError extends BaseError {\n  /**\n   * @param {'shallow'|'deepen-since'|'deepen-not'|'deepen-relative'} capability\n   * @param {'depth'|'since'|'exclude'|'relative'} parameter\n   */\n  constructor(capability, parameter) {\n    super(`Remote does not support the \"${capability}\" so the \"${parameter}\" parameter cannot be used.`);\n    this.code = this.name = RemoteCapabilityError.code;\n    this.data = {\n      capability,\n      parameter\n    };\n  }\n}\n/** @type {'RemoteCapabilityError'} */\nRemoteCapabilityError.code = 'RemoteCapabilityError';\nclass SmartHttpError extends BaseError {\n  /**\n   * @param {string} preview\n   * @param {string} response\n   */\n  constructor(preview, response) {\n    super(`Remote did not reply using the \"smart\" HTTP protocol. Expected \"001e# service=git-upload-pack\" but received: ${preview}`);\n    this.code = this.name = SmartHttpError.code;\n    this.data = {\n      preview,\n      response\n    };\n  }\n}\n/** @type {'SmartHttpError'} */\nSmartHttpError.code = 'SmartHttpError';\nclass UnknownTransportError extends BaseError {\n  /**\n   * @param {string} url\n   * @param {string} transport\n   * @param {string} suggestion\n   */\n  constructor(url, transport, suggestion) {\n    super(`Git remote \"${url}\" uses an unrecognized transport protocol: \"${transport}\"`);\n    this.code = this.name = UnknownTransportError.code;\n    this.data = {\n      url,\n      transport,\n      suggestion\n    };\n  }\n}\n/** @type {'UnknownTransportError'} */\nUnknownTransportError.code = 'UnknownTransportError';\nclass UrlParseError extends BaseError {\n  /**\n   * @param {string} url\n   */\n  constructor(url) {\n    super(`Cannot parse remote URL: \"${url}\"`);\n    this.code = this.name = UrlParseError.code;\n    this.data = {\n      url\n    };\n  }\n}\n/** @type {'UrlParseError'} */\nUrlParseError.code = 'UrlParseError';\nclass UserCanceledError extends BaseError {\n  constructor() {\n    super(`The operation was canceled.`);\n    this.code = this.name = UserCanceledError.code;\n    this.data = {};\n  }\n}\n/** @type {'UserCanceledError'} */\nUserCanceledError.code = 'UserCanceledError';\nclass UnresolvedConflictError extends BaseError {\n  constructor() {\n    super(`Cannot continue because of unresolved merge conflicts in repository`);\n    this.code = this.name = UnresolvedConflictError.code;\n    this.data = {};\n  }\n}\n/** @type {'UnresolvedConflictError'} */\nUnresolvedConflictError.code = 'UnresolvedConflictError';\nvar Errors = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AlreadyExistsError: AlreadyExistsError,\n  AmbiguousError: AmbiguousError,\n  CheckoutConflictError: CheckoutConflictError,\n  CommitNotFetchedError: CommitNotFetchedError,\n  EmptyServerResponseError: EmptyServerResponseError,\n  FastForwardError: FastForwardError,\n  GitPushError: GitPushError,\n  HttpError: HttpError,\n  InternalError: InternalError,\n  InvalidFilepathError: InvalidFilepathError,\n  InvalidOidError: InvalidOidError,\n  InvalidRefNameError: InvalidRefNameError,\n  MaxDepthError: MaxDepthError,\n  MergeNotSupportedError: MergeNotSupportedError,\n  MissingNameError: MissingNameError,\n  MissingParameterError: MissingParameterError,\n  NoRefspecError: NoRefspecError,\n  NotFoundError: NotFoundError,\n  ObjectTypeError: ObjectTypeError,\n  ParseError: ParseError,\n  PushRejectedError: PushRejectedError,\n  RemoteCapabilityError: RemoteCapabilityError,\n  SmartHttpError: SmartHttpError,\n  UnknownTransportError: UnknownTransportError,\n  UnresolvedConflictError: UnresolvedConflictError,\n  UrlParseError: UrlParseError,\n  UserCanceledError: UserCanceledError\n});\nfunction formatAuthor({\n  name,\n  email,\n  timestamp,\n  timezoneOffset\n}) {\n  timezoneOffset = formatTimezoneOffset(timezoneOffset);\n  return `${name} <${email}> ${timestamp} ${timezoneOffset}`;\n}\n\n// The amount of effort that went into crafting these cases to handle\n// -0 (just so we don't lose that information when parsing and reconstructing)\n// but can also default to +0 was extraordinary.\n\nfunction formatTimezoneOffset(minutes) {\n  const sign = simpleSign(negateExceptForZero(minutes));\n  minutes = Math.abs(minutes);\n  const hours = Math.floor(minutes / 60);\n  minutes -= hours * 60;\n  let strHours = String(hours);\n  let strMinutes = String(minutes);\n  if (strHours.length < 2) strHours = '0' + strHours;\n  if (strMinutes.length < 2) strMinutes = '0' + strMinutes;\n  return (sign === -1 ? '-' : '+') + strHours + strMinutes;\n}\nfunction simpleSign(n) {\n  return Math.sign(n) || (Object.is(n, -0) ? -1 : 1);\n}\nfunction negateExceptForZero(n) {\n  return n === 0 ? n : -n;\n}\nfunction normalizeNewlines(str) {\n  // remove all <CR>\n  str = str.replace(/\\r/g, '');\n  // no extra newlines up front\n  str = str.replace(/^\\n+/, '');\n  // and a single newline at the end\n  str = str.replace(/\\n+$/, '') + '\\n';\n  return str;\n}\nfunction parseAuthor(author) {\n  const [, name, email, timestamp, offset] = author.match(/^(.*) <(.*)> (.*) (.*)$/);\n  return {\n    name: name,\n    email: email,\n    timestamp: Number(timestamp),\n    timezoneOffset: parseTimezoneOffset(offset)\n  };\n}\n\n// The amount of effort that went into crafting these cases to handle\n// -0 (just so we don't lose that information when parsing and reconstructing)\n// but can also default to +0 was extraordinary.\n\nfunction parseTimezoneOffset(offset) {\n  let [, sign, hours, minutes] = offset.match(/(\\+|-)(\\d\\d)(\\d\\d)/);\n  minutes = (sign === '+' ? 1 : -1) * (Number(hours) * 60 + Number(minutes));\n  return negateExceptForZero$1(minutes);\n}\nfunction negateExceptForZero$1(n) {\n  return n === 0 ? n : -n;\n}\nclass GitAnnotatedTag {\n  constructor(tag) {\n    if (typeof tag === 'string') {\n      this._tag = tag;\n    } else if (Buffer.isBuffer(tag)) {\n      this._tag = tag.toString('utf8');\n    } else if (typeof tag === 'object') {\n      this._tag = GitAnnotatedTag.render(tag);\n    } else {\n      throw new InternalError('invalid type passed to GitAnnotatedTag constructor');\n    }\n  }\n  static from(tag) {\n    return new GitAnnotatedTag(tag);\n  }\n  static render(obj) {\n    return `object ${obj.object}\ntype ${obj.type}\ntag ${obj.tag}\ntagger ${formatAuthor(obj.tagger)}\n\n${obj.message}\n${obj.gpgsig ? obj.gpgsig : ''}`;\n  }\n  justHeaders() {\n    return this._tag.slice(0, this._tag.indexOf('\\n\\n'));\n  }\n  message() {\n    const tag = this.withoutSignature();\n    return tag.slice(tag.indexOf('\\n\\n') + 2);\n  }\n  parse() {\n    return Object.assign(this.headers(), {\n      message: this.message(),\n      gpgsig: this.gpgsig()\n    });\n  }\n  render() {\n    return this._tag;\n  }\n  headers() {\n    const headers = this.justHeaders().split('\\n');\n    const hs = [];\n    for (const h of headers) {\n      if (h[0] === ' ') {\n        // combine with previous header (without space indent)\n        hs[hs.length - 1] += '\\n' + h.slice(1);\n      } else {\n        hs.push(h);\n      }\n    }\n    const obj = {};\n    for (const h of hs) {\n      const key = h.slice(0, h.indexOf(' '));\n      const value = h.slice(h.indexOf(' ') + 1);\n      if (Array.isArray(obj[key])) {\n        obj[key].push(value);\n      } else {\n        obj[key] = value;\n      }\n    }\n    if (obj.tagger) {\n      obj.tagger = parseAuthor(obj.tagger);\n    }\n    if (obj.committer) {\n      obj.committer = parseAuthor(obj.committer);\n    }\n    return obj;\n  }\n  withoutSignature() {\n    const tag = normalizeNewlines(this._tag);\n    if (tag.indexOf('\\n-----BEGIN PGP SIGNATURE-----') === -1) return tag;\n    return tag.slice(0, tag.lastIndexOf('\\n-----BEGIN PGP SIGNATURE-----'));\n  }\n  gpgsig() {\n    if (this._tag.indexOf('\\n-----BEGIN PGP SIGNATURE-----') === -1) return;\n    const signature = this._tag.slice(this._tag.indexOf('-----BEGIN PGP SIGNATURE-----'), this._tag.indexOf('-----END PGP SIGNATURE-----') + '-----END PGP SIGNATURE-----'.length);\n    return normalizeNewlines(signature);\n  }\n  payload() {\n    return this.withoutSignature() + '\\n';\n  }\n  toObject() {\n    return Buffer.from(this._tag, 'utf8');\n  }\n  static sign(tag, sign, secretKey) {\n    return _asyncToGenerator(function* () {\n      const payload = tag.payload();\n      let {\n        signature\n      } = yield sign({\n        payload,\n        secretKey\n      });\n      // renormalize the line endings to the one true line-ending\n      signature = normalizeNewlines(signature);\n      const signedTag = payload + signature;\n      // return a new tag object\n      return GitAnnotatedTag.from(signedTag);\n    })();\n  }\n}\nfunction indent(str) {\n  return str.trim().split('\\n').map(x => ' ' + x).join('\\n') + '\\n';\n}\nfunction outdent(str) {\n  return str.split('\\n').map(x => x.replace(/^ /, '')).join('\\n');\n}\nclass GitCommit {\n  constructor(commit) {\n    if (typeof commit === 'string') {\n      this._commit = commit;\n    } else if (Buffer.isBuffer(commit)) {\n      this._commit = commit.toString('utf8');\n    } else if (typeof commit === 'object') {\n      this._commit = GitCommit.render(commit);\n    } else {\n      throw new InternalError('invalid type passed to GitCommit constructor');\n    }\n  }\n  static fromPayloadSignature({\n    payload,\n    signature\n  }) {\n    const headers = GitCommit.justHeaders(payload);\n    const message = GitCommit.justMessage(payload);\n    const commit = normalizeNewlines(headers + '\\ngpgsig' + indent(signature) + '\\n' + message);\n    return new GitCommit(commit);\n  }\n  static from(commit) {\n    return new GitCommit(commit);\n  }\n  toObject() {\n    return Buffer.from(this._commit, 'utf8');\n  }\n\n  // Todo: allow setting the headers and message\n  headers() {\n    return this.parseHeaders();\n  }\n\n  // Todo: allow setting the headers and message\n  message() {\n    return GitCommit.justMessage(this._commit);\n  }\n  parse() {\n    return Object.assign({\n      message: this.message()\n    }, this.headers());\n  }\n  static justMessage(commit) {\n    return normalizeNewlines(commit.slice(commit.indexOf('\\n\\n') + 2));\n  }\n  static justHeaders(commit) {\n    return commit.slice(0, commit.indexOf('\\n\\n'));\n  }\n  parseHeaders() {\n    const headers = GitCommit.justHeaders(this._commit).split('\\n');\n    const hs = [];\n    for (const h of headers) {\n      if (h[0] === ' ') {\n        // combine with previous header (without space indent)\n        hs[hs.length - 1] += '\\n' + h.slice(1);\n      } else {\n        hs.push(h);\n      }\n    }\n    const obj = {\n      parent: []\n    };\n    for (const h of hs) {\n      const key = h.slice(0, h.indexOf(' '));\n      const value = h.slice(h.indexOf(' ') + 1);\n      if (Array.isArray(obj[key])) {\n        obj[key].push(value);\n      } else {\n        obj[key] = value;\n      }\n    }\n    if (obj.author) {\n      obj.author = parseAuthor(obj.author);\n    }\n    if (obj.committer) {\n      obj.committer = parseAuthor(obj.committer);\n    }\n    return obj;\n  }\n  static renderHeaders(obj) {\n    let headers = '';\n    if (obj.tree) {\n      headers += `tree ${obj.tree}\\n`;\n    } else {\n      headers += `tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904\\n`; // the null tree\n    }\n    if (obj.parent) {\n      if (obj.parent.length === undefined) {\n        throw new InternalError(`commit 'parent' property should be an array`);\n      }\n      for (const p of obj.parent) {\n        headers += `parent ${p}\\n`;\n      }\n    }\n    const author = obj.author;\n    headers += `author ${formatAuthor(author)}\\n`;\n    const committer = obj.committer || obj.author;\n    headers += `committer ${formatAuthor(committer)}\\n`;\n    if (obj.gpgsig) {\n      headers += 'gpgsig' + indent(obj.gpgsig);\n    }\n    return headers;\n  }\n  static render(obj) {\n    return GitCommit.renderHeaders(obj) + '\\n' + normalizeNewlines(obj.message);\n  }\n  render() {\n    return this._commit;\n  }\n  withoutSignature() {\n    const commit = normalizeNewlines(this._commit);\n    if (commit.indexOf('\\ngpgsig') === -1) return commit;\n    const headers = commit.slice(0, commit.indexOf('\\ngpgsig'));\n    const message = commit.slice(commit.indexOf('-----END PGP SIGNATURE-----\\n') + '-----END PGP SIGNATURE-----\\n'.length);\n    return normalizeNewlines(headers + '\\n' + message);\n  }\n  isolateSignature() {\n    const signature = this._commit.slice(this._commit.indexOf('-----BEGIN PGP SIGNATURE-----'), this._commit.indexOf('-----END PGP SIGNATURE-----') + '-----END PGP SIGNATURE-----'.length);\n    return outdent(signature);\n  }\n  static sign(commit, sign, secretKey) {\n    return _asyncToGenerator(function* () {\n      const payload = commit.withoutSignature();\n      const message = GitCommit.justMessage(commit._commit);\n      let {\n        signature\n      } = yield sign({\n        payload,\n        secretKey\n      });\n      // renormalize the line endings to the one true line-ending\n      signature = normalizeNewlines(signature);\n      const headers = GitCommit.justHeaders(commit._commit);\n      const signedCommit = headers + '\\n' + 'gpgsig' + indent(signature) + '\\n' + message;\n      // return a new commit object\n      return GitCommit.from(signedCommit);\n    })();\n  }\n}\nfunction resolveTree(_x20) {\n  return _resolveTree.apply(this, arguments);\n}\nfunction _resolveTree() {\n  _resolveTree = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid\n  }) {\n    // Empty tree - bypass `readObject`\n    if (oid === '4b825dc642cb6eb9a060e54bf8d69288fbee4904') {\n      return {\n        tree: GitTree.from([]),\n        oid\n      };\n    }\n    const {\n      type,\n      object\n    } = yield _readObject({\n      fs,\n      cache,\n      gitdir,\n      oid\n    });\n    // Resolve annotated tag objects to whatever\n    if (type === 'tag') {\n      oid = GitAnnotatedTag.from(object).parse().object;\n      return resolveTree({\n        fs,\n        cache,\n        gitdir,\n        oid\n      });\n    }\n    // Resolve commits to trees\n    if (type === 'commit') {\n      oid = GitCommit.from(object).parse().tree;\n      return resolveTree({\n        fs,\n        cache,\n        gitdir,\n        oid\n      });\n    }\n    if (type !== 'tree') {\n      throw new ObjectTypeError(oid, type, 'tree');\n    }\n    return {\n      tree: GitTree.from(object),\n      oid\n    };\n  });\n  return _resolveTree.apply(this, arguments);\n}\nclass GitWalkerRepo {\n  constructor({\n    fs,\n    gitdir,\n    ref\n  }) {\n    var _this32 = this;\n    this.fs = fs;\n    this.cache = {};\n    this.gitdir = gitdir;\n    this.mapPromise = _asyncToGenerator(function* () {\n      const map = new Map();\n      let oid;\n      try {\n        oid = yield GitRefManager.resolve({\n          fs,\n          gitdir,\n          ref\n        });\n      } catch (e) {\n        if (e instanceof NotFoundError) {\n          // Handle fresh branches with no commits\n          oid = '4b825dc642cb6eb9a060e54bf8d69288fbee4904';\n        }\n      }\n      const tree = yield resolveTree({\n        fs,\n        cache: _this32.cache,\n        gitdir,\n        oid\n      });\n      tree.type = 'tree';\n      tree.mode = '40000';\n      map.set('.', tree);\n      return map;\n    })();\n    const walker = this;\n    this.ConstructEntry = class TreeEntry {\n      constructor(fullpath) {\n        this._fullpath = fullpath;\n        this._type = false;\n        this._mode = false;\n        this._stat = false;\n        this._content = false;\n        this._oid = false;\n      }\n      type() {\n        var _this33 = this;\n        return _asyncToGenerator(function* () {\n          return walker.type(_this33);\n        })();\n      }\n      mode() {\n        var _this34 = this;\n        return _asyncToGenerator(function* () {\n          return walker.mode(_this34);\n        })();\n      }\n      stat() {\n        var _this35 = this;\n        return _asyncToGenerator(function* () {\n          return walker.stat(_this35);\n        })();\n      }\n      content() {\n        var _this36 = this;\n        return _asyncToGenerator(function* () {\n          return walker.content(_this36);\n        })();\n      }\n      oid() {\n        var _this37 = this;\n        return _asyncToGenerator(function* () {\n          return walker.oid(_this37);\n        })();\n      }\n    };\n  }\n  readdir(entry) {\n    var _this38 = this;\n    return _asyncToGenerator(function* () {\n      const filepath = entry._fullpath;\n      const {\n        fs,\n        cache,\n        gitdir\n      } = _this38;\n      const map = yield _this38.mapPromise;\n      const obj = map.get(filepath);\n      if (!obj) throw new Error(`No obj for ${filepath}`);\n      const oid = obj.oid;\n      if (!oid) throw new Error(`No oid for obj ${JSON.stringify(obj)}`);\n      if (obj.type !== 'tree') {\n        // TODO: support submodules (type === 'commit')\n        return null;\n      }\n      const {\n        type,\n        object\n      } = yield _readObject({\n        fs,\n        cache,\n        gitdir,\n        oid\n      });\n      if (type !== obj.type) {\n        throw new ObjectTypeError(oid, type, obj.type);\n      }\n      const tree = GitTree.from(object);\n      // cache all entries\n      for (const entry of tree) {\n        map.set(join(filepath, entry.path), entry);\n      }\n      return tree.entries().map(entry => join(filepath, entry.path));\n    })();\n  }\n  type(entry) {\n    var _this39 = this;\n    return _asyncToGenerator(function* () {\n      if (entry._type === false) {\n        const map = yield _this39.mapPromise;\n        const {\n          type\n        } = map.get(entry._fullpath);\n        entry._type = type;\n      }\n      return entry._type;\n    })();\n  }\n  mode(entry) {\n    var _this40 = this;\n    return _asyncToGenerator(function* () {\n      if (entry._mode === false) {\n        const map = yield _this40.mapPromise;\n        const {\n          mode\n        } = map.get(entry._fullpath);\n        entry._mode = normalizeMode(parseInt(mode, 8));\n      }\n      return entry._mode;\n    })();\n  }\n  stat(_entry) {\n    return _asyncToGenerator(function* () {})();\n  }\n  content(entry) {\n    var _this41 = this;\n    return _asyncToGenerator(function* () {\n      if (entry._content === false) {\n        const map = yield _this41.mapPromise;\n        const {\n          fs,\n          cache,\n          gitdir\n        } = _this41;\n        const obj = map.get(entry._fullpath);\n        const oid = obj.oid;\n        const {\n          type,\n          object\n        } = yield _readObject({\n          fs,\n          cache,\n          gitdir,\n          oid\n        });\n        if (type !== 'blob') {\n          entry._content = undefined;\n        } else {\n          entry._content = new Uint8Array(object);\n        }\n      }\n      return entry._content;\n    })();\n  }\n  oid(entry) {\n    var _this42 = this;\n    return _asyncToGenerator(function* () {\n      if (entry._oid === false) {\n        const map = yield _this42.mapPromise;\n        const obj = map.get(entry._fullpath);\n        entry._oid = obj.oid;\n      }\n      return entry._oid;\n    })();\n  }\n}\n\n// @ts-check\n\n/**\n * @param {object} args\n * @param {string} [args.ref='HEAD']\n * @returns {Walker}\n */\nfunction TREE({\n  ref = 'HEAD'\n}) {\n  const o = Object.create(null);\n  Object.defineProperty(o, GitWalkSymbol, {\n    value: function ({\n      fs,\n      gitdir\n    }) {\n      return new GitWalkerRepo({\n        fs,\n        gitdir,\n        ref\n      });\n    }\n  });\n  Object.freeze(o);\n  return o;\n}\n\n// @ts-check\n\nclass GitWalkerFs {\n  constructor({\n    fs,\n    dir,\n    gitdir,\n    cache\n  }) {\n    this.fs = fs;\n    this.cache = cache;\n    this.dir = dir;\n    this.gitdir = gitdir;\n    const walker = this;\n    this.ConstructEntry = class WorkdirEntry {\n      constructor(fullpath) {\n        this._fullpath = fullpath;\n        this._type = false;\n        this._mode = false;\n        this._stat = false;\n        this._content = false;\n        this._oid = false;\n      }\n      type() {\n        var _this43 = this;\n        return _asyncToGenerator(function* () {\n          return walker.type(_this43);\n        })();\n      }\n      mode() {\n        var _this44 = this;\n        return _asyncToGenerator(function* () {\n          return walker.mode(_this44);\n        })();\n      }\n      stat() {\n        var _this45 = this;\n        return _asyncToGenerator(function* () {\n          return walker.stat(_this45);\n        })();\n      }\n      content() {\n        var _this46 = this;\n        return _asyncToGenerator(function* () {\n          return walker.content(_this46);\n        })();\n      }\n      oid() {\n        var _this47 = this;\n        return _asyncToGenerator(function* () {\n          return walker.oid(_this47);\n        })();\n      }\n    };\n  }\n  readdir(entry) {\n    var _this48 = this;\n    return _asyncToGenerator(function* () {\n      const filepath = entry._fullpath;\n      const {\n        fs,\n        dir\n      } = _this48;\n      const names = yield fs.readdir(join(dir, filepath));\n      if (names === null) return null;\n      return names.map(name => join(filepath, name));\n    })();\n  }\n  type(entry) {\n    return _asyncToGenerator(function* () {\n      if (entry._type === false) {\n        yield entry.stat();\n      }\n      return entry._type;\n    })();\n  }\n  mode(entry) {\n    return _asyncToGenerator(function* () {\n      if (entry._mode === false) {\n        yield entry.stat();\n      }\n      return entry._mode;\n    })();\n  }\n  stat(entry) {\n    var _this49 = this;\n    return _asyncToGenerator(function* () {\n      if (entry._stat === false) {\n        const {\n          fs,\n          dir\n        } = _this49;\n        let stat = yield fs.lstat(`${dir}/${entry._fullpath}`);\n        if (!stat) {\n          throw new Error(`ENOENT: no such file or directory, lstat '${entry._fullpath}'`);\n        }\n        let type = stat.isDirectory() ? 'tree' : 'blob';\n        if (type === 'blob' && !stat.isFile() && !stat.isSymbolicLink()) {\n          type = 'special';\n        }\n        entry._type = type;\n        stat = normalizeStats(stat);\n        entry._mode = stat.mode;\n        // workaround for a BrowserFS edge case\n        if (stat.size === -1 && entry._actualSize) {\n          stat.size = entry._actualSize;\n        }\n        entry._stat = stat;\n      }\n      return entry._stat;\n    })();\n  }\n  content(entry) {\n    var _this50 = this;\n    return _asyncToGenerator(function* () {\n      if (entry._content === false) {\n        const {\n          fs,\n          dir\n        } = _this50;\n        if ((yield entry.type()) === 'tree') {\n          entry._content = undefined;\n        } else {\n          const content = yield fs.read(`${dir}/${entry._fullpath}`);\n          // workaround for a BrowserFS edge case\n          entry._actualSize = content.length;\n          if (entry._stat && entry._stat.size === -1) {\n            entry._stat.size = entry._actualSize;\n          }\n          entry._content = new Uint8Array(content);\n        }\n      }\n      return entry._content;\n    })();\n  }\n  oid(entry) {\n    var _this51 = this;\n    return _asyncToGenerator(function* () {\n      if (entry._oid === false) {\n        const {\n          fs,\n          dir,\n          gitdir,\n          cache\n        } = _this51;\n        let oid;\n        // See if we can use the SHA1 hash in the index.\n        yield GitIndexManager.acquire({\n          fs,\n          gitdir,\n          cache\n        }, /*#__PURE__*/function () {\n          var _ref6 = _asyncToGenerator(function* (index) {\n            const stage = index.entriesMap.get(entry._fullpath);\n            const stats = yield entry.stat();\n            if (!stage || compareStats(stats, stage)) {\n              if (dir && entry._content === false) {\n                oid = yield fs.getOid(dir + \"/\" + entry._fullpath);\n              } else {\n                let content;\n                try {\n                  content = yield entry.content();\n                } catch (e) {\n                  //Permission issues\n                }\n                if (content === undefined) {\n                  oid = undefined;\n                } else {\n                  oid = yield shasum(GitObject.wrap({\n                    type: 'blob',\n                    object: yield entry.content()\n                  }));\n                }\n              }\n              if (oid && stage && oid === stage.oid) {\n                index.insert({\n                  filepath: entry._fullpath,\n                  stats,\n                  oid: oid\n                });\n              }\n            } else {\n              // Use the index SHA1 rather than compute it\n              oid = stage.oid;\n            }\n          });\n          return function (_x21) {\n            return _ref6.apply(this, arguments);\n          };\n        }());\n        entry._oid = oid;\n      }\n      return entry._oid;\n    })();\n  }\n}\n\n// @ts-check\n\n/**\n * @returns {Walker}\n */\nfunction WORKDIR() {\n  const o = Object.create(null);\n  Object.defineProperty(o, GitWalkSymbol, {\n    value: function ({\n      fs,\n      dir,\n      gitdir,\n      cache\n    }) {\n      return new GitWalkerFs({\n        fs,\n        dir,\n        gitdir,\n        cache\n      });\n    }\n  });\n  Object.freeze(o);\n  return o;\n}\n\n// @ts-check\n\n// I'm putting this in a Manager because I reckon it could benefit\n// from a LOT of cacheing.\n\n// TODO: Implement .git/info/exclude\n\nclass GitIgnoreManager {\n  static isIgnored({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    filepath\n  }) {\n    return _asyncToGenerator(function* () {\n      // ALWAYS ignore \".git\" folders.\n      if (basename(filepath) === '.git') return true;\n      // '.' is not a valid gitignore entry, so '.' is never ignored\n      if (filepath === '.') return false;\n      // Find all the .gitignore files that could affect this file\n      const pairs = [{\n        gitignore: join(dir, '.gitignore'),\n        filepath\n      }];\n      const pieces = filepath.split('/');\n      for (let i = 1; i < pieces.length; i++) {\n        const folder = pieces.slice(0, i).join('/');\n        const file = pieces.slice(i).join('/');\n        pairs.push({\n          gitignore: join(dir, folder, '.gitignore'),\n          filepath: file\n        });\n      }\n      let ignoredStatus = false;\n      for (const p of pairs) {\n        let file;\n        try {\n          file = yield fs.read(p.gitignore, 'utf8');\n        } catch (err) {\n          if (err.code === 'NOENT') continue;\n        }\n        const ign = ignore().add(file);\n        // If the parent directory is excluded, we are done.\n        // \"It is not possible to re-include a file if a parent directory of that file is excluded. Git doesn’t list excluded directories for performance reasons, so any patterns on contained files have no effect, no matter where they are defined.\"\n        // source: https://git-scm.com/docs/gitignore\n        const parentdir = dirname(p.filepath);\n        if (parentdir !== '.' && ign.ignores(parentdir)) return true;\n        // If the file is currently ignored, test for UNignoring.\n        if (ignoredStatus) {\n          ignoredStatus = !ign.test(p.filepath).unignored;\n        } else {\n          ignoredStatus = ign.test(p.filepath).ignored;\n        }\n      }\n      return ignoredStatus;\n    })();\n  }\n}\n\n/**\n * This is just a collection of helper functions really. At least that's how it started.\n */\nclass FileSystem {\n  constructor(fs) {\n    if (typeof fs._original_unwrapped_fs !== 'undefined') return fs;\n    const promises = Object.getOwnPropertyDescriptor(fs, 'promises');\n    if (promises && promises.enumerable) {\n      this._readFile = fs.promises.readFile.bind(fs.promises);\n      this._writeFile = fs.promises.writeFile.bind(fs.promises);\n      this._mkdir = fs.promises.mkdir.bind(fs.promises);\n      this._rmdir = fs.promises.rmdir.bind(fs.promises);\n      this._unlink = fs.promises.unlink.bind(fs.promises);\n      this._stat = fs.promises.stat.bind(fs.promises);\n      this._lstat = fs.promises.lstat.bind(fs.promises);\n      this._readdir = fs.promises.readdir.bind(fs.promises);\n      this._readlink = fs.promises.readlink.bind(fs.promises);\n      this._symlink = fs.promises.symlink.bind(fs.promises);\n      if (fs.promises.$gitBlobOid) this.getOid = fs.promises.$gitBlobOid.bind(fs.promises);\n    } else {\n      this._readFile = pify(fs.readFile.bind(fs));\n      this._writeFile = pify(fs.writeFile.bind(fs));\n      this._mkdir = pify(fs.mkdir.bind(fs));\n      this._rmdir = pify(fs.rmdir.bind(fs));\n      this._unlink = pify(fs.unlink.bind(fs));\n      this._stat = pify(fs.stat.bind(fs));\n      this._lstat = pify(fs.lstat.bind(fs));\n      this._readdir = pify(fs.readdir.bind(fs));\n      this._readlink = pify(fs.readlink.bind(fs));\n      this._symlink = pify(fs.symlink.bind(fs));\n      if (fs.$gitBlobOid) this.getOid = pify(fs.$gitBlobOid.bind(fs));\n    }\n    this._original_unwrapped_fs = fs;\n  }\n\n  /**\n   * Return true if a file exists, false if it doesn't exist.\n   * Rethrows errors that aren't related to file existance.\n   */\n  exists(filepath, options = {}) {\n    var _this52 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this52._stat(filepath);\n        return true;\n      } catch (err) {\n        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {\n          return false;\n        } else {\n          console.log('Unhandled error in \"FileSystem.exists()\" function', err);\n          throw err;\n        }\n      }\n    })();\n  }\n\n  /**\n   * Return the contents of a file if it exists, otherwise returns null.\n   *\n   * @param {string} filepath\n   * @param {object} [options]\n   *\n   * @returns {Promise<Buffer|string|null>}\n   */\n  read(filepath, options = {}) {\n    var _this53 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        let buffer = yield _this53._readFile(filepath, options);\n        // Convert plain ArrayBuffers to Buffers\n        if (typeof buffer !== 'string') {\n          buffer = Buffer.from(buffer);\n        }\n        return buffer;\n      } catch (err) {\n        return null;\n      }\n    })();\n  }\n\n  /**\n   * Write a file (creating missing directories if need be) without throwing errors.\n   *\n   * @param {string} filepath\n   * @param {Buffer|Uint8Array|string} contents\n   * @param {object|string} [options]\n   */\n  write(filepath, contents, options = {}) {\n    var _this54 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this54._writeFile(filepath, contents, options);\n        return;\n      } catch (err) {\n        // Hmm. Let's try mkdirp and try again.\n        yield _this54.mkdir(dirname(filepath));\n        yield _this54._writeFile(filepath, contents, options);\n      }\n    })();\n  }\n\n  /**\n   * Make a directory (or series of nested directories) without throwing an error if it already exists.\n   */\n  mkdir(filepath, _selfCall = false) {\n    var _this55 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this55._mkdir(filepath);\n        return;\n      } catch (err) {\n        // If err is null then operation succeeded!\n        if (err === null) return;\n        // If the directory already exists, that's OK!\n        if (err.code === 'EEXIST') return;\n        // Avoid infinite loops of failure\n        if (_selfCall) throw err;\n        // If we got a \"no such file or directory error\" backup and try again.\n        if (err.code === 'ENOENT') {\n          const parent = dirname(filepath);\n          // Check to see if we've gone too far\n          if (parent === '.' || parent === '/' || parent === filepath) throw err;\n          // Infinite recursion, what could go wrong?\n          yield _this55.mkdir(parent);\n          yield _this55.mkdir(filepath, true);\n        }\n      }\n    })();\n  }\n\n  /**\n   * Delete a file without throwing an error if it is already deleted.\n   */\n  rm(filepath) {\n    var _this56 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this56._unlink(filepath);\n      } catch (err) {\n        if (err.code !== 'ENOENT') throw err;\n      }\n    })();\n  }\n\n  /**\n   * Delete a directory without throwing an error if it is already deleted.\n   */\n  rmdir(filepath) {\n    var _this57 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this57._rmdir(filepath);\n      } catch (err) {\n        if (err.code !== 'ENOENT') throw err;\n      }\n    })();\n  }\n\n  /**\n   * Read a directory without throwing an error is the directory doesn't exist\n   */\n  readdir(filepath) {\n    var _this58 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const names = yield _this58._readdir(filepath);\n        // Ordering is not guaranteed, and system specific (Windows vs Unix)\n        // so we must sort them ourselves.\n        names.sort(compareStrings);\n        return names;\n      } catch (err) {\n        if (err.code === 'ENOTDIR') return null;\n        return [];\n      }\n    })();\n  }\n\n  /**\n   * Return a flast list of all the files nested inside a directory\n   *\n   * Based on an elegant concurrent recursive solution from SO\n   * https://stackoverflow.com/a/45130990/2168416\n   */\n  readdirDeep(dir) {\n    var _this59 = this;\n    return _asyncToGenerator(function* () {\n      const subdirs = yield _this59._readdir(dir);\n      const files = yield Promise.all(subdirs.map( /*#__PURE__*/function () {\n        var _ref7 = _asyncToGenerator(function* (subdir) {\n          const res = dir + '/' + subdir;\n          return (yield _this59._stat(res)).isDirectory() ? _this59.readdirDeep(res) : res;\n        });\n        return function (_x22) {\n          return _ref7.apply(this, arguments);\n        };\n      }()));\n      return files.reduce((a, f) => a.concat(f), []);\n    })();\n  }\n\n  /**\n   * Return the Stats of a file/symlink if it exists, otherwise returns null.\n   * Rethrows errors that aren't related to file existance.\n   */\n  lstat(filename) {\n    var _this60 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const stats = yield _this60._lstat(filename);\n        return stats;\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          return null;\n        }\n        throw err;\n      }\n    })();\n  }\n\n  /**\n   * Reads the contents of a symlink if it exists, otherwise returns null.\n   * Rethrows errors that aren't related to file existance.\n   */\n  readlink(filename, opts = {\n    encoding: 'buffer'\n  }) {\n    var _this61 = this;\n    return _asyncToGenerator(function* () {\n      // Note: FileSystem.readlink returns a buffer by default\n      // so we can dump it into GitObject.write just like any other file.\n      try {\n        return _this61._readlink(filename, opts);\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          return null;\n        }\n        throw err;\n      }\n    })();\n  }\n\n  /**\n   * Write the contents of buffer to a symlink.\n   */\n  writelink(filename, buffer) {\n    var _this62 = this;\n    return _asyncToGenerator(function* () {\n      return _this62._symlink(buffer.toString('utf8'), filename);\n    })();\n  }\n\n  /**\n   * Get the git blob object id of a file ie the sha sum of 'blob ${contentLength}\\x00${content}'\n   */\n  getOid(filepath) {\n    var _this63 = this;\n    return _asyncToGenerator(function* () {\n      const object = yield _this63.read(filepath);\n      if (object) {\n        return yield hashObject$1({\n          gitdir: null,\n          type: 'blob',\n          object\n        });\n      }\n    })();\n  }\n}\nfunction writeObjectLoose(_x23) {\n  return _writeObjectLoose.apply(this, arguments);\n}\n/* eslint-env node, browser */\nfunction _writeObjectLoose() {\n  _writeObjectLoose = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    object,\n    format,\n    oid\n  }) {\n    if (format !== 'deflated') {\n      throw new InternalError('GitObjectStoreLoose expects objects to write to be in deflated format');\n    }\n    const source = `objects/${oid.slice(0, 2)}/${oid.slice(2)}`;\n    const filepath = `${gitdir}/${source}`;\n    // Don't overwrite existing git objects - this helps avoid EPERM errors.\n    // Although I don't know how we'd fix corrupted objects then. Perhaps delete them\n    // on read?\n    if (!(yield fs.exists(filepath))) yield fs.write(filepath, object);\n  });\n  return _writeObjectLoose.apply(this, arguments);\n}\nlet supportsCompressionStream = null;\nfunction deflate(_x24) {\n  return _deflate.apply(this, arguments);\n}\nfunction _deflate() {\n  _deflate = _asyncToGenerator(function* (buffer) {\n    if (supportsCompressionStream === null) {\n      supportsCompressionStream = testCompressionStream();\n    }\n    return supportsCompressionStream ? browserDeflate(buffer) : pako.deflate(buffer);\n  });\n  return _deflate.apply(this, arguments);\n}\nfunction browserDeflate(_x25) {\n  return _browserDeflate.apply(this, arguments);\n}\nfunction _browserDeflate() {\n  _browserDeflate = _asyncToGenerator(function* (buffer) {\n    const cs = new CompressionStream('deflate');\n    const c = new Blob([buffer]).stream().pipeThrough(cs);\n    return new Uint8Array(yield new Response(c).arrayBuffer());\n  });\n  return _browserDeflate.apply(this, arguments);\n}\nfunction testCompressionStream() {\n  try {\n    const cs = new CompressionStream('deflate');\n    if (cs) return true;\n  } catch (_) {\n    // no bother\n  }\n  return false;\n}\nfunction _writeObject(_x26) {\n  return _writeObject2.apply(this, arguments);\n}\nfunction _writeObject2() {\n  _writeObject2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    type,\n    object,\n    format = 'content',\n    oid = undefined,\n    dryRun = false\n  }) {\n    if (format !== 'deflated') {\n      if (format !== 'wrapped') {\n        object = GitObject.wrap({\n          type,\n          object\n        });\n      }\n      oid = yield shasum(object);\n      object = Buffer.from(yield deflate(object));\n    }\n    if (!dryRun) {\n      yield writeObjectLoose({\n        fs,\n        gitdir,\n        object,\n        format: 'deflated',\n        oid\n      });\n    }\n    return oid;\n  });\n  return _writeObject2.apply(this, arguments);\n}\nfunction assertParameter(name, value) {\n  if (value === undefined) {\n    throw new MissingParameterError(name);\n  }\n}\n\n// @ts-check\n\n/**\n * Add a file to the git index (aka staging area)\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.filepath - The path to the file to add to the index\n *\n * @returns {Promise<void>} Resolves successfully once the git index has been updated\n *\n * @example\n * await fs.promises.writeFile('/tutorial/README.md', `# TEST`)\n * await git.add({ fs, dir: '/tutorial', filepath: 'README.md' })\n * console.log('done')\n *\n */\nfunction add(_x27) {\n  return _add.apply(this, arguments);\n}\nfunction _add() {\n  _add = _asyncToGenerator(function* ({\n    fs: _fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    filepath\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('dir', dir);\n      assertParameter('gitdir', gitdir);\n      assertParameter('filepath', filepath);\n      const fs = new FileSystem(_fs);\n      const cache = {};\n      yield GitIndexManager.acquire({\n        fs,\n        gitdir,\n        cache\n      }, /*#__PURE__*/function () {\n        var _ref14 = _asyncToGenerator(function* (index) {\n          yield addToIndex({\n            dir,\n            gitdir,\n            fs,\n            filepath,\n            index\n          });\n        });\n        return function (_x167) {\n          return _ref14.apply(this, arguments);\n        };\n      }());\n    } catch (err) {\n      err.caller = 'git.add';\n      throw err;\n    }\n  });\n  return _add.apply(this, arguments);\n}\nfunction addToIndex(_x28) {\n  return _addToIndex.apply(this, arguments);\n} // @ts-check\n/**\n *\n * @param {Object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {object} args.cache\n * @param {SignCallback} [args.onSign]\n * @param {string} args.gitdir\n * @param {string} args.message\n * @param {Object} args.author\n * @param {string} args.author.name\n * @param {string} args.author.email\n * @param {number} args.author.timestamp\n * @param {number} args.author.timezoneOffset\n * @param {Object} args.committer\n * @param {string} args.committer.name\n * @param {string} args.committer.email\n * @param {number} args.committer.timestamp\n * @param {number} args.committer.timezoneOffset\n * @param {string} [args.signingKey]\n * @param {boolean} [args.dryRun = false]\n * @param {boolean} [args.noUpdateBranch = false]\n * @param {string} [args.ref]\n * @param {string[]} [args.parent]\n * @param {string} [args.tree]\n *\n * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly created commit.\n */\nfunction _addToIndex() {\n  _addToIndex = _asyncToGenerator(function* ({\n    dir,\n    gitdir,\n    fs,\n    filepath,\n    index\n  }) {\n    const ignored = yield GitIgnoreManager.isIgnored({\n      fs,\n      dir,\n      gitdir,\n      filepath\n    });\n    const stats = yield fs.lstat(join(dir, filepath));\n    if (!stats) throw new NotFoundError(filepath);\n    if (stats.isDirectory()) {\n      var children;\n      if (ignored) {\n        children = [];\n        for (var entry of index) {\n          if (entry.path.startsWith(filepath + '/')) {\n            children.push(entry.path);\n          }\n        }\n      } else {\n        children = (yield fs.readdir(join(dir, filepath))).map(child => join(filepath, child));\n      }\n      const promises = children.map(filepath => addToIndex({\n        dir,\n        gitdir,\n        fs,\n        filepath,\n        index\n      }));\n      yield Promise.all(promises);\n    } else {\n      if (ignored) {\n        /*TODO optimize*/\n        if (!index.entries.some(e => e.path == filepath)) return;\n      }\n      const object = stats.isSymbolicLink() ? yield fs.readlink(join(dir, filepath)) : yield fs.read(join(dir, filepath));\n      if (object === null) throw new NotFoundError(filepath);\n      const oid = yield _writeObject({\n        fs,\n        gitdir,\n        type: 'blob',\n        object\n      });\n      index.insert({\n        filepath,\n        stats,\n        oid\n      });\n    }\n  });\n  return _addToIndex.apply(this, arguments);\n}\nfunction _commit(_x29) {\n  return _commit2.apply(this, arguments);\n}\nfunction _commit2() {\n  _commit2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    onSign,\n    gitdir,\n    message,\n    author,\n    committer,\n    signingKey,\n    dryRun = false,\n    noUpdateBranch = false,\n    ref,\n    parent,\n    tree\n  }) {\n    if (!ref) {\n      ref = yield GitRefManager.resolve({\n        fs,\n        gitdir,\n        ref: 'HEAD',\n        depth: 2\n      });\n    }\n    return GitIndexManager.acquire({\n      fs,\n      gitdir,\n      cache\n    }, /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator(function* (index) {\n        if (!tree) {\n          const inodes = flatFileListToDirectoryStructure(index.entries);\n          const inode = inodes.get('.');\n          tree = yield constructTree({\n            fs,\n            gitdir,\n            inode,\n            dryRun\n          });\n        }\n        if (!parent) {\n          try {\n            parent = [yield GitRefManager.resolve({\n              fs,\n              gitdir,\n              ref\n            })];\n          } catch (err) {\n            // Probably an initial commit\n            parent = [];\n          }\n        }\n        let comm = GitCommit.from({\n          tree,\n          parent,\n          author,\n          committer,\n          message\n        });\n        if (signingKey) {\n          comm = yield GitCommit.sign(comm, onSign, signingKey);\n        }\n        const oid = yield _writeObject({\n          fs,\n          gitdir,\n          type: 'commit',\n          object: comm.toObject(),\n          dryRun\n        });\n        if (!noUpdateBranch && !dryRun) {\n          // Update branch pointer\n          yield GitRefManager.writeRef({\n            fs,\n            gitdir,\n            ref,\n            value: oid\n          });\n        }\n        return oid;\n      });\n      return function (_x168) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n  });\n  return _commit2.apply(this, arguments);\n}\nfunction constructTree(_x30) {\n  return _constructTree.apply(this, arguments);\n} // @ts-check\nfunction _constructTree() {\n  _constructTree = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    inode,\n    dryRun\n  }) {\n    // use depth first traversal\n    const children = inode.children;\n    for (const inode of children) {\n      if (inode.type === 'tree') {\n        inode.metadata.mode = '040000';\n        inode.metadata.oid = yield constructTree({\n          fs,\n          gitdir,\n          inode,\n          dryRun\n        });\n      } else if (inode.metadata.flags.stage !== 0) {\n        throw new UnresolvedConflictError();\n      }\n    }\n    const entries = children.map(inode => ({\n      mode: inode.metadata.mode,\n      path: inode.basename,\n      oid: inode.metadata.oid,\n      type: inode.type\n    }));\n    const tree = GitTree.from(entries);\n    const oid = yield _writeObject({\n      fs,\n      gitdir,\n      type: 'tree',\n      object: tree.toObject(),\n      dryRun\n    });\n    return oid;\n  });\n  return _constructTree.apply(this, arguments);\n}\nfunction resolveFilepath(_x31) {\n  return _resolveFilepath2.apply(this, arguments);\n}\nfunction _resolveFilepath2() {\n  _resolveFilepath2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid,\n    filepath\n  }) {\n    // Ensure there are no leading or trailing directory separators.\n    // I was going to do this automatically, but then found that the Git Terminal for Windows\n    // auto-expands --filepath=/src/utils to --filepath=C:/Users/Will/AppData/Local/Programs/Git/src/utils\n    // so I figured it would be wise to promote the behavior in the application layer not just the library layer.\n    if (filepath.startsWith('/')) {\n      throw new InvalidFilepathError('leading-slash');\n    } else if (filepath.endsWith('/')) {\n      throw new InvalidFilepathError('trailing-slash');\n    }\n    const _oid = oid;\n    const result = yield resolveTree({\n      fs,\n      cache,\n      gitdir,\n      oid\n    });\n    const tree = result.tree;\n    if (filepath === '') {\n      oid = result.oid;\n    } else {\n      const pathArray = filepath.split('/');\n      oid = yield _resolveFilepath({\n        fs,\n        cache,\n        gitdir,\n        tree,\n        pathArray,\n        oid: _oid,\n        filepath\n      });\n    }\n    return oid;\n  });\n  return _resolveFilepath2.apply(this, arguments);\n}\nfunction _resolveFilepath(_x32) {\n  return _resolveFilepath3.apply(this, arguments);\n} // @ts-check\n/**\n *\n * @typedef {Object} ReadTreeResult - The object returned has the following schema:\n * @property {string} oid - SHA-1 object id of this tree\n * @property {TreeObject} tree - the parsed tree object\n */\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} args.gitdir\n * @param {string} args.oid\n * @param {string} [args.filepath]\n *\n * @returns {Promise<ReadTreeResult>}\n */\nfunction _resolveFilepath3() {\n  _resolveFilepath3 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    tree,\n    pathArray,\n    oid,\n    filepath\n  }) {\n    const name = pathArray.shift();\n    for (const entry of tree) {\n      if (entry.path === name) {\n        if (pathArray.length === 0) {\n          return entry.oid;\n        } else {\n          const {\n            type,\n            object\n          } = yield _readObject({\n            fs,\n            cache,\n            gitdir,\n            oid: entry.oid\n          });\n          if (type !== 'tree') {\n            throw new ObjectTypeError(oid, type, 'blob', filepath);\n          }\n          tree = GitTree.from(object);\n          return _resolveFilepath({\n            fs,\n            cache,\n            gitdir,\n            tree,\n            pathArray,\n            oid,\n            filepath\n          });\n        }\n      }\n    }\n    throw new NotFoundError(`file or directory found at \"${oid}:${filepath}\"`);\n  });\n  return _resolveFilepath3.apply(this, arguments);\n}\nfunction _readTree(_x33) {\n  return _readTree2.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.gitdir\n * @param {TreeObject} args.tree\n *\n * @returns {Promise<string>}\n */\nfunction _readTree2() {\n  _readTree2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid,\n    filepath = undefined\n  }) {\n    if (filepath !== undefined) {\n      oid = yield resolveFilepath({\n        fs,\n        cache,\n        gitdir,\n        oid,\n        filepath\n      });\n    }\n    const {\n      tree,\n      oid: treeOid\n    } = yield resolveTree({\n      fs,\n      cache,\n      gitdir,\n      oid\n    });\n    const result = {\n      oid: treeOid,\n      tree: tree.entries()\n    };\n    return result;\n  });\n  return _readTree2.apply(this, arguments);\n}\nfunction _writeTree(_x34) {\n  return _writeTree2.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {object} args.cache\n * @param {SignCallback} [args.onSign]\n * @param {string} args.gitdir\n * @param {string} args.ref\n * @param {string} args.oid\n * @param {string|Uint8Array} args.note\n * @param {boolean} [args.force]\n * @param {Object} args.author\n * @param {string} args.author.name\n * @param {string} args.author.email\n * @param {number} args.author.timestamp\n * @param {number} args.author.timezoneOffset\n * @param {Object} args.committer\n * @param {string} args.committer.name\n * @param {string} args.committer.email\n * @param {number} args.committer.timestamp\n * @param {number} args.committer.timezoneOffset\n * @param {string} [args.signingKey]\n *\n * @returns {Promise<string>}\n */\nfunction _writeTree2() {\n  _writeTree2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    tree\n  }) {\n    // Convert object to buffer\n    const object = GitTree.from(tree).toObject();\n    const oid = yield _writeObject({\n      fs,\n      gitdir,\n      type: 'tree',\n      object,\n      format: 'content'\n    });\n    return oid;\n  });\n  return _writeTree2.apply(this, arguments);\n}\nfunction _addNote(_x35) {\n  return _addNote2.apply(this, arguments);\n} // @ts-check\n/**\n * @param {Object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.gitdir\n * @param {string} args.path\n *\n * @returns {Promise<any>} Resolves with the config value\n *\n * @example\n * // Read config value\n * let value = await git.getConfig({\n *   dir: '$input((/))',\n *   path: '$input((user.name))'\n * })\n * console.log(value)\n *\n */\nfunction _addNote2() {\n  _addNote2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    onSign,\n    gitdir,\n    ref,\n    oid,\n    note,\n    force,\n    author,\n    committer,\n    signingKey\n  }) {\n    // Get the current note commit\n    let parent;\n    try {\n      parent = yield GitRefManager.resolve({\n        gitdir,\n        fs,\n        ref\n      });\n    } catch (err) {\n      if (!(err instanceof NotFoundError)) {\n        throw err;\n      }\n    }\n\n    // I'm using the \"empty tree\" magic number here for brevity\n    const result = yield _readTree({\n      fs,\n      cache,\n      gitdir,\n      oid: parent || '4b825dc642cb6eb9a060e54bf8d69288fbee4904'\n    });\n    let tree = result.tree;\n\n    // Handle the case where a note already exists\n    if (force) {\n      tree = tree.filter(entry => entry.path !== oid);\n    } else {\n      for (const entry of tree) {\n        if (entry.path === oid) {\n          throw new AlreadyExistsError('note', oid);\n        }\n      }\n    }\n\n    // Create the note blob\n    if (typeof note === 'string') {\n      note = Buffer.from(note, 'utf8');\n    }\n    const noteOid = yield _writeObject({\n      fs,\n      gitdir,\n      type: 'blob',\n      object: note,\n      format: 'content'\n    });\n\n    // Create the new note tree\n    tree.push({\n      mode: '100644',\n      path: oid,\n      oid: noteOid,\n      type: 'blob'\n    });\n    const treeOid = yield _writeTree({\n      fs,\n      gitdir,\n      tree\n    });\n\n    // Create the new note commit\n    const commitOid = yield _commit({\n      fs,\n      cache,\n      onSign,\n      gitdir,\n      ref,\n      tree: treeOid,\n      parent: parent && [parent],\n      message: `Note added by 'isomorphic-git addNote'\\n`,\n      author,\n      committer,\n      signingKey\n    });\n    return commitOid;\n  });\n  return _addNote2.apply(this, arguments);\n}\nfunction _getConfig(_x36) {\n  return _getConfig2.apply(this, arguments);\n}\n/**\n *\n * @returns {Promise<void | {name: string, email: string, date: Date, timestamp: number, timezoneOffset: number }>}\n */\nfunction _getConfig2() {\n  _getConfig2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    path\n  }) {\n    const config = yield GitConfigManager.get({\n      fs,\n      gitdir\n    });\n    return config.get(path);\n  });\n  return _getConfig2.apply(this, arguments);\n}\nfunction normalizeAuthorObject(_x37) {\n  return _normalizeAuthorObject.apply(this, arguments);\n}\n/**\n *\n * @returns {Promise<void | {name: string, email: string, timestamp: number, timezoneOffset: number }>}\n */\nfunction _normalizeAuthorObject() {\n  _normalizeAuthorObject = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    author = {}\n  }) {\n    let {\n      name,\n      email,\n      timestamp,\n      timezoneOffset\n    } = author;\n    name = name || (yield _getConfig({\n      fs,\n      gitdir,\n      path: 'user.name'\n    }));\n    email = email || (yield _getConfig({\n      fs,\n      gitdir,\n      path: 'user.email'\n    })) || '';\n    if (name === undefined) {\n      return undefined;\n    }\n    timestamp = timestamp != null ? timestamp : Math.floor(Date.now() / 1000);\n    timezoneOffset = timezoneOffset != null ? timezoneOffset : new Date(timestamp * 1000).getTimezoneOffset();\n    return {\n      name,\n      email,\n      timestamp,\n      timezoneOffset\n    };\n  });\n  return _normalizeAuthorObject.apply(this, arguments);\n}\nfunction normalizeCommitterObject(_x38) {\n  return _normalizeCommitterObject.apply(this, arguments);\n} // @ts-check\n/**\n * Add or update an object note\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {SignCallback} [args.onSign] - a PGP signing implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.ref] - The notes ref to look under\n * @param {string} args.oid - The SHA-1 object id of the object to add the note to.\n * @param {string|Uint8Array} args.note - The note to add\n * @param {boolean} [args.force] - Over-write note if it already exists.\n * @param {Object} [args.author] - The details about the author.\n * @param {string} [args.author.name] - Default is `user.name` config.\n * @param {string} [args.author.email] - Default is `user.email` config.\n * @param {number} [args.author.timestamp=Math.floor(Date.now()/1000)] - Set the author timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).\n * @param {number} [args.author.timezoneOffset] - Set the author timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.\n * @param {Object} [args.committer = author] - The details about the note committer, in the same format as the author parameter. If not specified, the author details are used.\n * @param {string} [args.committer.name] - Default is `user.name` config.\n * @param {string} [args.committer.email] - Default is `user.email` config.\n * @param {number} [args.committer.timestamp=Math.floor(Date.now()/1000)] - Set the committer timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).\n * @param {number} [args.committer.timezoneOffset] - Set the committer timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.\n * @param {string} [args.signingKey] - Sign the note commit using this private PGP key.\n *\n * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the commit object for the added note.\n */\nfunction _normalizeCommitterObject() {\n  _normalizeCommitterObject = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    author,\n    committer\n  }) {\n    committer = Object.assign({}, committer || author);\n    // Match committer's date to author's one, if omitted\n    if (author) {\n      committer.timestamp = committer.timestamp || author.timestamp;\n      committer.timezoneOffset = committer.timezoneOffset || author.timezoneOffset;\n    }\n    committer = yield normalizeAuthorObject({\n      fs,\n      gitdir,\n      author: committer\n    });\n    return committer;\n  });\n  return _normalizeCommitterObject.apply(this, arguments);\n}\nfunction addNote(_x39) {\n  return _addNote3.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.gitdir\n * @param {string} args.remote\n * @param {string} args.url\n * @param {boolean} args.force\n *\n * @returns {Promise<void>}\n *\n */\nfunction _addNote3() {\n  _addNote3 = _asyncToGenerator(function* ({\n    fs: _fs,\n    onSign,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref = 'refs/notes/commits',\n    oid,\n    note,\n    force,\n    author: _author,\n    committer: _committer,\n    signingKey\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('oid', oid);\n      assertParameter('note', note);\n      if (signingKey) {\n        assertParameter('onSign', onSign);\n      }\n      const fs = new FileSystem(_fs);\n      const cache = {};\n      const author = yield normalizeAuthorObject({\n        fs,\n        gitdir,\n        author: _author\n      });\n      if (!author) throw new MissingNameError('author');\n      const committer = yield normalizeCommitterObject({\n        fs,\n        gitdir,\n        author,\n        committer: _committer\n      });\n      if (!committer) throw new MissingNameError('committer');\n      return yield _addNote({\n        fs: new FileSystem(fs),\n        cache,\n        onSign,\n        gitdir,\n        ref,\n        oid,\n        note,\n        force,\n        author,\n        committer,\n        signingKey\n      });\n    } catch (err) {\n      err.caller = 'git.addNote';\n      throw err;\n    }\n  });\n  return _addNote3.apply(this, arguments);\n}\nfunction _addRemote(_x40) {\n  return _addRemote2.apply(this, arguments);\n} // @ts-check\n/**\n * Add or update a remote\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.remote - The name of the remote\n * @param {string} args.url - The URL of the remote\n * @param {boolean} [args.force = false] - Instead of throwing an error if a remote named `remote` already exists, overwrite the existing remote.\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.addRemote({\n *   fs,\n *   dir: '/tutorial',\n *   remote: 'upstream',\n *   url: 'https://github.com/isomorphic-git/isomorphic-git'\n * })\n * console.log('done')\n *\n */\nfunction _addRemote2() {\n  _addRemote2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    remote,\n    url,\n    force\n  }) {\n    if (remote !== cleanGitRef.clean(remote)) {\n      throw new InvalidRefNameError(remote, cleanGitRef.clean(remote));\n    }\n    const config = yield GitConfigManager.get({\n      fs,\n      gitdir\n    });\n    if (!force) {\n      // Check that setting it wouldn't overwrite.\n      const remoteNames = yield config.getSubsections('remote');\n      if (remoteNames.includes(remote)) {\n        // Throw an error if it would overwrite an existing remote,\n        // but not if it's simply setting the same value again.\n        if (url !== (yield config.get(`remote.${remote}.url`))) {\n          throw new AlreadyExistsError('remote', remote);\n        }\n      }\n    }\n    yield config.set(`remote.${remote}.url`, url);\n    yield config.set(`remote.${remote}.fetch`, `+refs/heads/*:refs/remotes/${remote}/*`);\n    yield GitConfigManager.save({\n      fs,\n      gitdir,\n      config\n    });\n  });\n  return _addRemote2.apply(this, arguments);\n}\nfunction addRemote(_x41) {\n  return _addRemote3.apply(this, arguments);\n} // @ts-check\n/**\n * Create an annotated tag.\n *\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {SignCallback} [args.onSign]\n * @param {string} args.gitdir\n * @param {string} args.ref\n * @param {string} [args.message = ref]\n * @param {string} [args.object = 'HEAD']\n * @param {object} [args.tagger]\n * @param {string} args.tagger.name\n * @param {string} args.tagger.email\n * @param {number} args.tagger.timestamp\n * @param {number} args.tagger.timezoneOffset\n * @param {string} [args.gpgsig]\n * @param {string} [args.signingKey]\n * @param {boolean} [args.force = false]\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.annotatedTag({\n *   dir: '$input((/))',\n *   ref: '$input((test-tag))',\n *   message: '$input((This commit is awesome))',\n *   tagger: {\n *     name: '$input((Mr. Test))',\n *     email: '$input((mrtest@example.com))'\n *   }\n * })\n * console.log('done')\n *\n */\nfunction _addRemote3() {\n  _addRemote3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    remote,\n    url,\n    force = false\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('remote', remote);\n      assertParameter('url', url);\n      return yield _addRemote({\n        fs: new FileSystem(fs),\n        gitdir,\n        remote,\n        url,\n        force\n      });\n    } catch (err) {\n      err.caller = 'git.addRemote';\n      throw err;\n    }\n  });\n  return _addRemote3.apply(this, arguments);\n}\nfunction _annotatedTag(_x42) {\n  return _annotatedTag2.apply(this, arguments);\n} // @ts-check\n/**\n * Create an annotated tag.\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {SignCallback} [args.onSign] - a PGP signing implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.ref - What to name the tag\n * @param {string} [args.message = ref] - The tag message to use.\n * @param {string} [args.object = 'HEAD'] - The SHA-1 object id the tag points to. (Will resolve to a SHA-1 object id if value is a ref.) By default, the commit object which is referred by the current `HEAD` is used.\n * @param {object} [args.tagger] - The details about the tagger.\n * @param {string} [args.tagger.name] - Default is `user.name` config.\n * @param {string} [args.tagger.email] - Default is `user.email` config.\n * @param {number} [args.tagger.timestamp=Math.floor(Date.now()/1000)] - Set the tagger timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).\n * @param {number} [args.tagger.timezoneOffset] - Set the tagger timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.\n * @param {string} [args.gpgsig] - The gpgsig attatched to the tag object. (Mutually exclusive with the `signingKey` option.)\n * @param {string} [args.signingKey] - Sign the tag object using this private PGP key. (Mutually exclusive with the `gpgsig` option.)\n * @param {boolean} [args.force = false] - Instead of throwing an error if a tag named `ref` already exists, overwrite the existing tag. Note that this option does not modify the original tag object itself.\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.annotatedTag({\n *   fs,\n *   dir: '/tutorial',\n *   ref: 'test-tag',\n *   message: 'This commit is awesome',\n *   tagger: {\n *     name: 'Mr. Test',\n *     email: 'mrtest@example.com'\n *   }\n * })\n * console.log('done')\n *\n */\nfunction _annotatedTag2() {\n  _annotatedTag2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    onSign,\n    gitdir,\n    ref,\n    tagger,\n    message = ref,\n    gpgsig,\n    object,\n    signingKey,\n    force = false\n  }) {\n    ref = ref.startsWith('refs/tags/') ? ref : `refs/tags/${ref}`;\n    if (!force && (yield GitRefManager.exists({\n      fs,\n      gitdir,\n      ref\n    }))) {\n      throw new AlreadyExistsError('tag', ref);\n    }\n\n    // Resolve passed value\n    const oid = yield GitRefManager.resolve({\n      fs,\n      gitdir,\n      ref: object || 'HEAD'\n    });\n    const {\n      type\n    } = yield _readObject({\n      fs,\n      cache,\n      gitdir,\n      oid\n    });\n    let tagObject = GitAnnotatedTag.from({\n      object: oid,\n      type,\n      tag: ref.replace('refs/tags/', ''),\n      tagger,\n      message,\n      gpgsig\n    });\n    if (signingKey) {\n      tagObject = yield GitAnnotatedTag.sign(tagObject, onSign, signingKey);\n    }\n    const value = yield _writeObject({\n      fs,\n      gitdir,\n      type: 'tag',\n      object: tagObject.toObject()\n    });\n    yield GitRefManager.writeRef({\n      fs,\n      gitdir,\n      ref,\n      value\n    });\n  });\n  return _annotatedTag2.apply(this, arguments);\n}\nfunction annotatedTag(_x43) {\n  return _annotatedTag3.apply(this, arguments);\n} // @ts-check\n/**\n * Create a branch\n *\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.gitdir\n * @param {string} args.ref\n * @param {boolean} [args.checkout = false]\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.branch({ dir: '$input((/))', ref: '$input((develop))' })\n * console.log('done')\n *\n */\nfunction _annotatedTag3() {\n  _annotatedTag3 = _asyncToGenerator(function* ({\n    fs: _fs,\n    onSign,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref,\n    tagger: _tagger,\n    message = ref,\n    gpgsig,\n    object,\n    signingKey,\n    force = false\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('ref', ref);\n      if (signingKey) {\n        assertParameter('onSign', onSign);\n      }\n      const fs = new FileSystem(_fs);\n\n      // Fill in missing arguments with default values\n      const tagger = yield normalizeAuthorObject({\n        fs,\n        gitdir,\n        author: _tagger\n      });\n      if (!tagger) throw new MissingNameError('tagger');\n      return yield _annotatedTag({\n        fs,\n        cache: {},\n        onSign,\n        gitdir,\n        ref,\n        tagger,\n        message,\n        gpgsig,\n        object,\n        signingKey,\n        force\n      });\n    } catch (err) {\n      err.caller = 'git.annotatedTag';\n      throw err;\n    }\n  });\n  return _annotatedTag3.apply(this, arguments);\n}\nfunction _branch(_x44) {\n  return _branch2.apply(this, arguments);\n} // @ts-check\n/**\n * Create a branch\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.ref - What to name the branch\n * @param {boolean} [args.checkout = false] - Update `HEAD` to point at the newly created branch\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.branch({ fs, dir: '/tutorial', ref: 'develop' })\n * console.log('done')\n *\n */\nfunction _branch2() {\n  _branch2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    ref,\n    checkout = false\n  }) {\n    if (ref !== cleanGitRef.clean(ref)) {\n      throw new InvalidRefNameError(ref, cleanGitRef.clean(ref));\n    }\n    const fullref = `refs/heads/${ref}`;\n    const exist = yield GitRefManager.exists({\n      fs,\n      gitdir,\n      ref: fullref\n    });\n    if (exist) {\n      throw new AlreadyExistsError('branch', ref, false);\n    }\n\n    // Get current HEAD tree oid\n    let oid;\n    try {\n      oid = yield GitRefManager.resolve({\n        fs,\n        gitdir,\n        ref: 'HEAD'\n      });\n    } catch (e) {\n      // Probably an empty repo\n    }\n\n    // Create a new ref that points at the current commit\n    if (oid) {\n      yield GitRefManager.writeRef({\n        fs,\n        gitdir,\n        ref: fullref,\n        value: oid\n      });\n    }\n    if (checkout) {\n      // Update HEAD\n      yield GitRefManager.writeSymbolicRef({\n        fs,\n        gitdir,\n        ref: 'HEAD',\n        value: fullref\n      });\n    }\n  });\n  return _branch2.apply(this, arguments);\n}\nfunction branch(_x45) {\n  return _branch3.apply(this, arguments);\n} // https://dev.to/namirsab/comment/2050\nfunction _branch3() {\n  _branch3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref,\n    checkout = false\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('ref', ref);\n      return yield _branch({\n        fs: new FileSystem(fs),\n        gitdir,\n        ref,\n        checkout\n      });\n    } catch (err) {\n      err.caller = 'git.branch';\n      throw err;\n    }\n  });\n  return _branch3.apply(this, arguments);\n}\nfunction arrayRange(start, end) {\n  const length = end - start;\n  return Array.from({\n    length\n  }, (_, i) => start + i);\n}\n\n// TODO: Should I just polyfill Array.flat?\nconst flat = typeof Array.prototype.flat === 'undefined' ? entries => entries.reduce((acc, x) => acc.concat(x), []) : entries => entries.flat();\n\n// This is convenient for computing unions/joins of sorted lists.\nclass RunningMinimum {\n  constructor() {\n    // Using a getter for 'value' would just bloat the code.\n    // You know better than to set it directly right?\n    this.value = null;\n  }\n  consider(value) {\n    if (value === null || value === undefined) return;\n    if (this.value === null) {\n      this.value = value;\n    } else if (value < this.value) {\n      this.value = value;\n    }\n  }\n  reset() {\n    this.value = null;\n  }\n}\n\n// Take an array of length N of\n//   iterators of length Q_n\n//     of strings\n// and return an iterator of length max(Q_n) for all n\n//   of arrays of length N\n//     of string|null who all have the same string value\nfunction* unionOfIterators(sets) {\n  /* NOTE: We can assume all arrays are sorted.\n   * Indexes are sorted because they are defined that way:\n   *\n   * > Index entries are sorted in ascending order on the name field,\n   * > interpreted as a string of unsigned bytes (i.e. memcmp() order, no\n   * > localization, no special casing of directory separator '/'). Entries\n   * > with the same name are sorted by their stage field.\n   *\n   * Trees should be sorted because they are created directly from indexes.\n   * They definitely should be sorted, or else they wouldn't have a unique SHA1.\n   * So that would be very naughty on the part of the tree-creator.\n   *\n   * Lastly, the working dir entries are sorted because I choose to sort them\n   * in my FileSystem.readdir() implementation.\n   */\n\n  // Init\n  const min = new RunningMinimum();\n  let minimum;\n  const heads = [];\n  const numsets = sets.length;\n  for (let i = 0; i < numsets; i++) {\n    // Abuse the fact that iterators continue to return 'undefined' for value\n    // once they are done\n    heads[i] = sets[i].next().value;\n    if (heads[i] !== undefined) {\n      min.consider(heads[i]);\n    }\n  }\n  if (min.value === null) return;\n  // Iterate\n  while (true) {\n    const result = [];\n    minimum = min.value;\n    min.reset();\n    for (let i = 0; i < numsets; i++) {\n      if (heads[i] !== undefined && heads[i] === minimum) {\n        result[i] = heads[i];\n        heads[i] = sets[i].next().value;\n      } else {\n        // A little hacky, but eh\n        result[i] = null;\n      }\n      if (heads[i] !== undefined) {\n        min.consider(heads[i]);\n      }\n    }\n    yield result;\n    if (min.value === null) return;\n  }\n}\n\n// @ts-check\n\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {object} args.cache\n * @param {string} [args.dir]\n * @param {string} [args.gitdir=join(dir,'.git')]\n * @param {Walker[]} args.trees\n * @param {WalkerMap} [args.map]\n * @param {WalkerReduce} [args.reduce]\n * @param {WalkerIterate} [args.iterate]\n *\n * @returns {Promise<any>} The finished tree-walking result\n *\n * @see {WalkerMap}\n *\n */\nfunction _walk(_x46) {\n  return _walk2.apply(this, arguments);\n}\nfunction _walk2() {\n  _walk2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    dir,\n    gitdir,\n    trees,\n    // @ts-ignore\n    map = ( /*#__PURE__*/function () {\n      var _ref16 = _asyncToGenerator(function* (_, entry) {\n        return entry;\n      });\n      return function (_x169, _x170) {\n        return _ref16.apply(this, arguments);\n      };\n    }()),\n    // The default reducer is a flatmap that filters out undefineds.\n    reduce = ( /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator(function* (parent, children) {\n        const flatten = flat(children);\n        if (parent !== undefined) flatten.unshift(parent);\n        return flatten;\n      });\n      return function (_x171, _x172) {\n        return _ref17.apply(this, arguments);\n      };\n    }()),\n    // The default iterate function walks all children concurrently\n    iterate = (walk, children) => Promise.all([...children].map(walk))\n  }) {\n    const walkers = trees.map(proxy => proxy[GitWalkSymbol]({\n      fs,\n      dir,\n      gitdir,\n      cache\n    }));\n    const root = new Array(walkers.length).fill('.');\n    const range = arrayRange(0, walkers.length);\n    const unionWalkerFromReaddir = /*#__PURE__*/function () {\n      var _ref18 = _asyncToGenerator(function* (entries) {\n        range.map(i => {\n          entries[i] = entries[i] && new walkers[i].ConstructEntry(entries[i]);\n        });\n        const subdirs = yield Promise.all(range.map(i => entries[i] ? walkers[i].readdir(entries[i]) : []));\n        // Now process child directories\n        const iterators = subdirs.map(array => array === null ? [] : array).map(array => array[Symbol.iterator]());\n        return {\n          entries,\n          children: unionOfIterators(iterators)\n        };\n      });\n      return function unionWalkerFromReaddir(_x173) {\n        return _ref18.apply(this, arguments);\n      };\n    }();\n    const walk = /*#__PURE__*/function () {\n      var _ref19 = _asyncToGenerator(function* (root) {\n        const {\n          entries,\n          children\n        } = yield unionWalkerFromReaddir(root);\n        const fullpath = entries.find(entry => entry && entry._fullpath)._fullpath;\n        const parent = yield map(fullpath, entries);\n        if (parent !== null) {\n          let walkedChildren = yield iterate(walk, children);\n          walkedChildren = walkedChildren.filter(x => x !== undefined);\n          return reduce(parent, walkedChildren);\n        }\n      });\n      return function walk(_x174) {\n        return _ref19.apply(this, arguments);\n      };\n    }();\n    return walk(root);\n  });\n  return _walk2.apply(this, arguments);\n}\nconst worthWalking = (filepath, root) => {\n  if (filepath === '.' || root == null || root.length === 0 || root === '.') {\n    return true;\n  }\n  if (root.length >= filepath.length) {\n    return root.startsWith(filepath);\n  } else {\n    return filepath.startsWith(root);\n  }\n};\n\n// @ts-check\n\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {ProgressCallback} [args.onProgress]\n * @param {string} args.dir\n * @param {string} args.gitdir\n * @param {string} args.ref\n * @param {string[]} [args.filepaths]\n * @param {string} args.remote\n * @param {boolean} args.noCheckout\n * @param {boolean} [args.noUpdateHead]\n * @param {boolean} [args.dryRun]\n * @param {boolean} [args.force]\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n */\nfunction _checkout(_x47) {\n  return _checkout2.apply(this, arguments);\n}\nfunction _checkout2() {\n  _checkout2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    onProgress,\n    dir,\n    gitdir,\n    remote,\n    ref,\n    filepaths,\n    noCheckout,\n    noUpdateHead,\n    currentHead = 'HEAD',\n    dryRun,\n    force\n  }) {\n    // Get tree oid\n    let oid;\n    try {\n      if (ref !== null) oid = yield GitRefManager.resolve({\n        fs,\n        gitdir,\n        ref\n      });else noUpdateHead = true;\n      // TODO: Figure out what to do if both 'ref' and 'remote' are specified, ref already exists,\n      // and is configured to track a different remote.\n    } catch (err) {\n      if (ref === 'HEAD') throw err;\n      // If `ref` doesn't exist, create a new remote tracking branch\n      // Figure out the commit to checkout\n      const remoteRef = `${remote}/${ref}`;\n      oid = yield GitRefManager.resolve({\n        fs,\n        gitdir,\n        ref: remoteRef\n      });\n      // Set up remote tracking branch\n      const config = yield GitConfigManager.get({\n        fs,\n        gitdir\n      });\n      yield config.set(`branch.${ref}.remote`, remote);\n      yield config.set(`branch.${ref}.merge`, `refs/heads/${ref}`);\n      yield GitConfigManager.save({\n        fs,\n        gitdir,\n        config\n      });\n      // Create a new branch that points at that same commit\n      yield GitRefManager.writeRef({\n        fs,\n        gitdir,\n        ref: `refs/heads/${ref}`,\n        value: oid\n      });\n    }\n\n    // Update working dir\n    if (!noCheckout) {\n      let ops;\n      // First pass - just analyze files (not directories) and figure out what needs to be done\n      try {\n        ops = yield analyze({\n          fs,\n          cache,\n          onProgress,\n          dir,\n          gitdir,\n          ref,\n          force,\n          currentHead,\n          filepaths\n        });\n      } catch (err) {\n        // Throw a more helpful error message for this common mistake.\n        if (err instanceof NotFoundError && err.data.what === oid) {\n          throw new CommitNotFetchedError(ref, oid);\n        } else {\n          throw err;\n        }\n      }\n\n      // Report conflicts\n      const conflicts = ops.filter(([method]) => method === 'conflict').map(([method, fullpath]) => fullpath);\n      if (conflicts.length > 0) {\n        throw new CheckoutConflictError(conflicts);\n      }\n\n      // Collect errors\n      const errors = ops.filter(([method]) => method === 'error').map(([method, fullpath]) => fullpath);\n      if (errors.length > 0) {\n        throw new InternalError(errors.join(', '));\n      }\n      if (dryRun) {\n        // Since the format of 'ops' is in flux, I really would rather folk besides myself not start relying on it\n        // return ops\n        return;\n      }\n\n      // Second pass - execute planned changes\n      // The cheapest semi-parallel solution without computing a full dependency graph will be\n      // to just do ops in 4 dumb phases: delete files, delete dirs, create dirs, write files\n\n      let count = 0;\n      const total = ops.length;\n      yield GitIndexManager.acquire({\n        fs,\n        gitdir,\n        cache\n      }, /*#__PURE__*/function () {\n        var _ref20 = _asyncToGenerator(function* (index) {\n          yield Promise.all(ops.filter(([method]) => method === 'delete' || method === 'delete-index').map( /*#__PURE__*/function () {\n            var _ref21 = _asyncToGenerator(function* ([method, fullpath]) {\n              const filepath = `${dir}/${fullpath}`;\n              if (method === 'delete') {\n                yield fs.rm(filepath);\n              }\n              index.delete({\n                filepath: fullpath\n              });\n              if (onProgress) {\n                yield onProgress({\n                  phase: 'Updating workdir',\n                  loaded: ++count,\n                  total\n                });\n              }\n            });\n            return function (_x176) {\n              return _ref21.apply(this, arguments);\n            };\n          }()));\n        });\n        return function (_x175) {\n          return _ref20.apply(this, arguments);\n        };\n      }());\n\n      // Note: this is cannot be done naively in parallel\n      yield GitIndexManager.acquire({\n        fs,\n        gitdir,\n        cache\n      }, /*#__PURE__*/function () {\n        var _ref22 = _asyncToGenerator(function* (index) {\n          for (const [method, fullpath] of ops) {\n            if (method === 'rmdir' || method === 'rmdir-index') {\n              const filepath = `${dir}/${fullpath}`;\n              try {\n                if (method === 'rmdir-index') {\n                  index.delete({\n                    filepath: fullpath\n                  });\n                }\n                yield fs.rmdir(filepath);\n                if (onProgress) {\n                  yield onProgress({\n                    phase: 'Updating workdir',\n                    loaded: ++count,\n                    total\n                  });\n                }\n              } catch (e) {\n                if (e.code === 'ENOTEMPTY') {\n                  console.log(`Did not delete ${fullpath} because directory is not empty`);\n                } else {\n                  throw e;\n                }\n              }\n            }\n          }\n        });\n        return function (_x177) {\n          return _ref22.apply(this, arguments);\n        };\n      }());\n      yield Promise.all(ops.filter(([method]) => method === 'mkdir' || method === 'mkdir-index').map( /*#__PURE__*/function () {\n        var _ref23 = _asyncToGenerator(function* ([_, fullpath]) {\n          const filepath = `${dir}/${fullpath}`;\n          yield fs.mkdir(filepath);\n          if (onProgress) {\n            yield onProgress({\n              phase: 'Updating workdir',\n              loaded: ++count,\n              total\n            });\n          }\n        });\n        return function (_x178) {\n          return _ref23.apply(this, arguments);\n        };\n      }()));\n      yield GitIndexManager.acquire({\n        fs,\n        gitdir,\n        cache\n      }, /*#__PURE__*/function () {\n        var _ref24 = _asyncToGenerator(function* (index) {\n          yield Promise.all(ops.filter(([method]) => method === 'create' || method === 'create-index' || method === 'update' || method === 'mkdir-index').map( /*#__PURE__*/function () {\n            var _ref25 = _asyncToGenerator(function* ([method, fullpath, oid, mode, chmod]) {\n              const filepath = `${dir}/${fullpath}`;\n              try {\n                if (method !== 'create-index' && method !== 'mkdir-index') {\n                  const {\n                    object\n                  } = yield _readObject({\n                    fs,\n                    cache,\n                    gitdir,\n                    oid\n                  });\n                  if (chmod) {\n                    // Note: the mode option of fs.write only works when creating files,\n                    // not updating them. Since the `fs` plugin doesn't expose `chmod` this\n                    // is our only option.\n                    yield fs.rm(filepath);\n                  }\n                  if (mode === 0o100644) {\n                    // regular file\n                    yield fs.write(filepath, object);\n                  } else if (mode === 0o100755) {\n                    // executable file\n                    yield fs.write(filepath, object, {\n                      mode: 0o777\n                    });\n                  } else if (mode === 0o120000) {\n                    // symlink\n                    yield fs.writelink(filepath, object);\n                  } else {\n                    throw new InternalError(`Invalid mode 0o${mode.toString(8)} detected in blob ${oid}`);\n                  }\n                }\n                const stats = yield fs.lstat(filepath);\n                // We can't trust the executable bit returned by lstat on Windows,\n                // so we need to preserve this value from the TREE.\n                // TODO: Figure out how git handles this internally.\n                if (mode === 0o100755) {\n                  stats.mode = 0o755;\n                }\n                // Submodules are present in the git index but use a unique mode different from trees\n                if (method === 'mkdir-index') {\n                  stats.mode = 0o160000;\n                }\n                index.insert({\n                  filepath: fullpath,\n                  stats,\n                  oid\n                });\n                if (onProgress) {\n                  yield onProgress({\n                    phase: 'Updating workdir',\n                    loaded: ++count,\n                    total\n                  });\n                }\n              } catch (e) {\n                console.log(e);\n              }\n            });\n            return function (_x180) {\n              return _ref25.apply(this, arguments);\n            };\n          }()));\n        });\n        return function (_x179) {\n          return _ref24.apply(this, arguments);\n        };\n      }());\n    }\n\n    // Update HEAD\n    if (!noUpdateHead) {\n      const fullRef = yield GitRefManager.expand({\n        fs,\n        gitdir,\n        ref\n      });\n      if (fullRef.startsWith('refs/heads')) {\n        yield GitRefManager.writeSymbolicRef({\n          fs,\n          gitdir,\n          ref: 'HEAD',\n          value: fullRef\n        });\n      } else {\n        // detached head\n        yield GitRefManager.writeRef({\n          fs,\n          gitdir,\n          ref: 'HEAD',\n          value: oid\n        });\n      }\n    }\n  });\n  return _checkout2.apply(this, arguments);\n}\nfunction analyze(_x48) {\n  return _analyze.apply(this, arguments);\n} // @ts-check\n/**\n * Checkout a branch\n *\n * If the branch already exists it will check out that branch. Otherwise, it will create a new remote tracking branch set to track the remote branch of that name.\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {ProgressCallback} [args.onProgress] - optional progress event callback\n * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.ref = 'HEAD'] - Source to checkout files from\n * @param {string[]} [args.filepaths] - Limit the checkout to the given files and directories\n * @param {string} [args.remote = 'origin'] - Which remote repository to use\n * @param {boolean} [args.noCheckout = false] - If true, will update HEAD but won't update the working directory\n * @param {boolean} [args.noUpdateHead] - If true, will update the working directory but won't update HEAD. Defaults to `false` when `ref` is provided, and `true` if `ref` is not provided.\n * @param {boolean} [args.dryRun = false] - If true, simulates a checkout so you can test whether it would succeed.\n * @param {boolean} [args.force = false] - If true, conflicts will be ignored and files will be overwritten regardless of local changes.\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * // switch to the main branch\n * await git.checkout({\n *   fs,\n *   dir: '/tutorial',\n *   ref: 'main'\n * })\n * console.log('done')\n *\n * @example\n * // restore the 'docs' and 'src/docs' folders to the way they were, overwriting any changes\n * await git.checkout({\n *   fs,\n *   dir: '/tutorial',\n *   force: true,\n *   filepaths: ['docs', 'src/docs']\n * })\n * console.log('done')\n *\n * @example\n * // restore the 'docs' and 'src/docs' folders to the way they are in the 'develop' branch, overwriting any changes\n * await git.checkout({\n *   fs,\n *   dir: '/tutorial',\n *   ref: 'develop',\n *   noUpdateHead: true,\n *   force: true,\n *   filepaths: ['docs', 'src/docs']\n * })\n * console.log('done')\n */\nfunction _analyze() {\n  _analyze = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    onProgress,\n    dir,\n    gitdir,\n    ref,\n    force,\n    filepaths,\n    currentHead = 'HEAD'\n  }) {\n    let count = 0;\n    let target;\n    if (ref == null) {\n      target = STAGE();\n    } else target = TREE({\n      ref\n    });\n    /*\n      Not an exact implementation, fails for some valid cases\n      The major change is differentiating b/w checking for optimization\n      and checking for conflicts, \n      1 conflicts arise when stage!==workdir || stage!==head\n      2 but except for file/directory are kept when stage==commit || head ==commit\n      3 updates must match head==stage && stage==workdir or force\n      4 head === workdir is never checked\n      5 commit==workdir is just an optimization\n    */\n    const isSameFile = /*#__PURE__*/function () {\n      var _ref26 = _asyncToGenerator(function* (a, b, ignoreMode) {\n        //ignore mode when comparing stage to head\n        return !a && !b || a && b && (yield a.oid()) == (yield b.oid()) && (ignoreMode || (yield a.mode()) == (yield b.mode()));\n      });\n      return function isSameFile(_x181, _x182, _x183) {\n        return _ref26.apply(this, arguments);\n      };\n    }();\n    const trees = [target, WORKDIR(), STAGE()];\n    if (currentHead) trees.push(TREE({\n      ref: currentHead\n    }));\n    const canIgnore = /*#__PURE__*/function () {\n      var _ref27 = _asyncToGenerator(function* (commit, head) {\n        if (currentHead) return yield isSameFile(commit, head);\n        return false;\n      });\n      return function canIgnore(_x184, _x185) {\n        return _ref27.apply(this, arguments);\n      };\n    }();\n    return _walk({\n      fs,\n      cache,\n      dir,\n      gitdir,\n      trees: trees,\n      map: function () {\n        var _ref28 = _asyncToGenerator(function* (fullpath, [commit, workdir, stage, head]) {\n          if (fullpath === '.') return;\n          // match against base paths\n          if (filepaths && !filepaths.some(base => worthWalking(fullpath, base))) {\n            return null;\n          }\n          // Emit progress event\n          if (onProgress) {\n            yield onProgress({\n              phase: 'Analyzing workdir',\n              loaded: ++count\n            });\n          }\n\n          // This is a kind of silly pattern but it worked so well for me in the past\n          // and it makes intuitively demonstrating exhaustiveness so *easy*.\n          // This checks for the presense and/or absense of each of the 3 entries,\n          // converts that to a 3-bit binary representation, and then handles\n          // every possible combination (2^3 or 8 cases) with a lookup table.\n          const key = [!!stage, !!commit, !!workdir].map(Number).join('');\n          switch (key) {\n            // Impossible case.\n            case '000':\n              return;\n            // Ignore workdir files that are not tracked and not part of the new commit.\n            case '001':\n              // OK, make an exception for explicitly named files.\n              if (force && filepaths && filepaths.includes(fullpath)) {\n                return ['delete', fullpath];\n              }\n              return;\n            // New entries\n            case '010':\n              {\n                switch (yield commit.type()) {\n                  case 'tree':\n                    {\n                      return ['mkdir', fullpath];\n                    }\n                  case 'blob':\n                    {\n                      return ['create', fullpath, yield commit.oid(), yield commit.mode()];\n                    }\n                  case 'commit':\n                    {\n                      return ['mkdir-index', fullpath, yield commit.oid(), yield commit.mode()];\n                    }\n                  default:\n                    {\n                      return ['error', `new entry Unhandled type ${yield commit.type()}`];\n                    }\n                }\n              }\n            // New entries but there is already something in the workdir there.\n            case '011':\n              {\n                switch (`${yield commit.type()}-${yield workdir.type()}`) {\n                  case 'tree-tree':\n                    {\n                      return; // noop\n                    }\n                  case 'tree-blob':\n                  case 'blob-tree':\n                    {\n                      return ['conflict', fullpath];\n                    }\n                  case 'blob-blob':\n                    {\n                      if (!force) {\n                        //must be staged and committed to update\n                        if (yield canIgnore(head, commit)) {\n                          return ['ignore', fullpath];\n                        } else {\n                          return ['conflict', fullpath];\n                        }\n                      }\n                      // Is the incoming file different?\n                      if ((yield commit.oid()) !== (yield workdir.oid())) {\n                        if (force) {\n                          return ['update', fullpath, yield commit.oid(), yield commit.mode(), (yield commit.mode()) !== (yield workdir.mode())];\n                        } else {\n                          return ['conflict', fullpath];\n                        }\n                      } else {\n                        // Is the incoming file a different mode?\n                        if ((yield commit.mode()) !== (yield workdir.mode())) {\n                          if (force) {\n                            return ['update', fullpath, yield commit.oid(), yield commit.mode(), true];\n                          } else {\n                            return ['conflict', fullpath];\n                          }\n                        } else {\n                          return ['create-index', fullpath, yield commit.oid(), yield commit.mode()];\n                        }\n                      }\n                    }\n                  case 'commit-tree':\n                    {\n                      // TODO: submodule\n                      // We'll ignore submodule directories for now.\n                      // Users prefer we not throw an error for lack of submodule support.\n                      // gitlinks\n                      return ['ignore', fullpath];\n                    }\n                  case 'commit-blob':\n                    {\n                      // TODO: submodule\n                      // But... we'll complain if there is a *file* where we would\n                      // put a submodule if we had submodule support.\n                      return ['conflict', fullpath];\n                    }\n                  default:\n                    {\n                      return ['error', `new entry Unhandled type ${commit.type}`];\n                    }\n                }\n              }\n            // Something in stage but not in the commit OR the workdir.\n            // Note: I verified this behavior against canonical git.\n            case '100':\n              {\n                return ['delete-index', fullpath];\n              }\n            // Deleted entries\n            // TODO: How to handle if stage type and workdir type mismatch?\n            case '101':\n              {\n                switch (yield stage.type()) {\n                  case 'tree':\n                    {\n                      return ['rmdir', fullpath];\n                    }\n                  case 'blob':\n                    {\n                      //Always deleted\n                      if (force) {\n                        return ['delete', fullpath];\n                      }\n                      // Git checks that the workdir.oid === stage.oid before deleting file\n                      //Ensure the change is both staged and committed\n                      if ((yield isSameFile(stage, workdir)) && (!currentHead || (yield isSameFile(head, stage, true)))) {\n                        return ['delete', fullpath];\n                      } else {\n                        if (yield canIgnore(head, commit)) {\n                          return ['ignore', fullpath];\n                        }\n                        return ['conflict', fullpath];\n                      }\n                    }\n                  case 'commit':\n                    {\n                      return ['rmdir-index', fullpath];\n                    }\n                  default:\n                    {\n                      return ['error', `delete entry Unhandled type ${yield stage.type()}`];\n                    }\n                }\n              }\n            /* eslint-disable no-fallthrough */\n            // File missing from workdir\n            case '110':\n            // Possibly modified entries\n            case '111':\n              {\n                /* eslint-enable no-fallthrough */\n                switch (`${yield stage.type()}-${yield commit.type()}`) {\n                  case 'tree-tree':\n                    {\n                      return;\n                    }\n                  case 'blob-blob':\n                    {\n                      // If the file hasn't changed, there is no need to do anything.\n                      // Existing file modifications in the workdir can be be left as is.\n                      if (!force && (yield stage.oid()) === (yield commit.oid()) && (yield stage.mode()) === (yield commit.mode())) {\n                        return ['ignore', fullpath];\n                      }\n                      //If the head and the commit are the same,\n                      //Uncommitted changes can be kept\n                      else if (!force && (yield canIgnore(head, commit))) {\n                        return ['ignore', fullpath];\n                      }\n\n                      // Check for local changes that would be lost\n                      //The git procedure is to delete the file and stage it first ie 011,010\n                      if (!force && !((yield isSameFile(head, stage, true)) && (yield isSameFile(stage, workdir)))) {\n                        return ['conflict', fullpath];\n                      }\n                      if (workdir) {\n                        // Note: canonical git only compares with the stage. But we're smart enough\n                        // to compare to the stage AND the incoming commit.\n                        if ((yield workdir.oid()) !== (yield stage.oid()) && (yield workdir.oid()) !== (yield commit.oid())) {\n                          if (force) {\n                            return ['update', fullpath, yield commit.oid(), yield commit.mode(), (yield commit.mode()) !== (yield workdir.mode())];\n                          } else {\n                            return ['conflict', fullpath];\n                          }\n                        }\n                      } else if (force) {\n                        return ['update', fullpath, yield commit.oid(), yield commit.mode(), (yield commit.mode()) !== (yield stage.mode())];\n                      }\n                      // Has file mode changed?\n                      if ((yield commit.mode()) !== (yield stage.mode())) {\n                        return ['update', fullpath, yield commit.oid(), yield commit.mode(), true];\n                      }\n                      // TODO: HANDLE SYMLINKS\n                      // Has the file content changed?\n                      if ((yield commit.oid()) !== (yield stage.oid())) {\n                        return ['update', fullpath, yield commit.oid(), yield commit.mode(), false];\n                      } else {\n                        return;\n                      }\n                    }\n                  case 'tree-blob':\n                    {\n                      return ['update-dir-to-blob', fullpath, yield commit.oid()];\n                    }\n                  case 'blob-tree':\n                    {\n                      return ['update-blob-to-tree', fullpath];\n                    }\n                  case 'commit-commit':\n                    {\n                      return ['mkdir-index', fullpath, yield commit.oid(), yield commit.mode()];\n                    }\n                  default:\n                    {\n                      return ['error', `update entry Unhandled type ${yield stage.type()}-${yield commit.type()}`];\n                    }\n                }\n              }\n          }\n        });\n        return function map(_x186, _x187) {\n          return _ref28.apply(this, arguments);\n        };\n      }(),\n      // Modify the default flat mapping\n      reduce: function () {\n        var _ref29 = _asyncToGenerator(function* (parent, children) {\n          children = flat(children);\n          if (!parent) {\n            return children;\n          } else if (parent && parent[0] === 'rmdir') {\n            children.push(parent);\n            return children;\n          } else {\n            children.unshift(parent);\n            return children;\n          }\n        });\n        return function reduce(_x188, _x189) {\n          return _ref29.apply(this, arguments);\n        };\n      }()\n    });\n  });\n  return _analyze.apply(this, arguments);\n}\nfunction checkout(_x49) {\n  return _checkout3.apply(this, arguments);\n}\n/* TODO add documentationn*/\nfunction _checkout3() {\n  _checkout3 = _asyncToGenerator(function* ({\n    fs,\n    onProgress,\n    dir,\n    gitdir = join(dir, '.git'),\n    remote = 'origin',\n    ref: _ref,\n    filepaths,\n    noCheckout = false,\n    noUpdateHead = _ref === undefined || _ref === null,\n    dryRun = false,\n    force = false\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('dir', dir);\n      assertParameter('gitdir', gitdir);\n      const ref = _ref === undefined ? 'HEAD' : _ref;\n      return yield _checkout({\n        fs: new FileSystem(fs),\n        cache: {},\n        onProgress,\n        dir,\n        gitdir,\n        remote,\n        ref,\n        filepaths,\n        noCheckout,\n        noUpdateHead,\n        dryRun,\n        force\n      });\n    } catch (err) {\n      err.caller = 'git.checkout';\n      throw err;\n    }\n  });\n  return _checkout3.apply(this, arguments);\n}\nfunction showCheckout(_x50) {\n  return _showCheckout.apply(this, arguments);\n} // @see https://git-scm.com/docs/git-rev-parse.html#_specifying_revisions\nfunction _showCheckout() {\n  _showCheckout = _asyncToGenerator(function* ({\n    fs,\n    onProgress,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref = 'HEAD',\n    cache = {},\n    filepaths,\n    force = false\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('dir', dir);\n      assertParameter('gitdir', gitdir);\n      return yield analyze({\n        fs: new FileSystem(fs),\n        cache,\n        onProgress,\n        dir,\n        gitdir,\n        ref,\n        filepaths,\n        force\n      });\n    } catch (err) {\n      err.caller = 'git.checkout';\n      throw err;\n    }\n  });\n  return _showCheckout.apply(this, arguments);\n}\nconst abbreviateRx = new RegExp('^refs/(heads/|tags/|remotes/)?(.*)');\nfunction abbreviateRef(ref) {\n  const match = abbreviateRx.exec(ref);\n  if (match) {\n    if (match[1] === 'remotes/' && ref.endsWith('/HEAD')) {\n      return match[2].slice(0, -5);\n    } else {\n      return match[2];\n    }\n  }\n  return ref;\n}\n\n// @ts-check\n\n/**\n * @param {Object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.gitdir\n * @param {boolean} [args.fullname = false] - Return the full path (e.g. \"refs/heads/main\") instead of the abbreviated form.\n * @param {boolean} [args.test = false] - If the current branch doesn't actually exist (such as right after git init) then return `undefined`.\n *\n * @returns {Promise<string|void>} The name of the current branch or undefined if the HEAD is detached.\n *\n */\nfunction _currentBranch(_x51) {\n  return _currentBranch2.apply(this, arguments);\n}\nfunction _currentBranch2() {\n  _currentBranch2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    fullname = false,\n    test = false\n  }) {\n    const ref = yield GitRefManager.resolve({\n      fs,\n      gitdir,\n      ref: 'HEAD',\n      depth: 2\n    });\n    if (test) {\n      try {\n        yield GitRefManager.resolve({\n          fs,\n          gitdir,\n          ref\n        });\n      } catch (_) {\n        return;\n      }\n    }\n    // Return `undefined` for detached HEAD\n    if (!ref.startsWith('refs/')) return;\n    return fullname ? ref : abbreviateRef(ref);\n  });\n  return _currentBranch2.apply(this, arguments);\n}\nfunction translateSSHtoHTTP(url) {\n  // handle \"shorter scp-like syntax\"\n  url = url.replace(/^git@([^:]+):/, 'https://$1/');\n  // handle proper SSH URLs\n  url = url.replace(/^ssh:\\/\\//, 'https://');\n  return url;\n}\nfunction calculateBasicAuthHeader({\n  username = '',\n  password = ''\n}) {\n  return `Basic ${Buffer.from(`${username}:${password}`).toString('base64')}`;\n}\n\n// Currently 'for await' upsets my linters.\nfunction forAwait(_x52, _x53) {\n  return _forAwait.apply(this, arguments);\n}\nfunction _forAwait() {\n  _forAwait = _asyncToGenerator(function* (iterable, cb) {\n    const iter = getIterator(iterable);\n    while (true) {\n      const {\n        value,\n        done\n      } = yield iter.next();\n      if (value) yield cb(value);\n      if (done) break;\n    }\n    if (iter.return) iter.return();\n  });\n  return _forAwait.apply(this, arguments);\n}\nfunction collect(_x54) {\n  return _collect.apply(this, arguments);\n}\nfunction _collect() {\n  _collect = _asyncToGenerator(function* (iterable) {\n    let size = 0;\n    const buffers = [];\n    // This will be easier once `for await ... of` loops are available.\n    yield forAwait(iterable, value => {\n      buffers.push(value);\n      size += value.byteLength;\n    });\n    const result = new Uint8Array(size);\n    let nextIndex = 0;\n    for (const buffer of buffers) {\n      result.set(buffer, nextIndex);\n      nextIndex += buffer.byteLength;\n    }\n    return result;\n  });\n  return _collect.apply(this, arguments);\n}\nfunction extractAuthFromUrl(url) {\n  // For whatever reason, the `fetch` API does not convert credentials embedded in the URL\n  // into Basic Authentication headers automatically. Instead it throws an error!\n  // So we must manually parse the URL, rip out the user:password portion if it is present\n  // and compute the Authorization header.\n  // Note: I tried using new URL(url) but that throws a security exception in Edge. :rolleyes:\n  let userpass = url.match(/^https?:\\/\\/([^/]+)@/);\n  // No credentials, return the url unmodified and an empty auth object\n  if (userpass == null) return {\n    url,\n    auth: {}\n  };\n  userpass = userpass[1];\n  const [username, password] = userpass.split(':');\n  // Remove credentials from URL\n  url = url.replace(`${userpass}@`, '');\n  // Has credentials, return the fetch-safe URL and the parsed credentials\n  return {\n    url,\n    auth: {\n      username,\n      password\n    }\n  };\n}\nfunction padHex(b, n) {\n  const s = n.toString(16);\n  return '0'.repeat(b - s.length) + s;\n}\n\n/**\npkt-line Format\n---------------\n\nMuch (but not all) of the payload is described around pkt-lines.\n\nA pkt-line is a variable length binary string.  The first four bytes\nof the line, the pkt-len, indicates the total length of the line,\nin hexadecimal.  The pkt-len includes the 4 bytes used to contain\nthe length's hexadecimal representation.\n\nA pkt-line MAY contain binary data, so implementors MUST ensure\npkt-line parsing/formatting routines are 8-bit clean.\n\nA non-binary line SHOULD BE terminated by an LF, which if present\nMUST be included in the total length. Receivers MUST treat pkt-lines\nwith non-binary data the same whether or not they contain the trailing\nLF (stripping the LF if present, and not complaining when it is\nmissing).\n\nThe maximum length of a pkt-line's data component is 65516 bytes.\nImplementations MUST NOT send pkt-line whose length exceeds 65520\n(65516 bytes of payload + 4 bytes of length data).\n\nImplementations SHOULD NOT send an empty pkt-line (\"0004\").\n\nA pkt-line with a length field of 0 (\"0000\"), called a flush-pkt,\nis a special case and MUST be handled differently than an empty\npkt-line (\"0004\").\n\n----\n  pkt-line     =  data-pkt / flush-pkt\n\n  data-pkt     =  pkt-len pkt-payload\n  pkt-len      =  4*(HEXDIG)\n  pkt-payload  =  (pkt-len - 4)*(OCTET)\n\n  flush-pkt    = \"0000\"\n----\n\nExamples (as C-style strings):\n\n----\n  pkt-line          actual value\n  ---------------------------------\n  \"0006a\\n\"         \"a\\n\"\n  \"0005a\"           \"a\"\n  \"000bfoobar\\n\"    \"foobar\\n\"\n  \"0004\"            \"\"\n----\n*/\n\n// I'm really using this more as a namespace.\n// There's not a lot of \"state\" in a pkt-line\n\nclass GitPktLine {\n  static flush() {\n    return Buffer.from('0000', 'utf8');\n  }\n  static delim() {\n    return Buffer.from('0001', 'utf8');\n  }\n  static encode(line) {\n    if (typeof line === 'string') {\n      line = Buffer.from(line);\n    }\n    const length = line.length + 4;\n    const hexlength = padHex(4, length);\n    return Buffer.concat([Buffer.from(hexlength, 'utf8'), line]);\n  }\n  static streamReader(stream) {\n    const reader = new StreamReader(stream);\n    return /*#__PURE__*/function () {\n      var _read = _asyncToGenerator(function* () {\n        try {\n          let length = yield reader.read(4);\n          if (length == null) return true;\n          length = parseInt(length.toString('utf8'), 16);\n          if (length === 0) return null;\n          if (length === 1) return null; // delim packets\n          const buffer = yield reader.read(length - 4);\n          if (buffer == null) return true;\n          return buffer;\n        } catch (err) {\n          console.log('error', err);\n          return true;\n        }\n      });\n      function read() {\n        return _read.apply(this, arguments);\n      }\n      return read;\n    }();\n  }\n}\n\n// @ts-check\n\n/**\n * @param {function} read\n */\nfunction parseCapabilitiesV2(_x55) {\n  return _parseCapabilitiesV.apply(this, arguments);\n}\nfunction _parseCapabilitiesV() {\n  _parseCapabilitiesV = _asyncToGenerator(function* (read) {\n    /** @type {Object<string, string | true>} */\n    const capabilities2 = {};\n    let line;\n    while (true) {\n      line = yield read();\n      if (line === true) break;\n      if (line === null) continue;\n      line = line.toString('utf8').replace(/\\n$/, '');\n      const i = line.indexOf('=');\n      if (i > -1) {\n        const key = line.slice(0, i);\n        const value = line.slice(i + 1);\n        capabilities2[key] = value;\n      } else {\n        capabilities2[line] = true;\n      }\n    }\n    return {\n      protocolVersion: 2,\n      capabilities2\n    };\n  });\n  return _parseCapabilitiesV.apply(this, arguments);\n}\nfunction parseRefsAdResponse(_x56, _x57) {\n  return _parseRefsAdResponse.apply(this, arguments);\n}\nfunction _parseRefsAdResponse() {\n  _parseRefsAdResponse = _asyncToGenerator(function* (stream, {\n    service\n  }) {\n    const capabilities = new Set();\n    const refs = new Map();\n    const symrefs = new Map();\n\n    // There is probably a better way to do this, but for now\n    // let's just throw the result parser inline here.\n    const read = GitPktLine.streamReader(stream);\n    let lineOne = yield read();\n    // skip past any flushes\n    while (lineOne === null) lineOne = yield read();\n    if (lineOne === true) throw new EmptyServerResponseError();\n    // Clients MUST ignore an LF at the end of the line.\n    if (lineOne.toString('utf8').replace(/\\n$/, '') !== `# service=${service}`) {\n      throw new ParseError(`# service=${service}\\\\n`, lineOne.toString('utf8'));\n    }\n    let lineTwo = yield read();\n    // skip past any flushes\n    while (lineTwo === null) lineTwo = yield read();\n    // In the edge case of a brand new repo, zero refs (and zero capabilities)\n    // are returned.\n    if (lineTwo === true) return {\n      capabilities,\n      refs,\n      symrefs\n    };\n    lineTwo = lineTwo.toString('utf8');\n    // Handle protocol v2 responses\n    if (lineTwo.includes('version 2')) {\n      return parseCapabilitiesV2(read);\n    }\n    const [firstRef, capabilitiesLine] = splitAndAssert(lineTwo, '\\x00', '\\\\x00');\n    capabilitiesLine.split(' ').map(x => capabilities.add(x));\n    const [ref, name] = splitAndAssert(firstRef, ' ', ' ');\n    refs.set(name, ref);\n    while (true) {\n      const line = yield read();\n      if (line === true) break;\n      if (line !== null) {\n        const [ref, name] = splitAndAssert(line.toString('utf8'), ' ', ' ');\n        refs.set(name, ref);\n      }\n    }\n    // Symrefs are thrown into the \"capabilities\" unfortunately.\n    for (const cap of capabilities) {\n      if (cap.startsWith('symref=')) {\n        const m = cap.match(/symref=([^:]+):(.*)/);\n        if (m.length === 3) {\n          symrefs.set(m[1], m[2]);\n        }\n      }\n    }\n    return {\n      protocolVersion: 1,\n      capabilities,\n      refs,\n      symrefs\n    };\n  });\n  return _parseRefsAdResponse.apply(this, arguments);\n}\nfunction splitAndAssert(line, sep, expected) {\n  const split = line.trim().split(sep);\n  if (split.length !== 2) {\n    throw new ParseError(`Two strings separated by '${expected}'`, line.toString('utf8'));\n  }\n  return split;\n}\n\n// Try to accomodate known CORS proxy implementations:\n// - https://jcubic.pl/proxy.php?  <-- uses query string\n// - https://cors.isomorphic-git.org  <-- uses path\nconst corsProxify = (corsProxy, url) => corsProxy.endsWith('?') ? `${corsProxy}${url}` : `${corsProxy}/${url.replace(/^https?:\\/\\//, '')}`;\nconst updateHeaders = (headers, auth) => {\n  // Update the basic auth header\n  if (auth.username || auth.password) {\n    headers.Authorization = calculateBasicAuthHeader(auth);\n  }\n  // but any manually provided headers take precedence\n  if (auth.headers) {\n    Object.assign(headers, auth.headers);\n  }\n};\n\n/**\n * @param {GitHttpResponse} res\n *\n * @returns {{ preview: string, response: string, data: Buffer }}\n */\nconst stringifyBody = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator(function* (res) {\n    try {\n      // Some services provide a meaningful error message in the body of 403s like \"token lacks the scopes necessary to perform this action\"\n      const data = Buffer.from(yield collect(res.body));\n      const response = data.toString('utf8');\n      const preview = response.length < 256 ? response : response.slice(0, 256) + '...';\n      return {\n        preview,\n        response,\n        data\n      };\n    } catch (e) {\n      return {};\n    }\n  });\n  return function stringifyBody(_x58) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nclass GitRemoteHTTP {\n  static capabilities() {\n    return _asyncToGenerator(function* () {\n      return ['discover', 'connect'];\n    })();\n  }\n\n  /**\n   * @param {Object} args\n   * @param {HttpClient} args.http\n   * @param {ProgressCallback} [args.onProgress]\n   * @param {AuthCallback} [args.onAuth]\n   * @param {AuthFailureCallback} [args.onAuthFailure]\n   * @param {AuthSuccessCallback} [args.onAuthSuccess]\n   * @param {string} [args.corsProxy]\n   * @param {string} args.service\n   * @param {string} args.url\n   * @param {Object<string, string>} args.headers\n   * @param {1 | 2} args.protocolVersion - Git Protocol Version\n   */\n  static discover({\n    http,\n    onProgress,\n    onAuth,\n    onAuthSuccess,\n    onAuthFailure,\n    corsProxy,\n    service,\n    url: _origUrl,\n    headers,\n    protocolVersion\n  }) {\n    return _asyncToGenerator(function* () {\n      let {\n        url,\n        auth\n      } = extractAuthFromUrl(_origUrl);\n      const proxifiedURL = corsProxy ? corsProxify(corsProxy, url) : url;\n      if (auth.username || auth.password) {\n        headers.Authorization = calculateBasicAuthHeader(auth);\n      }\n      if (protocolVersion === 2) {\n        headers['Git-Protocol'] = 'version=2';\n      }\n      let res;\n      let tryAgain;\n      let providedAuthBefore = false;\n      do {\n        res = yield http.request({\n          onProgress,\n          method: 'GET',\n          url: `${proxifiedURL}/info/refs?service=${service}`,\n          headers\n        });\n\n        // the default loop behavior\n        tryAgain = false;\n\n        // 401 is the \"correct\" response for access denied. 203 is Non-Authoritative Information and comes from Azure DevOps, which\n        // apparently doesn't realize this is a git request and is returning the HTML for the \"Azure DevOps Services | Sign In\" page.\n        if (res.statusCode === 401 || res.statusCode === 203) {\n          // On subsequent 401s, call `onAuthFailure` instead of `onAuth`.\n          // This is so that naive `onAuth` callbacks that return a fixed value don't create an infinite loop of retrying.\n          const getAuth = providedAuthBefore ? onAuthFailure : onAuth;\n          if (getAuth) {\n            // Acquire credentials and try again\n            // TODO: read `useHttpPath` value from git config and pass along?\n            auth = yield getAuth(url, _objectSpread(_objectSpread({}, auth), {}, {\n              headers: _objectSpread({}, headers)\n            }));\n            if (auth && auth.cancel) {\n              throw new UserCanceledError();\n            } else if (auth) {\n              updateHeaders(headers, auth);\n              providedAuthBefore = true;\n              tryAgain = true;\n            }\n          }\n        } else if (res.statusCode === 200 && providedAuthBefore && onAuthSuccess) {\n          yield onAuthSuccess(url, auth);\n        }\n      } while (tryAgain);\n      if (res.statusCode !== 200) {\n        const {\n          response\n        } = yield stringifyBody(res);\n        throw new HttpError(res.statusCode, res.statusMessage, response);\n      }\n      // Git \"smart\" HTTP servers should respond with the correct Content-Type header.\n      if (res.headers['content-type'] === `application/x-${service}-advertisement`) {\n        const remoteHTTP = yield parseRefsAdResponse(res.body, {\n          service\n        });\n        remoteHTTP.auth = auth;\n        return remoteHTTP;\n      } else {\n        // If they don't send the correct content-type header, that's a good indicator it is either a \"dumb\" HTTP\n        // server, or the user specified an incorrect remote URL and the response is actually an HTML page.\n        // In this case, we save the response as plain text so we can generate a better error message if needed.\n        const {\n          preview,\n          response,\n          data\n        } = yield stringifyBody(res);\n        // For backwards compatibility, try to parse it anyway.\n        // TODO: maybe just throw instead of trying?\n        try {\n          const remoteHTTP = yield parseRefsAdResponse([data], {\n            service\n          });\n          remoteHTTP.auth = auth;\n          return remoteHTTP;\n        } catch (e) {\n          throw new SmartHttpError(preview, response);\n        }\n      }\n    })();\n  }\n\n  /**\n   * @param {Object} args\n   * @param {HttpClient} args.http\n   * @param {ProgressCallback} [args.onProgress]\n   * @param {string} [args.corsProxy]\n   * @param {string} args.service\n   * @param {string} args.url\n   * @param {Object<string, string>} [args.headers]\n   * @param {any} args.body\n   * @param {any} args.auth\n   */\n  static connect({\n    http,\n    onProgress,\n    corsProxy,\n    service,\n    url,\n    auth,\n    body,\n    headers\n  }) {\n    return _asyncToGenerator(function* () {\n      // We already have the \"correct\" auth value at this point, but\n      // we need to strip out the username/password from the URL yet again.\n      const urlAuth = extractAuthFromUrl(url);\n      if (urlAuth) url = urlAuth.url;\n      if (corsProxy) url = corsProxify(corsProxy, url);\n      headers['content-type'] = `application/x-${service}-request`;\n      headers.accept = `application/x-${service}-result`;\n      updateHeaders(headers, auth);\n      const res = yield http.request({\n        onProgress,\n        method: 'POST',\n        url: `${url}/${service}`,\n        body,\n        headers\n      });\n      if (res.statusCode !== 200) {\n        const {\n          response\n        } = stringifyBody(res);\n        throw new HttpError(res.statusCode, res.statusMessage, response);\n      }\n      return res;\n    })();\n  }\n}\nfunction parseRemoteUrl({\n  url\n}) {\n  // the stupid \"shorter scp-like syntax\"\n  if (url.startsWith('git@')) {\n    return {\n      transport: 'ssh',\n      address: url\n    };\n  }\n  const matches = url.match(/(\\w+)(:\\/\\/|::)(.*)/);\n  if (matches === null) return;\n  /*\n   * When git encounters a URL of the form <transport>://<address>, where <transport> is\n   * a protocol that it cannot handle natively, it automatically invokes git remote-<transport>\n   * with the full URL as the second argument.\n   *\n   * @see https://git-scm.com/docs/git-remote-helpers\n   */\n  if (matches[2] === '://') {\n    return {\n      transport: matches[1],\n      address: matches[0]\n    };\n  }\n  /*\n   * A URL of the form <transport>::<address> explicitly instructs git to invoke\n   * git remote-<transport> with <address> as the second argument.\n   *\n   * @see https://git-scm.com/docs/git-remote-helpers\n   */\n  if (matches[2] === '::') {\n    return {\n      transport: matches[1],\n      address: matches[3]\n    };\n  }\n}\nclass GitRemoteManager {\n  static getRemoteHelperFor({\n    url\n  }) {\n    // TODO: clean up the remoteHelper API and move into PluginCore\n    const remoteHelpers = new Map();\n    remoteHelpers.set('http', GitRemoteHTTP);\n    remoteHelpers.set('https', GitRemoteHTTP);\n    const parts = parseRemoteUrl({\n      url\n    });\n    if (!parts) {\n      throw new UrlParseError(url);\n    }\n    if (remoteHelpers.has(parts.transport)) {\n      return remoteHelpers.get(parts.transport);\n    }\n    throw new UnknownTransportError(url, parts.transport, parts.transport === 'ssh' ? translateSSHtoHTTP(url) : undefined);\n  }\n}\nlet lock$1 = null;\nclass GitShallowManager {\n  static read({\n    fs,\n    gitdir\n  }) {\n    return _asyncToGenerator(function* () {\n      if (lock$1 === null) lock$1 = new AsyncLock();\n      const filepath = join(gitdir, 'shallow');\n      const oids = new Set();\n      yield lock$1.acquire(filepath, /*#__PURE__*/_asyncToGenerator(function* () {\n        const text = yield fs.read(filepath, {\n          encoding: 'utf8'\n        });\n        if (text === null) return oids; // no file\n        if (text.trim() === '') return oids; // empty file\n        text.trim().split('\\n').map(oid => oids.add(oid));\n      }));\n      return oids;\n    })();\n  }\n  static write({\n    fs,\n    gitdir,\n    oids\n  }) {\n    return _asyncToGenerator(function* () {\n      if (lock$1 === null) lock$1 = new AsyncLock();\n      const filepath = join(gitdir, 'shallow');\n      if (oids.size > 0) {\n        const text = [...oids].join('\\n') + '\\n';\n        yield lock$1.acquire(filepath, /*#__PURE__*/_asyncToGenerator(function* () {\n          yield fs.write(filepath, text, {\n            encoding: 'utf8'\n          });\n        }));\n      } else {\n        // No shallows\n        yield lock$1.acquire(filepath, /*#__PURE__*/_asyncToGenerator(function* () {\n          yield fs.rm(filepath);\n        }));\n      }\n    })();\n  }\n}\nfunction hasObjectLoose(_x59) {\n  return _hasObjectLoose.apply(this, arguments);\n}\nfunction _hasObjectLoose() {\n  _hasObjectLoose = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    oid\n  }) {\n    const source = `objects/${oid.slice(0, 2)}/${oid.slice(2)}`;\n    return fs.exists(`${gitdir}/${source}`);\n  });\n  return _hasObjectLoose.apply(this, arguments);\n}\nfunction hasObjectPacked(_x60) {\n  return _hasObjectPacked.apply(this, arguments);\n}\nfunction _hasObjectPacked() {\n  _hasObjectPacked = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid,\n    getExternalRefDelta\n  }) {\n    // Check to see if it's in a packfile.\n    // Iterate through all the .idx files\n    let list = yield fs.readdir(join(gitdir, 'objects/pack'));\n    list = list.filter(x => x.endsWith('.idx'));\n    for (const filename of list) {\n      const indexFile = `${gitdir}/objects/pack/${filename}`;\n      const p = yield readPackIndex({\n        fs,\n        cache,\n        filename: indexFile,\n        getExternalRefDelta\n      });\n      if (p.error) throw new InternalError(p.error);\n      // If the packfile DOES have the oid we're looking for...\n      if (p.offsets.has(oid)) {\n        return true;\n      }\n    }\n    // Failed to find it\n    return false;\n  });\n  return _hasObjectPacked.apply(this, arguments);\n}\nfunction hasObject(_x61) {\n  return _hasObject.apply(this, arguments);\n} // TODO: make a function that just returns obCount. then emptyPackfile = () => sizePack(pack) === 0\nfunction _hasObject() {\n  _hasObject = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid,\n    format = 'content'\n  }) {\n    // Curry the current read method so that the packfile un-deltification\n    // process can acquire external ref-deltas.\n    const getExternalRefDelta = oid => _readObject({\n      fs,\n      cache,\n      gitdir,\n      oid\n    });\n\n    // Look for it in the loose object directory.\n    let result = yield hasObjectLoose({\n      fs,\n      gitdir,\n      oid\n    });\n    // Check to see if it's in a packfile.\n    if (!result) {\n      result = yield hasObjectPacked({\n        fs,\n        cache,\n        gitdir,\n        oid,\n        getExternalRefDelta\n      });\n    }\n    // Finally\n    return result;\n  });\n  return _hasObject.apply(this, arguments);\n}\nfunction emptyPackfile(pack) {\n  const pheader = '5041434b';\n  const version = '00000002';\n  const obCount = '00000000';\n  const header = pheader + version + obCount;\n  return pack.slice(0, 12).toString('hex') === header;\n}\nfunction filterCapabilities(server, client) {\n  const serverNames = server.map(cap => cap.split('=', 1)[0]);\n  return client.filter(cap => {\n    const name = cap.split('=', 1)[0];\n    return serverNames.includes(name);\n  });\n}\nconst pkg = {\n  name: 'isomorphic-git',\n  version: '1.7.8',\n  agent: 'git/isomorphic-git@1.7.8'\n};\nclass FIFO {\n  constructor() {\n    this._queue = [];\n  }\n  write(chunk) {\n    if (this._ended) {\n      throw Error('You cannot write to a FIFO that has already been ended!');\n    }\n    if (this._waiting) {\n      const resolve = this._waiting;\n      this._waiting = null;\n      resolve({\n        value: chunk\n      });\n    } else {\n      this._queue.push(chunk);\n    }\n  }\n  end() {\n    this._ended = true;\n    if (this._waiting) {\n      const resolve = this._waiting;\n      this._waiting = null;\n      resolve({\n        done: true\n      });\n    }\n  }\n  destroy(err) {\n    this._ended = true;\n    this.error = err;\n  }\n  next() {\n    var _this64 = this;\n    return _asyncToGenerator(function* () {\n      if (_this64._queue.length > 0) {\n        return {\n          value: _this64._queue.shift()\n        };\n      }\n      if (_this64._ended) {\n        return {\n          done: true\n        };\n      }\n      if (_this64._waiting) {\n        throw Error('You cannot call read until the previous call to read has returned!');\n      }\n      return new Promise(resolve => {\n        _this64._waiting = resolve;\n      });\n    })();\n  }\n}\n\n// Note: progress messages are designed to be written directly to the terminal,\n// so they are often sent with just a carriage return to overwrite the last line of output.\n// But there are also messages delimited with newlines.\n// I also include CRLF just in case.\nfunction findSplit(str) {\n  const r = str.indexOf('\\r');\n  const n = str.indexOf('\\n');\n  if (r === -1 && n === -1) return -1;\n  if (r === -1) return n + 1; // \\n\n  if (n === -1) return r + 1; // \\r\n  if (n === r + 1) return n + 1; // \\r\\n\n  return Math.min(r, n) + 1; // \\r or \\n\n}\nfunction splitLines(input) {\n  const output = new FIFO();\n  let tmp = '';\n  _asyncToGenerator(function* () {\n    yield forAwait(input, chunk => {\n      chunk = chunk.toString('utf8');\n      tmp += chunk;\n      while (true) {\n        const i = findSplit(tmp);\n        if (i === -1) break;\n        output.write(tmp.slice(0, i));\n        tmp = tmp.slice(i);\n      }\n    });\n    if (tmp.length > 0) {\n      output.write(tmp);\n    }\n    output.end();\n  })();\n  return output;\n}\n\n/*\nIf 'side-band' or 'side-band-64k' capabilities have been specified by\nthe client, the server will send the packfile data multiplexed.\n\nEach packet starting with the packet-line length of the amount of data\nthat follows, followed by a single byte specifying the sideband the\nfollowing data is coming in on.\n\nIn 'side-band' mode, it will send up to 999 data bytes plus 1 control\ncode, for a total of up to 1000 bytes in a pkt-line.  In 'side-band-64k'\nmode it will send up to 65519 data bytes plus 1 control code, for a\ntotal of up to 65520 bytes in a pkt-line.\n\nThe sideband byte will be a '1', '2' or a '3'. Sideband '1' will contain\npackfile data, sideband '2' will be used for progress information that the\nclient will generally print to stderr and sideband '3' is used for error\ninformation.\n\nIf no 'side-band' capability was specified, the server will stream the\nentire packfile without multiplexing.\n*/\n\nclass GitSideBand {\n  static demux(input) {\n    const read = GitPktLine.streamReader(input);\n    // And now for the ridiculous side-band or side-band-64k protocol\n    const packetlines = new FIFO();\n    const packfile = new FIFO();\n    const progress = new FIFO();\n    // TODO: Use a proper through stream?\n    const nextBit = /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator(function* () {\n        const line = yield read();\n        // Skip over flush packets\n        if (line === null) return nextBit();\n        // A made up convention to signal there's no more to read.\n        if (line === true) {\n          packetlines.end();\n          progress.end();\n          packfile.end();\n          return;\n        }\n        // Examine first byte to determine which output \"stream\" to use\n        switch (line[0]) {\n          case 1:\n            {\n              // pack data\n              packfile.write(line.slice(1));\n              break;\n            }\n          case 2:\n            {\n              // progress message\n              progress.write(line.slice(1));\n              break;\n            }\n          case 3:\n            {\n              // fatal error message just before stream aborts\n              const error = line.slice(1);\n              progress.write(error);\n              packfile.destroy(new Error(error.toString('utf8')));\n              return;\n            }\n          default:\n            {\n              // Not part of the side-band-64k protocol\n              packetlines.write(line.slice(0));\n            }\n        }\n        // Careful not to blow up the stack.\n        // I think Promises in a tail-call position should be OK.\n        nextBit();\n      });\n      return function nextBit() {\n        return _ref13.apply(this, arguments);\n      };\n    }();\n    nextBit();\n    return {\n      packetlines,\n      packfile,\n      progress\n    };\n  }\n  // static mux ({\n  //   protocol, // 'side-band' or 'side-band-64k'\n  //   packetlines,\n  //   packfile,\n  //   progress,\n  //   error\n  // }) {\n  //   const MAX_PACKET_LENGTH = protocol === 'side-band-64k' ? 999 : 65519\n  //   let output = new PassThrough()\n  //   packetlines.on('data', data => {\n  //     if (data === null) {\n  //       output.write(GitPktLine.flush())\n  //     } else {\n  //       output.write(GitPktLine.encode(data))\n  //     }\n  //   })\n  //   let packfileWasEmpty = true\n  //   let packfileEnded = false\n  //   let progressEnded = false\n  //   let errorEnded = false\n  //   let goodbye = Buffer.concat([\n  //     GitPktLine.encode(Buffer.from('010A', 'hex')),\n  //     GitPktLine.flush()\n  //   ])\n  //   packfile\n  //     .on('data', data => {\n  //       packfileWasEmpty = false\n  //       const buffers = splitBuffer(data, MAX_PACKET_LENGTH)\n  //       for (const buffer of buffers) {\n  //         output.write(\n  //           GitPktLine.encode(Buffer.concat([Buffer.from('01', 'hex'), buffer]))\n  //         )\n  //       }\n  //     })\n  //     .on('end', () => {\n  //       packfileEnded = true\n  //       if (!packfileWasEmpty) output.write(goodbye)\n  //       if (progressEnded && errorEnded) output.end()\n  //     })\n  //   progress\n  //     .on('data', data => {\n  //       const buffers = splitBuffer(data, MAX_PACKET_LENGTH)\n  //       for (const buffer of buffers) {\n  //         output.write(\n  //           GitPktLine.encode(Buffer.concat([Buffer.from('02', 'hex'), buffer]))\n  //         )\n  //       }\n  //     })\n  //     .on('end', () => {\n  //       progressEnded = true\n  //       if (packfileEnded && errorEnded) output.end()\n  //     })\n  //   error\n  //     .on('data', data => {\n  //       const buffers = splitBuffer(data, MAX_PACKET_LENGTH)\n  //       for (const buffer of buffers) {\n  //         output.write(\n  //           GitPktLine.encode(Buffer.concat([Buffer.from('03', 'hex'), buffer]))\n  //         )\n  //       }\n  //     })\n  //     .on('end', () => {\n  //       errorEnded = true\n  //       if (progressEnded && packfileEnded) output.end()\n  //     })\n  //   return output\n  // }\n}\nfunction parseUploadPackResponse(_x62) {\n  return _parseUploadPackResponse.apply(this, arguments);\n}\nfunction _parseUploadPackResponse() {\n  _parseUploadPackResponse = _asyncToGenerator(function* (stream) {\n    const {\n      packetlines,\n      packfile,\n      progress\n    } = GitSideBand.demux(stream);\n    const shallows = [];\n    const unshallows = [];\n    const acks = [];\n    let nak = false;\n    let done = false;\n    return new Promise((resolve, reject) => {\n      // Parse the response\n      forAwait(packetlines, data => {\n        const line = data.toString('utf8').trim();\n        if (line.startsWith('shallow')) {\n          const oid = line.slice(-41).trim();\n          if (oid.length !== 40) {\n            reject(new InvalidOidError(oid));\n          }\n          shallows.push(oid);\n        } else if (line.startsWith('unshallow')) {\n          const oid = line.slice(-41).trim();\n          if (oid.length !== 40) {\n            reject(new InvalidOidError(oid));\n          }\n          unshallows.push(oid);\n        } else if (line.startsWith('ACK')) {\n          const [, oid, status] = line.split(' ');\n          acks.push({\n            oid,\n            status\n          });\n          if (!status) done = true;\n        } else if (line.startsWith('NAK')) {\n          nak = true;\n          done = true;\n        }\n        if (done) {\n          resolve({\n            shallows,\n            unshallows,\n            acks,\n            nak,\n            packfile,\n            progress\n          });\n        }\n      });\n    });\n  });\n  return _parseUploadPackResponse.apply(this, arguments);\n}\nfunction writeUploadPackRequest({\n  capabilities = [],\n  wants = [],\n  haves = [],\n  shallows = [],\n  depth = null,\n  since = null,\n  exclude = []\n}) {\n  const packstream = [];\n  wants = [...new Set(wants)]; // remove duplicates\n  let firstLineCapabilities = ` ${capabilities.join(' ')}`;\n  for (const oid of wants) {\n    packstream.push(GitPktLine.encode(`want ${oid}${firstLineCapabilities}\\n`));\n    firstLineCapabilities = '';\n  }\n  for (const oid of shallows) {\n    packstream.push(GitPktLine.encode(`shallow ${oid}\\n`));\n  }\n  if (depth !== null) {\n    packstream.push(GitPktLine.encode(`deepen ${depth}\\n`));\n  }\n  if (since !== null) {\n    packstream.push(GitPktLine.encode(`deepen-since ${Math.floor(since.valueOf() / 1000)}\\n`));\n  }\n  for (const oid of exclude) {\n    packstream.push(GitPktLine.encode(`deepen-not ${oid}\\n`));\n  }\n  packstream.push(GitPktLine.flush());\n  for (const oid of haves) {\n    packstream.push(GitPktLine.encode(`have ${oid}\\n`));\n  }\n  packstream.push(GitPktLine.encode(`done\\n`));\n  return packstream;\n}\n\n// @ts-check\n\n/**\n *\n * @typedef {object} FetchResult - The object returned has the following schema:\n * @property {string | null} defaultBranch - The branch that is cloned if no branch is specified\n * @property {string | null} fetchHead - The SHA-1 object id of the fetched head commit\n * @property {string | null} fetchHeadDescription - a textual description of the branch that was fetched\n * @property {Object<string, string>} [headers] - The HTTP response headers returned by the git server\n * @property {string[]} [pruned] - A list of branches that were pruned, if you provided the `prune` parameter\n *\n */\n\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {HttpClient} args.http\n * @param {ProgressCallback} [args.onProgress]\n * @param {MessageCallback} [args.onMessage]\n * @param {AuthCallback} [args.onAuth]\n * @param {AuthFailureCallback} [args.onAuthFailure]\n * @param {AuthSuccessCallback} [args.onAuthSuccess]\n * @param {string} args.gitdir\n * @param {string|void} [args.url]\n * @param {string} [args.corsProxy]\n * @param {string} [args.ref]\n * @param {string} [args.remoteRef]\n * @param {string} [args.remote]\n * @param {boolean} [args.singleBranch = false]\n * @param {boolean} [args.tags = false]\n * @param {number} [args.depth]\n * @param {Date} [args.since]\n * @param {string[]} [args.exclude = []]\n * @param {boolean} [args.relative = false]\n * @param {Object<string, string>} [args.headers]\n * @param {boolean} [args.prune]\n * @param {boolean} [args.pruneTags]\n *\n * @returns {Promise<FetchResult>}\n * @see FetchResult\n */\nfunction _fetch(_x63) {\n  return _fetch2.apply(this, arguments);\n} // @ts-check\n/**\n * Initialize a new repository\n *\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} [args.dir]\n * @param {string} [args.gitdir]\n * @param {boolean} [args.bare = false]\n * @param {string} [args.defaultBranch = 'master']\n * @returns {Promise<void>}\n */\nfunction _fetch2() {\n  _fetch2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    http,\n    onProgress,\n    onMessage,\n    onAuth,\n    onAuthSuccess,\n    onAuthFailure,\n    gitdir,\n    ref: _ref,\n    remoteRef: _remoteRef,\n    remote: _remote,\n    url: _url,\n    corsProxy,\n    depth = null,\n    since = null,\n    exclude = [],\n    relative = false,\n    tags = false,\n    singleBranch = false,\n    headers = {},\n    prune = false,\n    pruneTags = false\n  }) {\n    const ref = _ref || (yield _currentBranch({\n      fs,\n      gitdir,\n      test: true\n    }));\n    const config = yield GitConfigManager.get({\n      fs,\n      gitdir\n    });\n    // Figure out what remote to use.\n    const remote = _remote || ref && (yield config.get(`branch.${ref}.remote`)) || 'origin';\n    // Lookup the URL for the given remote.\n    const url = _url || (yield config.get(`remote.${remote}.url`));\n    if (typeof url === 'undefined') {\n      throw new MissingParameterError('remote OR url');\n    }\n    // Figure out what remote ref to use.\n    const remoteRef = _remoteRef || ref && (yield config.get(`branch.${ref}.merge`)) || _ref || 'HEAD';\n    if (corsProxy === undefined) {\n      corsProxy = yield config.get('http.corsProxy');\n    }\n    const GitRemoteHTTP = GitRemoteManager.getRemoteHelperFor({\n      url\n    });\n    const remoteHTTP = yield GitRemoteHTTP.discover({\n      http,\n      onAuth,\n      onAuthSuccess,\n      onAuthFailure,\n      corsProxy,\n      service: 'git-upload-pack',\n      url,\n      headers,\n      protocolVersion: 1\n    });\n    const auth = remoteHTTP.auth; // hack to get new credentials from CredentialManager API\n    const remoteRefs = remoteHTTP.refs;\n    // For the special case of an empty repository with no refs, return null.\n    if (remoteRefs.size === 0) {\n      return {\n        defaultBranch: null,\n        fetchHead: null,\n        fetchHeadDescription: null\n      };\n    }\n    // Check that the remote supports the requested features\n    if (depth !== null && !remoteHTTP.capabilities.has('shallow')) {\n      throw new RemoteCapabilityError('shallow', 'depth');\n    }\n    if (since !== null && !remoteHTTP.capabilities.has('deepen-since')) {\n      throw new RemoteCapabilityError('deepen-since', 'since');\n    }\n    if (exclude.length > 0 && !remoteHTTP.capabilities.has('deepen-not')) {\n      throw new RemoteCapabilityError('deepen-not', 'exclude');\n    }\n    if (relative === true && !remoteHTTP.capabilities.has('deepen-relative')) {\n      throw new RemoteCapabilityError('deepen-relative', 'relative');\n    }\n    // Figure out the SHA for the requested ref\n    const {\n      oid,\n      fullref\n    } = GitRefManager.resolveAgainstMap({\n      ref: remoteRef,\n      map: remoteRefs\n    });\n    // Filter out refs we want to ignore: only keep ref we're cloning, HEAD, branches, and tags (if we're keeping them)\n    for (const remoteRef of remoteRefs.keys()) {\n      if (remoteRef === fullref || remoteRef === 'HEAD' || remoteRef.startsWith('refs/heads/') || tags && remoteRef.startsWith('refs/tags/')) {\n        continue;\n      }\n      remoteRefs.delete(remoteRef);\n    }\n    // Assemble the application/x-git-upload-pack-request\n    const capabilities = filterCapabilities([...remoteHTTP.capabilities], ['multi_ack_detailed', 'no-done', 'side-band-64k',\n    // Note: I removed 'thin-pack' option since our code doesn't \"fatten\" packfiles,\n    // which is necessary for compatibility with git. It was the cause of mysterious\n    // 'fatal: pack has [x] unresolved deltas' errors that plagued us for some time.\n    // isomorphic-git is perfectly happy with thin packfiles in .git/objects/pack but\n    // canonical git it turns out is NOT.\n    'ofs-delta', `agent=${pkg.agent}`]);\n    if (relative) capabilities.push('deepen-relative');\n    // Start figuring out which oids from the remote we want to request\n    const wants = singleBranch ? [oid] : remoteRefs.values();\n    // Come up with a reasonable list of oids to tell the remote we already have\n    // (preferably oids that are close ancestors of the branch heads we're fetching)\n    const haveRefs = singleBranch ? [ref] : yield GitRefManager.listRefs({\n      fs,\n      gitdir,\n      filepath: `refs`\n    });\n    let haves = [];\n    for (let ref of haveRefs) {\n      try {\n        ref = yield GitRefManager.expand({\n          fs,\n          gitdir,\n          ref\n        });\n        const oid = yield GitRefManager.resolve({\n          fs,\n          gitdir,\n          ref\n        });\n        if (yield hasObject({\n          fs,\n          cache,\n          gitdir,\n          oid\n        })) {\n          haves.push(oid);\n        }\n      } catch (err) {}\n    }\n    haves = [...new Set(haves)];\n    const oids = yield GitShallowManager.read({\n      fs,\n      gitdir\n    });\n    const shallows = remoteHTTP.capabilities.has('shallow') ? [...oids] : [];\n    const packstream = writeUploadPackRequest({\n      capabilities,\n      wants,\n      haves,\n      shallows,\n      depth,\n      since,\n      exclude\n    });\n    // CodeCommit will hang up if we don't send a Content-Length header\n    // so we can't stream the body.\n    const packbuffer = Buffer.from(yield collect(packstream));\n    const raw = yield GitRemoteHTTP.connect({\n      http,\n      onProgress,\n      corsProxy,\n      service: 'git-upload-pack',\n      url,\n      auth,\n      body: [packbuffer],\n      headers\n    });\n    const response = yield parseUploadPackResponse(raw.body);\n    if (raw.headers) {\n      response.headers = raw.headers;\n    }\n    // Apply all the 'shallow' and 'unshallow' commands\n    for (const oid of response.shallows) {\n      if (!oids.has(oid)) {\n        // this is in a try/catch mostly because my old test fixtures are missing objects\n        try {\n          // server says it's shallow, but do we have the parents?\n          const {\n            object\n          } = yield _readObject({\n            fs,\n            cache,\n            gitdir,\n            oid\n          });\n          const commit = new GitCommit(object);\n          const hasParents = yield Promise.all(commit.headers().parent.map(oid => hasObject({\n            fs,\n            cache,\n            gitdir,\n            oid\n          })));\n          const haveAllParents = hasParents.length === 0 || hasParents.every(has => has);\n          if (!haveAllParents) {\n            oids.add(oid);\n          }\n        } catch (err) {\n          oids.add(oid);\n        }\n      }\n    }\n    for (const oid of response.unshallows) {\n      oids.delete(oid);\n    }\n    yield GitShallowManager.write({\n      fs,\n      gitdir,\n      oids\n    });\n    // Update local remote refs\n    if (singleBranch) {\n      const refs = new Map([[fullref, oid]]);\n      // But wait, maybe it was a symref, like 'HEAD'!\n      // We need to save all the refs in the symref chain (sigh).\n      const symrefs = new Map();\n      let bail = 10;\n      let key = fullref;\n      while (bail--) {\n        const value = remoteHTTP.symrefs.get(key);\n        if (value === undefined) break;\n        symrefs.set(key, value);\n        key = value;\n      }\n      // final value must not be a symref but a real ref\n      const realRef = remoteRefs.get(key);\n      // There may be no ref at all if we've fetched a specific commit hash\n      if (realRef) {\n        refs.set(key, realRef);\n      }\n      const {\n        pruned\n      } = yield GitRefManager.updateRemoteRefs({\n        fs,\n        gitdir,\n        remote,\n        refs,\n        symrefs,\n        tags,\n        prune\n      });\n      if (prune) {\n        response.pruned = pruned;\n      }\n    } else {\n      const {\n        pruned\n      } = yield GitRefManager.updateRemoteRefs({\n        fs,\n        gitdir,\n        remote,\n        refs: remoteRefs,\n        symrefs: remoteHTTP.symrefs,\n        tags,\n        prune,\n        pruneTags\n      });\n      if (prune) {\n        response.pruned = pruned;\n      }\n    }\n    // We need this value later for the `clone` command.\n    response.HEAD = remoteHTTP.symrefs.get('HEAD');\n    // AWS CodeCommit doesn't list HEAD as a symref, but we can reverse engineer it\n    // Find the SHA of the branch called HEAD\n    if (response.HEAD === undefined) {\n      const {\n        oid\n      } = GitRefManager.resolveAgainstMap({\n        ref: 'HEAD',\n        map: remoteRefs\n      });\n      // Use the name of the first branch that's not called HEAD that has\n      // the same SHA as the branch called HEAD.\n      for (const [key, value] of remoteRefs.entries()) {\n        if (key !== 'HEAD' && value === oid) {\n          response.HEAD = key;\n          break;\n        }\n      }\n    }\n    const noun = fullref.startsWith('refs/tags') ? 'tag' : 'branch';\n    response.FETCH_HEAD = {\n      oid,\n      description: `${noun} '${abbreviateRef(fullref)}' of ${url}`\n    };\n    if (onProgress || onMessage) {\n      const lines = splitLines(response.progress);\n      forAwait(lines, /*#__PURE__*/function () {\n        var _ref30 = _asyncToGenerator(function* (line) {\n          if (onMessage) yield onMessage(line);\n          if (onProgress) {\n            const matches = line.match(/([^:]*).*\\((\\d+?)\\/(\\d+?)\\)/);\n            if (matches) {\n              yield onProgress({\n                phase: matches[1].trim(),\n                loaded: parseInt(matches[2], 10),\n                total: parseInt(matches[3], 10)\n              });\n            }\n          }\n        });\n        return function (_x190) {\n          return _ref30.apply(this, arguments);\n        };\n      }());\n    }\n    const packfile = Buffer.from(yield collect(response.packfile));\n    const packfileSha = packfile.slice(-20).toString('hex');\n    const res = {\n      defaultBranch: response.HEAD,\n      fetchHead: response.FETCH_HEAD.oid,\n      fetchHeadDescription: response.FETCH_HEAD.description\n    };\n    if (response.headers) {\n      res.headers = response.headers;\n    }\n    if (prune) {\n      res.pruned = response.pruned;\n    }\n    // This is a quick fix for the empty .git/objects/pack/pack-.pack file error,\n    // which due to the way `git-list-pack` works causes the program to hang when it tries to read it.\n    // TODO: Longer term, we should actually:\n    // a) NOT concatenate the entire packfile into memory (line 78),\n    // b) compute the SHA of the stream except for the last 20 bytes, using the same library used in push.js, and\n    // c) compare the computed SHA with the last 20 bytes of the stream before saving to disk, and throwing a \"packfile got corrupted during download\" error if the SHA doesn't match.\n    if (packfileSha !== '' && !emptyPackfile(packfile)) {\n      res.packfile = `objects/pack/pack-${packfileSha}.pack`;\n      const fullpath = join(gitdir, res.packfile);\n      yield fs.write(fullpath, packfile);\n      const getExternalRefDelta = oid => _readObject({\n        fs,\n        cache,\n        gitdir,\n        oid\n      });\n      const idx = yield GitPackIndex.fromPack({\n        pack: packfile,\n        getExternalRefDelta,\n        onProgress\n      });\n      yield fs.write(fullpath.replace(/\\.pack$/, '.idx'), yield idx.toBuffer());\n    }\n    return res;\n  });\n  return _fetch2.apply(this, arguments);\n}\nfunction _init(_x64) {\n  return _init2.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {object} args.cache\n * @param {HttpClient} args.http\n * @param {ProgressCallback} [args.onProgress]\n * @param {MessageCallback} [args.onMessage]\n * @param {AuthCallback} [args.onAuth]\n * @param {AuthFailureCallback} [args.onAuthFailure]\n * @param {AuthSuccessCallback} [args.onAuthSuccess]\n * @param {string} [args.dir]\n * @param {string} args.gitdir\n * @param {string} args.url\n * @param {string} args.corsProxy\n * @param {string} args.ref\n * @param {boolean} args.singleBranch\n * @param {boolean} args.noCheckout\n * @param {boolean} args.noTags\n * @param {string} args.remote\n * @param {number} args.depth\n * @param {Date} args.since\n * @param {string[]} args.exclude\n * @param {boolean} args.relative\n * @param {Object<string, string>} args.headers\n *\n * @returns {Promise<void>} Resolves successfully when clone completes\n *\n */\nfunction _init2() {\n  _init2 = _asyncToGenerator(function* ({\n    fs,\n    bare = false,\n    dir,\n    gitdir = bare ? dir : join(dir, '.git'),\n    defaultBranch = 'master'\n  }) {\n    // Don't overwrite an existing config\n    if (yield fs.exists(gitdir + '/config')) return;\n    let folders = ['hooks', 'info', 'objects/info', 'objects/pack', 'refs/heads', 'refs/tags'];\n    folders = folders.map(dir => gitdir + '/' + dir);\n    for (const folder of folders) {\n      yield fs.mkdir(folder);\n    }\n    yield fs.write(gitdir + '/config', '[core]\\n' + '\\trepositoryformatversion = 0\\n' + '\\tfilemode = false\\n' + `\\tbare = ${bare}\\n` + (bare ? '' : '\\tlogallrefupdates = true\\n') + '\\tsymlinks = false\\n' + '\\tignorecase = true\\n');\n    yield fs.write(gitdir + '/HEAD', `ref: refs/heads/${defaultBranch}\\n`);\n  });\n  return _init2.apply(this, arguments);\n}\nfunction _clone(_x65) {\n  return _clone2.apply(this, arguments);\n} // @ts-check\n/**\n * Clone a repository\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {HttpClient} args.http - an HTTP client\n * @param {ProgressCallback} [args.onProgress] - optional progress event callback\n * @param {MessageCallback} [args.onMessage] - optional message event callback\n * @param {AuthCallback} [args.onAuth] - optional auth fill callback\n * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback\n * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback\n * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.url - The URL of the remote repository\n * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Value is stored in the git config file for that repo.\n * @param {string} [args.ref] - Which branch to checkout. By default this is the designated \"main branch\" of the repository.\n * @param {boolean} [args.singleBranch = false] - Instead of the default behavior of fetching all the branches, only fetch a single branch.\n * @param {boolean} [args.noCheckout = false] - If true, clone will only fetch the repo, not check out a branch. Skipping checkout can save a lot of time normally spent writing files to disk.\n * @param {boolean} [args.noTags = false] - By default clone will fetch all tags. `noTags` disables that behavior.\n * @param {string} [args.remote = 'origin'] - What to name the remote that is created.\n * @param {number} [args.depth] - Integer. Determines how much of the git repository's history to retrieve\n * @param {Date} [args.since] - Only fetch commits created after the given date. Mutually exclusive with `depth`.\n * @param {string[]} [args.exclude = []] - A list of branches or tags. Instructs the remote server not to send us any commits reachable from these refs.\n * @param {boolean} [args.relative = false] - Changes the meaning of `depth` to be measured from the current shallow depth rather than from the branch tip.\n * @param {Object<string, string>} [args.headers = {}] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config\n *\n * @returns {Promise<void>} Resolves successfully when clone completes\n *\n * @example\n * await git.clone({\n *   fs,\n *   http,\n *   dir: '/tutorial',\n *   corsProxy: 'https://cors.isomorphic-git.org',\n *   url: 'https://github.com/isomorphic-git/isomorphic-git',\n *   singleBranch: true,\n *   depth: 1\n * })\n * console.log('done')\n *\n */\nfunction _clone2() {\n  _clone2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    http,\n    onProgress,\n    onMessage,\n    onAuth,\n    onAuthSuccess,\n    onAuthFailure,\n    dir,\n    gitdir,\n    url,\n    corsProxy,\n    ref,\n    remote,\n    depth,\n    since,\n    exclude,\n    relative,\n    singleBranch,\n    noCheckout,\n    noTags,\n    headers\n  }) {\n    yield _init({\n      fs,\n      gitdir\n    });\n    yield _addRemote({\n      fs,\n      gitdir,\n      remote,\n      url,\n      force: false\n    });\n    if (corsProxy) {\n      const config = yield GitConfigManager.get({\n        fs,\n        gitdir\n      });\n      yield config.set(`http.corsProxy`, corsProxy);\n      yield GitConfigManager.save({\n        fs,\n        gitdir,\n        config\n      });\n    }\n    const {\n      defaultBranch,\n      fetchHead\n    } = yield _fetch({\n      fs,\n      cache,\n      http,\n      onProgress,\n      onMessage,\n      onAuth,\n      onAuthSuccess,\n      onAuthFailure,\n      gitdir,\n      ref,\n      remote,\n      depth,\n      since,\n      exclude,\n      relative,\n      singleBranch,\n      headers,\n      tags: !noTags\n    });\n    if (fetchHead === null) return;\n    ref = ref || defaultBranch;\n    ref = ref.replace('refs/heads/', '');\n    // Checkout that branch\n    yield _checkout({\n      fs,\n      cache,\n      onProgress,\n      dir,\n      gitdir,\n      ref,\n      remote,\n      noCheckout\n    });\n  });\n  return _clone2.apply(this, arguments);\n}\nfunction clone(_x66) {\n  return _clone3.apply(this, arguments);\n} // @ts-check\n/**\n * Create a new commit\n *\n * @param {Object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {SignCallback} [args.onSign] - a PGP signing implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.message - The commit message to use.\n * @param {Object} [args.author] - The details about the author.\n * @param {string} [args.author.name] - Default is `user.name` config.\n * @param {string} [args.author.email] - Default is `user.email` config.\n * @param {number} [args.author.timestamp=Math.floor(Date.now()/1000)] - Set the author timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).\n * @param {number} [args.author.timezoneOffset] - Set the author timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.\n * @param {Object} [args.committer = author] - The details about the commit committer, in the same format as the author parameter. If not specified, the author details are used.\n * @param {string} [args.committer.name] - Default is `user.name` config.\n * @param {string} [args.committer.email] - Default is `user.email` config.\n * @param {number} [args.committer.timestamp=Math.floor(Date.now()/1000)] - Set the committer timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).\n * @param {number} [args.committer.timezoneOffset] - Set the committer timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.\n * @param {string} [args.signingKey] - Sign the tag object using this private PGP key.\n * @param {boolean} [args.dryRun = false] - If true, simulates making a commit so you can test whether it would succeed. Implies `noUpdateBranch`.\n * @param {boolean} [args.noUpdateBranch = false] - If true, does not update the branch pointer after creating the commit.\n * @param {string} [args.ref] - The fully expanded name of the branch to commit to. Default is the current branch pointed to by HEAD. (TODO: fix it so it can expand branch names without throwing if the branch doesn't exist yet.)\n * @param {string[]} [args.parent] - The SHA-1 object ids of the commits to use as parents. If not specified, the commit pointed to by `ref` is used.\n * @param {string} [args.tree] - The SHA-1 object id of the tree to use. If not specified, a new tree object is created from the current git index.\n *\n * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly created commit.\n *\n * @example\n * let sha = await git.commit({\n *   fs,\n *   dir: '/tutorial',\n *   author: {\n *     name: 'Mr. Test',\n *     email: 'mrtest@example.com',\n *   },\n *   message: 'Added the a.txt file'\n * })\n * console.log(sha)\n *\n */\nfunction _clone3() {\n  _clone3 = _asyncToGenerator(function* ({\n    fs,\n    http,\n    onProgress,\n    onMessage,\n    onAuth,\n    onAuthSuccess,\n    onAuthFailure,\n    dir,\n    gitdir = join(dir, '.git'),\n    url,\n    corsProxy = undefined,\n    ref = undefined,\n    remote = 'origin',\n    depth = undefined,\n    since = undefined,\n    exclude = [],\n    relative = false,\n    singleBranch = false,\n    noCheckout = false,\n    noTags = false,\n    headers = {}\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('http', http);\n      assertParameter('gitdir', gitdir);\n      if (!noCheckout) {\n        assertParameter('dir', dir);\n      }\n      assertParameter('url', url);\n      return yield _clone({\n        fs: new FileSystem(fs),\n        cache: {},\n        http,\n        onProgress,\n        onMessage,\n        onAuth,\n        onAuthSuccess,\n        onAuthFailure,\n        dir,\n        gitdir,\n        url,\n        corsProxy,\n        ref,\n        remote,\n        depth,\n        since,\n        exclude,\n        relative,\n        singleBranch,\n        noCheckout,\n        noTags,\n        headers\n      });\n    } catch (err) {\n      err.caller = 'git.clone';\n      throw err;\n    }\n  });\n  return _clone3.apply(this, arguments);\n}\nfunction commit(_x67) {\n  return _commit3.apply(this, arguments);\n} // @ts-check\n/**\n * Get the name of the branch currently pointed to by .git/HEAD\n *\n * @param {Object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {boolean} [args.fullname = false] - Return the full path (e.g. \"refs/heads/main\") instead of the abbreviated form.\n * @param {boolean} [args.test = false] - If the current branch doesn't actually exist (such as right after git init) then return `undefined`.\n *\n * @returns {Promise<string|void>} The name of the current branch or undefined if the HEAD is detached.\n *\n * @example\n * // Get the current branch name\n * let branch = await git.currentBranch({\n *   fs,\n *   dir: '/tutorial',\n *   fullname: false\n * })\n * console.log(branch)\n *\n */\nfunction _commit3() {\n  _commit3 = _asyncToGenerator(function* ({\n    fs: _fs,\n    onSign,\n    dir,\n    gitdir = join(dir, '.git'),\n    message,\n    author: _author,\n    committer: _committer,\n    signingKey,\n    dryRun = false,\n    noUpdateBranch = false,\n    ref,\n    parent,\n    tree\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('message', message);\n      if (signingKey) {\n        assertParameter('onSign', onSign);\n      }\n      const fs = new FileSystem(_fs);\n      const cache = {};\n      const author = yield normalizeAuthorObject({\n        fs,\n        gitdir,\n        author: _author\n      });\n      if (!author) throw new MissingNameError('author');\n      const committer = yield normalizeCommitterObject({\n        fs,\n        gitdir,\n        author,\n        committer: _committer\n      });\n      if (!committer) throw new MissingNameError('committer');\n      return yield _commit({\n        fs,\n        cache,\n        onSign,\n        gitdir,\n        message,\n        author,\n        committer,\n        signingKey,\n        dryRun,\n        noUpdateBranch,\n        ref,\n        parent,\n        tree\n      });\n    } catch (err) {\n      err.caller = 'git.commit';\n      throw err;\n    }\n  });\n  return _commit3.apply(this, arguments);\n}\nfunction currentBranch(_x68) {\n  return _currentBranch3.apply(this, arguments);\n} // @ts-check\n/**\n * @param {Object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.gitdir\n * @param {string} args.ref\n *\n * @returns {Promise<void>}\n */\nfunction _currentBranch3() {\n  _currentBranch3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    fullname = false,\n    test = false\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      return yield _currentBranch({\n        fs: new FileSystem(fs),\n        gitdir,\n        fullname,\n        test\n      });\n    } catch (err) {\n      err.caller = 'git.currentBranch';\n      throw err;\n    }\n  });\n  return _currentBranch3.apply(this, arguments);\n}\nfunction _deleteBranch(_x69) {\n  return _deleteBranch2.apply(this, arguments);\n} // @ts-check\n/**\n * Delete a local branch\n *\n * > Note: This only deletes loose branches - it should be fixed in the future to delete packed branches as well.\n *\n * @param {Object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.ref - The branch to delete\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.deleteBranch({ fs, dir: '/tutorial', ref: 'local-branch' })\n * console.log('done')\n *\n */\nfunction _deleteBranch2() {\n  _deleteBranch2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    ref\n  }) {\n    const exist = yield GitRefManager.exists({\n      fs,\n      gitdir,\n      ref\n    });\n    if (!exist) {\n      throw new NotFoundError(ref);\n    }\n    const fullRef = yield GitRefManager.expand({\n      fs,\n      gitdir,\n      ref\n    });\n    const currentRef = yield _currentBranch({\n      fs,\n      gitdir,\n      fullname: true\n    });\n    if (fullRef === currentRef) {\n      // detach HEAD\n      const value = yield GitRefManager.resolve({\n        fs,\n        gitdir,\n        ref: fullRef\n      });\n      yield GitRefManager.writeRef({\n        fs,\n        gitdir,\n        ref: 'HEAD',\n        value\n      });\n    }\n\n    // Delete a specified branch\n    yield GitRefManager.deleteRef({\n      fs,\n      gitdir,\n      ref: fullRef\n    });\n  });\n  return _deleteBranch2.apply(this, arguments);\n}\nfunction deleteBranch(_x70) {\n  return _deleteBranch3.apply(this, arguments);\n} // @ts-check\n/**\n * Delete a local ref\n *\n * @param {Object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.ref - The ref to delete\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.deleteRef({ fs, dir: '/tutorial', ref: 'refs/tags/test-tag' })\n * console.log('done')\n *\n */\nfunction _deleteBranch3() {\n  _deleteBranch3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('ref', ref);\n      return yield _deleteBranch({\n        fs: new FileSystem(fs),\n        gitdir,\n        ref\n      });\n    } catch (err) {\n      err.caller = 'git.deleteBranch';\n      throw err;\n    }\n  });\n  return _deleteBranch3.apply(this, arguments);\n}\nfunction deleteRef(_x71) {\n  return _deleteRef.apply(this, arguments);\n} // @ts-check\n/**\n * @param {Object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.gitdir\n * @param {string} args.remote\n *\n * @returns {Promise<void>}\n */\nfunction _deleteRef() {\n  _deleteRef = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('ref', ref);\n      yield GitRefManager.deleteRef({\n        fs: new FileSystem(fs),\n        gitdir,\n        ref\n      });\n    } catch (err) {\n      err.caller = 'git.deleteRef';\n      throw err;\n    }\n  });\n  return _deleteRef.apply(this, arguments);\n}\nfunction _deleteRemote(_x72) {\n  return _deleteRemote2.apply(this, arguments);\n} // @ts-check\n/**\n * Removes the local config entry for a given remote\n *\n * @param {Object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.remote - The name of the remote to delete\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.deleteRemote({ fs, dir: '/tutorial', remote: 'upstream' })\n * console.log('done')\n *\n */\nfunction _deleteRemote2() {\n  _deleteRemote2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    remote\n  }) {\n    const config = yield GitConfigManager.get({\n      fs,\n      gitdir\n    });\n    yield config.deleteSection('remote', remote);\n    yield GitConfigManager.save({\n      fs,\n      gitdir,\n      config\n    });\n  });\n  return _deleteRemote2.apply(this, arguments);\n}\nfunction deleteRemote(_x73) {\n  return _deleteRemote3.apply(this, arguments);\n} // @ts-check\n/**\n * Delete a local tag ref\n *\n * @param {Object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.gitdir\n * @param {string} args.ref - The tag to delete\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.deleteTag({ dir: '$input((/))', ref: '$input((test-tag))' })\n * console.log('done')\n *\n */\nfunction _deleteRemote3() {\n  _deleteRemote3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    remote\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('remote', remote);\n      return yield _deleteRemote({\n        fs: new FileSystem(fs),\n        gitdir,\n        remote\n      });\n    } catch (err) {\n      err.caller = 'git.deleteRemote';\n      throw err;\n    }\n  });\n  return _deleteRemote3.apply(this, arguments);\n}\nfunction _deleteTag(_x74) {\n  return _deleteTag2.apply(this, arguments);\n} // @ts-check\n/**\n * Delete a local tag ref\n *\n * @param {Object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.ref - The tag to delete\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.deleteTag({ fs, dir: '/tutorial', ref: 'test-tag' })\n * console.log('done')\n *\n */\nfunction _deleteTag2() {\n  _deleteTag2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    ref\n  }) {\n    ref = ref.startsWith('refs/tags/') ? ref : `refs/tags/${ref}`;\n    yield GitRefManager.deleteRef({\n      fs,\n      gitdir,\n      ref\n    });\n  });\n  return _deleteTag2.apply(this, arguments);\n}\nfunction deleteTag(_x75) {\n  return _deleteTag3.apply(this, arguments);\n}\nfunction _deleteTag3() {\n  _deleteTag3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('ref', ref);\n      return yield _deleteTag({\n        fs: new FileSystem(fs),\n        gitdir,\n        ref\n      });\n    } catch (err) {\n      err.caller = 'git.deleteTag';\n      throw err;\n    }\n  });\n  return _deleteTag3.apply(this, arguments);\n}\nfunction expandOidLoose(_x76) {\n  return _expandOidLoose.apply(this, arguments);\n}\nfunction _expandOidLoose() {\n  _expandOidLoose = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    oid: short\n  }) {\n    const prefix = short.slice(0, 2);\n    const objectsSuffixes = yield fs.readdir(`${gitdir}/objects/${prefix}`);\n    return objectsSuffixes.map(suffix => `${prefix}${suffix}`).filter(_oid => _oid.startsWith(short));\n  });\n  return _expandOidLoose.apply(this, arguments);\n}\nfunction expandOidPacked(_x77) {\n  return _expandOidPacked.apply(this, arguments);\n}\nfunction _expandOidPacked() {\n  _expandOidPacked = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid: short,\n    getExternalRefDelta\n  }) {\n    // Iterate through all the .pack files\n    const results = [];\n    let list = yield fs.readdir(join(gitdir, 'objects/pack'));\n    list = list.filter(x => x.endsWith('.idx'));\n    for (const filename of list) {\n      const indexFile = `${gitdir}/objects/pack/${filename}`;\n      const p = yield readPackIndex({\n        fs,\n        cache,\n        filename: indexFile,\n        getExternalRefDelta\n      });\n      if (p.error) throw new InternalError(p.error);\n      // Search through the list of oids in the packfile\n      for (const oid of p.offsets.keys()) {\n        if (oid.startsWith(short)) results.push(oid);\n      }\n    }\n    return results;\n  });\n  return _expandOidPacked.apply(this, arguments);\n}\nfunction _expandOid(_x78) {\n  return _expandOid2.apply(this, arguments);\n} // @ts-check\n/**\n * Expand and resolve a short oid into a full oid\n *\n * @param {Object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.oid - The shortened oid prefix to expand (like \"0414d2a\")\n *\n * @returns {Promise<string>} Resolves successfully with the full oid (like \"0414d2a286d7bbc7a4a326a61c1f9f888a8ab87f\")\n *\n * @example\n * let oid = await git.expandOid({ fs, dir: '/tutorial', oid: '0414d2a'})\n * console.log(oid)\n *\n */\nfunction _expandOid2() {\n  _expandOid2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid: short\n  }) {\n    // Curry the current read method so that the packfile un-deltification\n    // process can acquire external ref-deltas.\n    const getExternalRefDelta = oid => _readObject({\n      fs,\n      cache,\n      gitdir,\n      oid\n    });\n    const results1 = yield expandOidLoose({\n      fs,\n      gitdir,\n      oid: short\n    });\n    const results2 = yield expandOidPacked({\n      fs,\n      cache,\n      gitdir,\n      oid: short,\n      getExternalRefDelta\n    });\n    const results = results1.concat(results2);\n    if (results.length === 1) {\n      return results[0];\n    }\n    if (results.length > 1) {\n      throw new AmbiguousError('oids', short, results);\n    }\n    throw new NotFoundError(`an object matching \"${short}\"`);\n  });\n  return _expandOid2.apply(this, arguments);\n}\nfunction expandOid(_x79) {\n  return _expandOid3.apply(this, arguments);\n} // @ts-check\n/**\n * Expand an abbreviated ref to its full name\n *\n * @param {Object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.ref - The ref to expand (like \"v1.0.0\")\n *\n * @returns {Promise<string>} Resolves successfully with a full ref name (\"refs/tags/v1.0.0\")\n *\n * @example\n * let fullRef = await git.expandRef({ fs, dir: '/tutorial', ref: 'main'})\n * console.log(fullRef)\n *\n */\nfunction _expandOid3() {\n  _expandOid3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    oid\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('oid', oid);\n      return yield _expandOid({\n        fs: new FileSystem(fs),\n        cache: {},\n        gitdir,\n        oid\n      });\n    } catch (err) {\n      err.caller = 'git.expandOid';\n      throw err;\n    }\n  });\n  return _expandOid3.apply(this, arguments);\n}\nfunction expandRef(_x80) {\n  return _expandRef.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} args.gitdir\n * @param {string[]} args.oids\n *\n */\nfunction _expandRef() {\n  _expandRef = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('ref', ref);\n      return yield GitRefManager.expand({\n        fs: new FileSystem(fs),\n        gitdir,\n        ref\n      });\n    } catch (err) {\n      err.caller = 'git.expandRef';\n      throw err;\n    }\n  });\n  return _expandRef.apply(this, arguments);\n}\nfunction _findMergeBase(_x81) {\n  return _findMergeBase2.apply(this, arguments);\n}\nfunction _findMergeBase2() {\n  _findMergeBase2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oids\n  }) {\n    // Note: right now, the tests are geared so that the output should match that of\n    // `git merge-base --all --octopus`\n    // because without the --octopus flag, git's output seems to depend on the ORDER of the oids,\n    // and computing virtual merge bases is just too much for me to fathom right now.\n\n    // If we start N independent walkers, one at each of the given `oids`, and walk backwards\n    // through ancestors, eventually we'll discover a commit where each one of these N walkers\n    // has passed through. So we just need to keep track of which walkers have visited each commit\n    // until we find a commit that N distinct walkers has visited.\n    const visits = {};\n    const passes = oids.length;\n    let heads = oids.map((oid, index) => ({\n      index,\n      oid\n    }));\n    while (heads.length) {\n      // Count how many times we've passed each commit\n      const result = new Set();\n      for (const {\n        oid,\n        index\n      } of heads) {\n        if (!visits[oid]) visits[oid] = new Set();\n        visits[oid].add(index);\n        if (visits[oid].size === passes) {\n          result.add(oid);\n        }\n      }\n      if (result.size > 0) {\n        return [...result];\n      }\n      // We haven't found a common ancestor yet\n      const newheads = new Map();\n      for (const {\n        oid,\n        index\n      } of heads) {\n        try {\n          const {\n            object\n          } = yield _readObject({\n            fs,\n            cache,\n            gitdir,\n            oid\n          });\n          const commit = GitCommit.from(object);\n          const {\n            parent\n          } = commit.parseHeaders();\n          for (const oid of parent) {\n            if (!visits[oid] || !visits[oid].has(index)) {\n              newheads.set(oid + ':' + index, {\n                oid,\n                index\n              });\n            }\n          }\n        } catch (err) {\n          // do nothing\n        }\n      }\n      heads = Array.from(newheads.values());\n    }\n    return [];\n  });\n  return _findMergeBase2.apply(this, arguments);\n}\nconst LINEBREAKS = /^.*(\\r?\\n|$)/gm;\nfunction mergeFile({\n  ourContent,\n  baseContent,\n  theirContent,\n  ourName = 'ours',\n  baseName = 'base',\n  theirName = 'theirs',\n  format = 'diff',\n  markerSize = 7\n}) {\n  const ours = ourContent.match(LINEBREAKS);\n  const base = baseContent.match(LINEBREAKS);\n  const theirs = theirContent.match(LINEBREAKS);\n\n  // Here we let the diff3 library do the heavy lifting.\n  const result = diff3Merge(ours, base, theirs);\n\n  // Here we note whether there are conflicts and format the results\n  let mergedText = '';\n  let cleanMerge = true;\n  for (const item of result) {\n    if (item.ok) {\n      mergedText += item.ok.join('');\n    }\n    if (item.conflict) {\n      cleanMerge = false;\n      mergedText += `${'<'.repeat(markerSize)} ${ourName}\\n`;\n      mergedText += item.conflict.a.join('');\n      if (format === 'diff3') {\n        mergedText += `${'|'.repeat(markerSize)} ${baseName}\\n`;\n        mergedText += item.conflict.o.join('');\n      }\n      mergedText += `${'='.repeat(markerSize)}\\n`;\n      mergedText += item.conflict.b.join('');\n      mergedText += `${'>'.repeat(markerSize)} ${theirName}\\n`;\n    }\n  }\n  return {\n    cleanMerge,\n    mergedText\n  };\n}\n\n// @ts-check\n\n/**\n * Create a merged tree\n *\n * @param {Object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.ourOid - The SHA-1 object id of our tree\n * @param {string} args.baseOid - The SHA-1 object id of the base tree\n * @param {string} args.theirOid - The SHA-1 object id of their tree\n * @param {string} [args.ourName='ours'] - The name to use in conflicted files for our hunks\n * @param {string} [args.baseName='base'] - The name to use in conflicted files (in diff3 format) for the base hunks\n * @param {string} [args.theirName='theirs'] - The name to use in conflicted files for their hunks\n * @param {boolean} [args.dryRun=false]\n *\n * @returns {Promise<string>} - The SHA-1 object id of the merged tree\n *\n */\nfunction mergeTree(_x82) {\n  return _mergeTree.apply(this, arguments);\n}\n/**\n *\n * @param {WalkerEntry} entry\n * @param {WalkerEntry} base\n *\n */\nfunction _mergeTree() {\n  _mergeTree = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ourOid,\n    baseOid,\n    theirOid,\n    ourName = 'ours',\n    baseName = 'base',\n    theirName = 'theirs',\n    dryRun = false\n  }) {\n    const ourTree = TREE({\n      ref: ourOid\n    });\n    const baseTree = TREE({\n      ref: baseOid\n    });\n    const theirTree = TREE({\n      ref: theirOid\n    });\n    const results = yield _walk({\n      fs,\n      dir,\n      gitdir,\n      trees: [ourTree, baseTree, theirTree],\n      map: function () {\n        var _ref31 = _asyncToGenerator(function* (filepath, [ours, base, theirs]) {\n          const path = basename(filepath);\n          // What we did, what they did\n          const ourChange = yield modified(ours, base);\n          const theirChange = yield modified(theirs, base);\n          switch (`${ourChange}-${theirChange}`) {\n            case 'false-false':\n              {\n                return {\n                  mode: yield base.mode(),\n                  path,\n                  oid: yield base.oid(),\n                  type: yield base.type()\n                };\n              }\n            case 'false-true':\n              {\n                return theirs ? {\n                  mode: yield theirs.mode(),\n                  path,\n                  oid: yield theirs.oid(),\n                  type: yield theirs.type()\n                } : undefined;\n              }\n            case 'true-false':\n              {\n                return ours ? {\n                  mode: yield ours.mode(),\n                  path,\n                  oid: yield ours.oid(),\n                  type: yield ours.type()\n                } : undefined;\n              }\n            case 'true-true':\n              {\n                // Modifications\n                if (ours && base && theirs && (yield ours.type()) === 'blob' && (yield base.type()) === 'blob' && (yield theirs.type()) === 'blob') {\n                  return mergeBlobs({\n                    fs,\n                    gitdir,\n                    path,\n                    ours,\n                    base,\n                    theirs,\n                    ourName,\n                    baseName,\n                    theirName\n                  });\n                }\n                // all other types of conflicts fail\n                throw new MergeNotSupportedError();\n              }\n          }\n        });\n        return function map(_x191, _x192) {\n          return _ref31.apply(this, arguments);\n        };\n      }(),\n      /**\n       * @param {TreeEntry} [parent]\n       * @param {Array<TreeEntry>} children\n       */\n      reduce: function () {\n        var _ref32 = _asyncToGenerator(function* (parent, children) {\n          const entries = children.filter(Boolean); // remove undefineds\n\n          // automatically delete directories if they have been emptied\n          if (parent && parent.type === 'tree' && entries.length === 0) return;\n          if (entries.length > 0) {\n            const tree = new GitTree(entries);\n            const object = tree.toObject();\n            const oid = yield _writeObject({\n              fs,\n              gitdir,\n              type: 'tree',\n              object,\n              dryRun\n            });\n            parent.oid = oid;\n          }\n          return parent;\n        });\n        return function reduce(_x193, _x194) {\n          return _ref32.apply(this, arguments);\n        };\n      }()\n    });\n    return results.oid;\n  });\n  return _mergeTree.apply(this, arguments);\n}\nfunction modified(_x83, _x84) {\n  return _modified.apply(this, arguments);\n}\n/**\n *\n * @param {Object} args\n * @param {import('../models/FileSystem').FileSystem} args.fs\n * @param {string} args.gitdir\n * @param {string} args.path\n * @param {WalkerEntry} args.ours\n * @param {WalkerEntry} args.base\n * @param {WalkerEntry} args.theirs\n * @param {string} [args.ourName]\n * @param {string} [args.baseName]\n * @param {string} [args.theirName]\n * @param {string} [args.format]\n * @param {number} [args.markerSize]\n * @param {boolean} [args.dryRun = false]\n *\n */\nfunction _modified() {\n  _modified = _asyncToGenerator(function* (entry, base) {\n    if (!entry && !base) return false;\n    if (entry && !base) return true;\n    if (!entry && base) return true;\n    if ((yield entry.type()) === 'tree' && (yield base.type()) === 'tree') {\n      return false;\n    }\n    if ((yield entry.type()) === (yield base.type()) && (yield entry.mode()) === (yield base.mode()) && (yield entry.oid()) === (yield base.oid())) {\n      return false;\n    }\n    return true;\n  });\n  return _modified.apply(this, arguments);\n}\nfunction mergeBlobs(_x85) {\n  return _mergeBlobs.apply(this, arguments);\n} // @ts-check\n// import diff3 from 'node-diff3'\n/**\n *\n * @typedef {Object} MergeResult - Returns an object with a schema like this:\n * @property {string} [oid] - The SHA-1 object id that is now at the head of the branch. Absent only if `dryRun` was specified and `mergeCommit` is true.\n * @property {boolean} [alreadyMerged] - True if the branch was already merged so no changes were made\n * @property {boolean} [fastForward] - True if it was a fast-forward merge\n * @property {boolean} [mergeCommit] - True if merge resulted in a merge commit\n * @property {string} [tree] - The SHA-1 object id of the tree resulting from a merge commit\n *\n */\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {object} args.cache\n * @param {string} args.gitdir\n * @param {string} [args.ours]\n * @param {string} args.theirs\n * @param {boolean} args.fastForwardOnly\n * @param {boolean} args.dryRun\n * @param {boolean} args.noUpdateBranch\n * @param {string} [args.message]\n * @param {Object} args.author\n * @param {string} args.author.name\n * @param {string} args.author.email\n * @param {number} args.author.timestamp\n * @param {number} args.author.timezoneOffset\n * @param {Object} args.committer\n * @param {string} args.committer.name\n * @param {string} args.committer.email\n * @param {number} args.committer.timestamp\n * @param {number} args.committer.timezoneOffset\n * @param {string} [args.signingKey]\n *\n * @returns {Promise<MergeResult>} Resolves to a description of the merge operation\n *\n */\nfunction _mergeBlobs() {\n  _mergeBlobs = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    path,\n    ours,\n    base,\n    theirs,\n    ourName,\n    theirName,\n    baseName,\n    format,\n    markerSize,\n    dryRun\n  }) {\n    const type = 'blob';\n    // Compute the new mode.\n    // Since there are ONLY two valid blob modes ('100755' and '100644') it boils down to this\n    const mode = (yield base.mode()) === (yield ours.mode()) ? yield theirs.mode() : yield ours.mode();\n    // The trivial case: nothing to merge except maybe mode\n    if ((yield ours.oid()) === (yield theirs.oid())) {\n      return {\n        mode,\n        path,\n        oid: yield ours.oid(),\n        type\n      };\n    }\n    // if only one side made oid changes, return that side's oid\n    if ((yield ours.oid()) === (yield base.oid())) {\n      return {\n        mode,\n        path,\n        oid: yield theirs.oid(),\n        type\n      };\n    }\n    if ((yield theirs.oid()) === (yield base.oid())) {\n      return {\n        mode,\n        path,\n        oid: yield ours.oid(),\n        type\n      };\n    }\n    // if both sides made changes do a merge\n    const {\n      mergedText,\n      cleanMerge\n    } = mergeFile({\n      ourContent: Buffer.from(yield ours.content()).toString('utf8'),\n      baseContent: Buffer.from(yield base.content()).toString('utf8'),\n      theirContent: Buffer.from(yield theirs.content()).toString('utf8'),\n      ourName,\n      theirName,\n      baseName,\n      format,\n      markerSize\n    });\n    if (!cleanMerge) {\n      // all other types of conflicts fail\n      throw new MergeNotSupportedError();\n    }\n    const oid = yield _writeObject({\n      fs,\n      gitdir,\n      type: 'blob',\n      object: Buffer.from(mergedText, 'utf8'),\n      dryRun\n    });\n    return {\n      mode,\n      path,\n      oid,\n      type\n    };\n  });\n  return _mergeBlobs.apply(this, arguments);\n}\nfunction _merge(_x86) {\n  return _merge2.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {object} args.cache\n * @param {HttpClient} args.http\n * @param {ProgressCallback} [args.onProgress]\n * @param {MessageCallback} [args.onMessage]\n * @param {AuthCallback} [args.onAuth]\n * @param {AuthFailureCallback} [args.onAuthFailure]\n * @param {AuthSuccessCallback} [args.onAuthSuccess]\n * @param {string} args.dir\n * @param {string} args.gitdir\n * @param {string} args.ref\n * @param {string} [args.url]\n * @param {string} [args.remote]\n * @param {string} [args.remoteRef]\n * @param {string} [args.corsProxy]\n * @param {boolean} args.singleBranch\n * @param {boolean} args.fastForwardOnly\n * @param {Object<string, string>} [args.headers]\n * @param {Object} args.author\n * @param {string} args.author.name\n * @param {string} args.author.email\n * @param {number} args.author.timestamp\n * @param {number} args.author.timezoneOffset\n * @param {Object} args.committer\n * @param {string} args.committer.name\n * @param {string} args.committer.email\n * @param {number} args.committer.timestamp\n * @param {number} args.committer.timezoneOffset\n * @param {string} [args.signingKey]\n *\n * @returns {Promise<void>} Resolves successfully when pull operation completes\n *\n */\nfunction _merge2() {\n  _merge2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    ours,\n    theirs,\n    fastForwardOnly = false,\n    dryRun = false,\n    noUpdateBranch = false,\n    message,\n    author,\n    committer,\n    signingKey\n  }) {\n    if (ours === undefined) {\n      ours = yield _currentBranch({\n        fs,\n        gitdir,\n        fullname: true\n      });\n    }\n    ours = yield GitRefManager.expand({\n      fs,\n      gitdir,\n      ref: ours\n    });\n    theirs = yield GitRefManager.expand({\n      fs,\n      gitdir,\n      ref: theirs\n    });\n    const ourOid = yield GitRefManager.resolve({\n      fs,\n      gitdir,\n      ref: ours\n    });\n    const theirOid = yield GitRefManager.resolve({\n      fs,\n      gitdir,\n      ref: theirs\n    });\n    // find most recent common ancestor of ref a and ref b\n    const baseOids = yield _findMergeBase({\n      fs,\n      cache,\n      gitdir,\n      oids: [ourOid, theirOid]\n    });\n    if (baseOids.length !== 1) {\n      throw new MergeNotSupportedError();\n    }\n    const baseOid = baseOids[0];\n    // handle fast-forward case\n    if (baseOid === theirOid) {\n      return {\n        oid: ourOid,\n        alreadyMerged: true\n      };\n    }\n    if (baseOid === ourOid) {\n      if (!dryRun && !noUpdateBranch) {\n        yield GitRefManager.writeRef({\n          fs,\n          gitdir,\n          ref: 'ORIG_HEAD',\n          value: ourOid\n        });\n        yield GitRefManager.writeRef({\n          fs,\n          gitdir,\n          ref: ours,\n          value: theirOid\n        });\n      }\n      return {\n        oid: theirOid,\n        fastForward: true\n      };\n    } else {\n      // not a simple fast-forward\n      if (fastForwardOnly) {\n        throw new FastForwardError();\n      }\n      // try a fancier merge\n      const tree = yield mergeTree({\n        fs,\n        gitdir,\n        ourOid,\n        theirOid,\n        baseOid,\n        ourName: ours,\n        baseName: 'base',\n        theirName: theirs,\n        dryRun\n      });\n      if (!message) {\n        message = `Merge branch '${abbreviateRef(theirs)}' into ${abbreviateRef(ours)}`;\n      }\n      yield GitRefManager.writeRef({\n        fs,\n        gitdir,\n        ref: 'ORIG_HEAD',\n        value: ourOid\n      });\n      const oid = yield _commit({\n        fs,\n        cache,\n        gitdir,\n        message,\n        ref: ours,\n        tree,\n        parent: [ourOid, theirOid],\n        author,\n        committer,\n        signingKey,\n        dryRun,\n        noUpdateBranch\n      });\n      return {\n        oid,\n        tree,\n        mergeCommit: true\n      };\n    }\n  });\n  return _merge2.apply(this, arguments);\n}\nfunction _pull(_x87) {\n  return _pull2.apply(this, arguments);\n} // @ts-check\n/**\n * Like `pull`, but hard-coded with `fastForward: true` so there is no need for an `author` parameter.\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {HttpClient} args.http - an HTTP client\n * @param {ProgressCallback} [args.onProgress] - optional progress event callback\n * @param {MessageCallback} [args.onMessage] - optional message event callback\n * @param {AuthCallback} [args.onAuth] - optional auth fill callback\n * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback\n * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback\n * @param {string} args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.ref] - Which branch to merge into. By default this is the currently checked out branch.\n * @param {string} [args.url] - (Added in 1.1.0) The URL of the remote repository. The default is the value set in the git config for that remote.\n * @param {string} [args.remote] - (Added in 1.1.0) If URL is not specified, determines which remote to use.\n * @param {string} [args.remoteRef] - (Added in 1.1.0) The name of the branch on the remote to fetch. By default this is the configured remote tracking branch.\n * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.\n * @param {boolean} [args.singleBranch = false] - Instead of the default behavior of fetching all the branches, only fetch a single branch.\n * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config\n *\n * @returns {Promise<void>} Resolves successfully when pull operation completes\n *\n * @example\n * await git.fastForward({\n *   fs,\n *   http,\n *   dir: '/tutorial',\n *   ref: 'main',\n *   singleBranch: true\n * })\n * console.log('done')\n *\n */\nfunction _pull2() {\n  _pull2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    http,\n    onProgress,\n    onMessage,\n    onAuth,\n    onAuthSuccess,\n    onAuthFailure,\n    dir,\n    gitdir,\n    ref,\n    url,\n    remote,\n    remoteRef,\n    fastForwardOnly,\n    corsProxy,\n    singleBranch,\n    headers,\n    author,\n    committer,\n    signingKey\n  }) {\n    try {\n      // If ref is undefined, use 'HEAD'\n      if (!ref) {\n        const head = yield _currentBranch({\n          fs,\n          gitdir\n        });\n        // TODO: use a better error.\n        if (!head) {\n          throw new MissingParameterError('ref');\n        }\n        ref = head;\n      }\n      const {\n        fetchHead,\n        fetchHeadDescription\n      } = yield _fetch({\n        fs,\n        cache,\n        http,\n        onProgress,\n        onMessage,\n        onAuth,\n        onAuthSuccess,\n        onAuthFailure,\n        gitdir,\n        corsProxy,\n        ref,\n        url,\n        remote,\n        remoteRef,\n        singleBranch,\n        headers\n      });\n      // Merge the remote tracking branch into the local one.\n      yield _merge({\n        fs,\n        cache,\n        gitdir,\n        ours: ref,\n        theirs: fetchHead,\n        fastForwardOnly,\n        message: `Merge ${fetchHeadDescription}`,\n        author,\n        committer,\n        signingKey,\n        dryRun: false,\n        noUpdateBranch: false\n      });\n      yield _checkout({\n        fs,\n        cache,\n        onProgress,\n        dir,\n        gitdir,\n        ref,\n        currentHead: 'ORIG_HEAD',\n        remote,\n        noCheckout: false\n      });\n    } catch (err) {\n      err.caller = 'git.pull';\n      throw err;\n    }\n  });\n  return _pull2.apply(this, arguments);\n}\nfunction fastForward(_x88) {\n  return _fastForward.apply(this, arguments);\n} // @ts-check\n/**\n *\n * @typedef {object} FetchResult - The object returned has the following schema:\n * @property {string | null} defaultBranch - The branch that is cloned if no branch is specified\n * @property {string | null} fetchHead - The SHA-1 object id of the fetched head commit\n * @property {string | null} fetchHeadDescription - a textual description of the branch that was fetched\n * @property {Object<string, string>} [headers] - The HTTP response headers returned by the git server\n * @property {string[]} [pruned] - A list of branches that were pruned, if you provided the `prune` parameter\n *\n */\n/**\n * Fetch commits from a remote repository\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {HttpClient} args.http - an HTTP client\n * @param {ProgressCallback} [args.onProgress] - optional progress event callback\n * @param {MessageCallback} [args.onMessage] - optional message event callback\n * @param {AuthCallback} [args.onAuth] - optional auth fill callback\n * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback\n * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.url] - The URL of the remote repository. The default is the value set in the git config for that remote.\n * @param {string} [args.remote] - If URL is not specified, determines which remote to use.\n * @param {boolean} [args.singleBranch = false] - Instead of the default behavior of fetching all the branches, only fetch a single branch.\n * @param {string} [args.ref] - Which branch to fetch if `singleBranch` is true. By default this is the current branch or the remote's default branch.\n * @param {string} [args.remoteRef] - The name of the branch on the remote to fetch if `singleBranch` is true. By default this is the configured remote tracking branch.\n * @param {boolean} [args.tags = false] - Also fetch tags\n * @param {number} [args.depth] - Integer. Determines how much of the git repository's history to retrieve\n * @param {boolean} [args.relative = false] - Changes the meaning of `depth` to be measured from the current shallow depth rather than from the branch tip.\n * @param {Date} [args.since] - Only fetch commits created after the given date. Mutually exclusive with `depth`.\n * @param {string[]} [args.exclude = []] - A list of branches or tags. Instructs the remote server not to send us any commits reachable from these refs.\n * @param {boolean} [args.prune] - Delete local remote-tracking branches that are not present on the remote\n * @param {boolean} [args.pruneTags] - Prune local tags that don’t exist on the remote, and force-update those tags that differ\n * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.\n * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config\n *\n * @returns {Promise<FetchResult>} Resolves successfully when fetch completes\n * @see FetchResult\n *\n * @example\n * let result = await git.fetch({\n *   fs,\n *   http,\n *   dir: '/tutorial',\n *   corsProxy: 'https://cors.isomorphic-git.org',\n *   url: 'https://github.com/isomorphic-git/isomorphic-git',\n *   ref: 'main',\n *   depth: 1,\n *   singleBranch: true,\n *   tags: false\n * })\n * console.log(result)\n *\n */\nfunction _fastForward() {\n  _fastForward = _asyncToGenerator(function* ({\n    fs,\n    http,\n    onProgress,\n    onMessage,\n    onAuth,\n    onAuthSuccess,\n    onAuthFailure,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref,\n    url,\n    remote,\n    remoteRef,\n    corsProxy,\n    singleBranch,\n    headers = {}\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('http', http);\n      assertParameter('gitdir', gitdir);\n      const thisWillNotBeUsed = {\n        name: '',\n        email: '',\n        timestamp: Date.now(),\n        timezoneOffset: 0\n      };\n      return yield _pull({\n        fs: new FileSystem(fs),\n        cache: {},\n        http,\n        onProgress,\n        onMessage,\n        onAuth,\n        onAuthSuccess,\n        onAuthFailure,\n        dir,\n        gitdir,\n        ref,\n        url,\n        remote,\n        remoteRef,\n        fastForwardOnly: true,\n        corsProxy,\n        singleBranch,\n        headers,\n        author: thisWillNotBeUsed,\n        committer: thisWillNotBeUsed\n      });\n    } catch (err) {\n      err.caller = 'git.fastForward';\n      throw err;\n    }\n  });\n  return _fastForward.apply(this, arguments);\n}\nfunction fetch(_x89) {\n  return _fetch3.apply(this, arguments);\n} // @ts-check\n/**\n * Find the merge base for a set of commits\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string[]} args.oids - Which commits\n *\n */\nfunction _fetch3() {\n  _fetch3 = _asyncToGenerator(function* ({\n    fs,\n    http,\n    onProgress,\n    onMessage,\n    onAuth,\n    onAuthSuccess,\n    onAuthFailure,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref,\n    remote,\n    remoteRef,\n    url,\n    corsProxy,\n    depth = null,\n    since = null,\n    exclude = [],\n    relative = false,\n    tags = false,\n    singleBranch = false,\n    headers = {},\n    prune = false,\n    pruneTags = false\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('http', http);\n      assertParameter('gitdir', gitdir);\n      return yield _fetch({\n        fs: new FileSystem(fs),\n        cache: {},\n        http,\n        onProgress,\n        onMessage,\n        onAuth,\n        onAuthSuccess,\n        onAuthFailure,\n        gitdir,\n        ref,\n        remote,\n        remoteRef,\n        url,\n        corsProxy,\n        depth,\n        since,\n        exclude,\n        relative,\n        tags,\n        singleBranch,\n        headers,\n        prune,\n        pruneTags\n      });\n    } catch (err) {\n      err.caller = 'git.fetch';\n      throw err;\n    }\n  });\n  return _fetch3.apply(this, arguments);\n}\nfunction findMergeBase(_x90) {\n  return _findMergeBase3.apply(this, arguments);\n} // @ts-check\n/**\n * Find the root git directory\n *\n * Starting at `filepath`, walks upward until it finds a directory that contains a subdirectory called '.git'.\n *\n * @param {Object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.filepath\n *\n * @returns {Promise<string>} Resolves successfully with a root git directory path\n */\nfunction _findMergeBase3() {\n  _findMergeBase3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    oids\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('oids', oids);\n      return yield _findMergeBase({\n        fs: new FileSystem(fs),\n        cache: {},\n        gitdir,\n        oids\n      });\n    } catch (err) {\n      err.caller = 'git.findMergeBase';\n      throw err;\n    }\n  });\n  return _findMergeBase3.apply(this, arguments);\n}\nfunction _findRoot(_x91) {\n  return _findRoot2.apply(this, arguments);\n} // @ts-check\n/**\n * Find the root git directory\n *\n * Starting at `filepath`, walks upward until it finds a directory that contains a subdirectory called '.git'.\n *\n * @param {Object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} args.filepath - The file directory to start searching in.\n *\n * @returns {Promise<string>} Resolves successfully with a root git directory path\n * @throws {NotFoundError}\n *\n * @example\n * let gitroot = await git.findRoot({\n *   fs,\n *   filepath: '/tutorial/src/utils'\n * })\n * console.log(gitroot)\n *\n */\nfunction _findRoot2() {\n  _findRoot2 = _asyncToGenerator(function* ({\n    fs,\n    filepath\n  }) {\n    if (yield fs.exists(join(filepath, '.git'))) {\n      return filepath;\n    } else {\n      const parent = dirname(filepath);\n      if (parent === filepath) {\n        throw new NotFoundError(`git root for ${filepath}`);\n      }\n      return _findRoot({\n        fs,\n        filepath: parent\n      });\n    }\n  });\n  return _findRoot2.apply(this, arguments);\n}\nfunction findRoot(_x92) {\n  return _findRoot3.apply(this, arguments);\n} // @ts-check\n/**\n * Read an entry from the git config files.\n *\n * *Caveats:*\n * - Currently only the local `$GIT_DIR/config` file can be read or written. However support for the global `~/.gitconfig` and system `$(prefix)/etc/gitconfig` will be added in the future.\n * - The current parser does not support the more exotic features of the git-config file format such as `[include]` and `[includeIf]`.\n *\n * @param {Object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.path - The key of the git config entry\n *\n * @returns {Promise<any>} Resolves with the config value\n *\n * @example\n * // Read config value\n * let value = await git.getConfig({\n *   fs,\n *   dir: '/tutorial',\n *   path: 'remote.origin.url'\n * })\n * console.log(value)\n *\n */\nfunction _findRoot3() {\n  _findRoot3 = _asyncToGenerator(function* ({\n    fs,\n    filepath\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('filepath', filepath);\n      return yield _findRoot({\n        fs: new FileSystem(fs),\n        filepath\n      });\n    } catch (err) {\n      err.caller = 'git.findRoot';\n      throw err;\n    }\n  });\n  return _findRoot3.apply(this, arguments);\n}\nfunction getConfig(_x93) {\n  return _getConfig3.apply(this, arguments);\n} // @ts-check\n/**\n * @param {Object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.gitdir\n * @param {string} args.path\n *\n * @returns {Promise<Array<any>>} Resolves with an array of the config value\n *\n */\nfunction _getConfig3() {\n  _getConfig3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    path\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('path', path);\n      return yield _getConfig({\n        fs: new FileSystem(fs),\n        gitdir,\n        path\n      });\n    } catch (err) {\n      err.caller = 'git.getConfig';\n      throw err;\n    }\n  });\n  return _getConfig3.apply(this, arguments);\n}\nfunction _getConfigAll(_x94) {\n  return _getConfigAll2.apply(this, arguments);\n} // @ts-check\n/**\n * Read a multi-valued entry from the git config files.\n *\n * *Caveats:*\n * - Currently only the local `$GIT_DIR/config` file can be read or written. However support for the global `~/.gitconfig` and system `$(prefix)/etc/gitconfig` will be added in the future.\n * - The current parser does not support the more exotic features of the git-config file format such as `[include]` and `[includeIf]`.\n *\n * @param {Object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.path - The key of the git config entry\n *\n * @returns {Promise<Array<any>>} Resolves with the config value\n *\n */\nfunction _getConfigAll2() {\n  _getConfigAll2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    path\n  }) {\n    const config = yield GitConfigManager.get({\n      fs,\n      gitdir\n    });\n    return config.getall(path);\n  });\n  return _getConfigAll2.apply(this, arguments);\n}\nfunction getConfigAll(_x95) {\n  return _getConfigAll3.apply(this, arguments);\n} // @ts-check\n/**\n *\n * @typedef {Object} GetRemoteInfoResult - The object returned has the following schema:\n * @property {string[]} capabilities - The list of capabilities returned by the server (part of the Git protocol)\n * @property {Object} [refs]\n * @property {Object<string, string>} [refs.heads] - The branches on the remote\n * @property {Object<string, string>} [refs.pull] - The special branches representing pull requests (non-standard)\n * @property {Object<string, string>} [refs.tags] - The tags on the remote\n *\n */\n/**\n * List a remote servers branches, tags, and capabilities.\n *\n * This is a rare command that doesn't require an `fs`, `dir`, or even `gitdir` argument.\n * It just communicates to a remote git server, using the first step of the `git-upload-pack` handshake, but stopping short of fetching the packfile.\n *\n * @param {object} args\n * @param {HttpClient} args.http - an HTTP client\n * @param {AuthCallback} [args.onAuth] - optional auth fill callback\n * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback\n * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback\n * @param {string} args.url - The URL of the remote repository. Will be gotten from gitconfig if absent.\n * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.\n * @param {boolean} [args.forPush = false] - By default, the command queries the 'fetch' capabilities. If true, it will ask for the 'push' capabilities.\n * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config\n *\n * @returns {Promise<GetRemoteInfoResult>} Resolves successfully with an object listing the branches, tags, and capabilities of the remote.\n * @see GetRemoteInfoResult\n *\n * @example\n * let info = await git.getRemoteInfo({\n *   http,\n *   url:\n *     \"https://cors.isomorphic-git.org/github.com/isomorphic-git/isomorphic-git.git\"\n * });\n * console.log(info);\n *\n */\nfunction _getConfigAll3() {\n  _getConfigAll3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    path\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('path', path);\n      return yield _getConfigAll({\n        fs: new FileSystem(fs),\n        gitdir,\n        path\n      });\n    } catch (err) {\n      err.caller = 'git.getConfigAll';\n      throw err;\n    }\n  });\n  return _getConfigAll3.apply(this, arguments);\n}\nfunction getRemoteInfo(_x96) {\n  return _getRemoteInfo.apply(this, arguments);\n} // @ts-check\n/**\n * @param {any} remote\n * @param {string} prefix\n * @param {boolean} symrefs\n * @param {boolean} peelTags\n * @returns {ServerRef[]}\n */\nfunction _getRemoteInfo() {\n  _getRemoteInfo = _asyncToGenerator(function* ({\n    http,\n    onAuth,\n    onAuthSuccess,\n    onAuthFailure,\n    corsProxy,\n    url,\n    headers = {},\n    forPush = false\n  }) {\n    try {\n      assertParameter('http', http);\n      assertParameter('url', url);\n      const GitRemoteHTTP = GitRemoteManager.getRemoteHelperFor({\n        url\n      });\n      const remote = yield GitRemoteHTTP.discover({\n        http,\n        onAuth,\n        onAuthSuccess,\n        onAuthFailure,\n        corsProxy,\n        service: forPush ? 'git-receive-pack' : 'git-upload-pack',\n        url,\n        headers,\n        protocolVersion: 1\n      });\n\n      // Note: remote.capabilities, remote.refs, and remote.symrefs are Set and Map objects,\n      // but one of the objectives of the public API is to always return JSON-compatible objects\n      // so we must JSONify them.\n      const result = {\n        capabilities: [...remote.capabilities]\n      };\n      // Convert the flat list into an object tree, because I figure 99% of the time\n      // that will be easier to use.\n      for (const [ref, oid] of remote.refs) {\n        const parts = ref.split('/');\n        const last = parts.pop();\n        let o = result;\n        for (const part of parts) {\n          o[part] = o[part] || {};\n          o = o[part];\n        }\n        o[last] = oid;\n      }\n      // Merge symrefs on top of refs to more closely match actual git repo layouts\n      for (const [symref, ref] of remote.symrefs) {\n        const parts = symref.split('/');\n        const last = parts.pop();\n        let o = result;\n        for (const part of parts) {\n          o[part] = o[part] || {};\n          o = o[part];\n        }\n        o[last] = ref;\n      }\n      return result;\n    } catch (err) {\n      err.caller = 'git.getRemoteInfo';\n      throw err;\n    }\n  });\n  return _getRemoteInfo.apply(this, arguments);\n}\nfunction formatInfoRefs(remote, prefix, symrefs, peelTags) {\n  const refs = [];\n  for (const [key, value] of remote.refs) {\n    if (prefix && !key.startsWith(prefix)) continue;\n    if (key.endsWith('^{}')) {\n      if (peelTags) {\n        const _key = key.replace('^{}', '');\n        // Peeled tags are almost always listed immediately after the original tag\n        const last = refs[refs.length - 1];\n        const r = last.ref === _key ? last : refs.find(x => x.ref === _key);\n        if (r === undefined) {\n          throw new Error('I did not expect this to happen');\n        }\n        r.peeled = value;\n      }\n      continue;\n    }\n    /** @type ServerRef */\n    const ref = {\n      ref: key,\n      oid: value\n    };\n    if (symrefs) {\n      if (remote.symrefs.has(key)) {\n        ref.target = remote.symrefs.get(key);\n      }\n    }\n    refs.push(ref);\n  }\n  return refs;\n}\n\n// @ts-check\n\n/**\n * @typedef {Object} GetRemoteInfo2Result - This object has the following schema:\n * @property {1 | 2} protocolVersion - Git protocol version the server supports\n * @property {Object<string, string | true>} capabilities - An object of capabilities represented as keys and values\n * @property {ServerRef[]} [refs] - Server refs (they get returned by protocol version 1 whether you want them or not)\n */\n\n/**\n * List a remote server's capabilities.\n *\n * This is a rare command that doesn't require an `fs`, `dir`, or even `gitdir` argument.\n * It just communicates to a remote git server, determining what protocol version, commands, and features it supports.\n *\n * > The successor to [`getRemoteInfo`](./getRemoteInfo.md), this command supports Git Wire Protocol Version 2.\n * > Therefore its return type is more complicated as either:\n * >\n * > - v1 capabilities (and refs) or\n * > - v2 capabilities (and no refs)\n * >\n * > are returned.\n * > If you just care about refs, use [`listServerRefs`](./listServerRefs.md)\n *\n * @param {object} args\n * @param {HttpClient} args.http - an HTTP client\n * @param {AuthCallback} [args.onAuth] - optional auth fill callback\n * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback\n * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback\n * @param {string} args.url - The URL of the remote repository. Will be gotten from gitconfig if absent.\n * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.\n * @param {boolean} [args.forPush = false] - By default, the command queries the 'fetch' capabilities. If true, it will ask for the 'push' capabilities.\n * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config\n * @param {1 | 2} [args.protocolVersion = 2] - Which version of the Git Protocol to use.\n *\n * @returns {Promise<GetRemoteInfo2Result>} Resolves successfully with an object listing the capabilities of the remote.\n * @see GetRemoteInfo2Result\n * @see ServerRef\n *\n * @example\n * let info = await git.getRemoteInfo2({\n *   http,\n *   corsProxy: \"https://cors.isomorphic-git.org\",\n *   url: \"https://github.com/isomorphic-git/isomorphic-git.git\"\n * });\n * console.log(info);\n *\n */\nfunction getRemoteInfo2(_x97) {\n  return _getRemoteInfo2.apply(this, arguments);\n}\nfunction _getRemoteInfo2() {\n  _getRemoteInfo2 = _asyncToGenerator(function* ({\n    http,\n    onAuth,\n    onAuthSuccess,\n    onAuthFailure,\n    corsProxy,\n    url,\n    headers = {},\n    forPush = false,\n    protocolVersion = 2\n  }) {\n    try {\n      assertParameter('http', http);\n      assertParameter('url', url);\n      const GitRemoteHTTP = GitRemoteManager.getRemoteHelperFor({\n        url\n      });\n      const remote = yield GitRemoteHTTP.discover({\n        http,\n        onAuth,\n        onAuthSuccess,\n        onAuthFailure,\n        corsProxy,\n        service: forPush ? 'git-receive-pack' : 'git-upload-pack',\n        url,\n        headers,\n        protocolVersion\n      });\n      if (remote.protocolVersion === 2) {\n        /** @type GetRemoteInfo2Result */\n        return {\n          protocolVersion: remote.protocolVersion,\n          capabilities: remote.capabilities2\n        };\n      }\n\n      // Note: remote.capabilities, remote.refs, and remote.symrefs are Set and Map objects,\n      // but one of the objectives of the public API is to always return JSON-compatible objects\n      // so we must JSONify them.\n      /** @type Object<string, true> */\n      const capabilities = {};\n      for (const cap of remote.capabilities) {\n        const [key, value] = cap.split('=');\n        if (value) {\n          capabilities[key] = value;\n        } else {\n          capabilities[key] = true;\n        }\n      }\n      /** @type GetRemoteInfo2Result */\n      return {\n        protocolVersion: 1,\n        capabilities,\n        refs: formatInfoRefs(remote, undefined, true, true)\n      };\n    } catch (err) {\n      err.caller = 'git.getRemoteInfo2';\n      throw err;\n    }\n  });\n  return _getRemoteInfo2.apply(this, arguments);\n}\nfunction hashObject(_x98) {\n  return _hashObject.apply(this, arguments);\n} // @ts-check\n/**\n *\n * @typedef {object} HashBlobResult - The object returned has the following schema:\n * @property {string} oid - The SHA-1 object id\n * @property {'blob'} type - The type of the object\n * @property {Uint8Array} object - The wrapped git object (the thing that is hashed)\n * @property {'wrapped'} format - The format of the object\n *\n */\n/**\n * Compute what the SHA-1 object id of a file would be\n *\n * @param {object} args\n * @param {Uint8Array|string} args.object - The object to write. If `object` is a String then it will be converted to a Uint8Array using UTF-8 encoding.\n *\n * @returns {Promise<HashBlobResult>} Resolves successfully with the SHA-1 object id and the wrapped object Uint8Array.\n * @see HashBlobResult\n *\n * @example\n * let { oid, type, object, format } = await git.hashBlob({\n *   object: 'Hello world!',\n * })\n *\n * console.log('oid', oid)\n * console.log('type', type)\n * console.log('object', object)\n * console.log('format', format)\n *\n */\nfunction _hashObject() {\n  _hashObject = _asyncToGenerator(function* ({\n    type,\n    object,\n    format = 'content',\n    oid = undefined\n  }) {\n    if (format !== 'deflated') {\n      if (format !== 'wrapped') {\n        object = GitObject.wrap({\n          type,\n          object\n        });\n      }\n      oid = yield shasum(object);\n    }\n    return {\n      oid,\n      object\n    };\n  });\n  return _hashObject.apply(this, arguments);\n}\nfunction hashBlob(_x99) {\n  return _hashBlob.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {ProgressCallback} [args.onProgress]\n * @param {string} args.dir\n * @param {string} args.gitdir\n * @param {string} args.filepath\n *\n * @returns {Promise<{oids: string[]}>}\n */\nfunction _hashBlob() {\n  _hashBlob = _asyncToGenerator(function* ({\n    object\n  }) {\n    try {\n      assertParameter('object', object);\n\n      // Convert object to buffer\n      if (typeof object === 'string') {\n        object = Buffer.from(object, 'utf8');\n      } else {\n        object = Buffer.from(object);\n      }\n      const type = 'blob';\n      const {\n        oid,\n        object: _object\n      } = yield hashObject({\n        type: 'blob',\n        format: 'content',\n        object\n      });\n      return {\n        oid,\n        type,\n        object: new Uint8Array(_object),\n        format: 'wrapped'\n      };\n    } catch (err) {\n      err.caller = 'git.hashBlob';\n      throw err;\n    }\n  });\n  return _hashBlob.apply(this, arguments);\n}\nfunction _indexPack(_x100) {\n  return _indexPack2.apply(this, arguments);\n} // @ts-check\n/**\n * Create the .idx file for a given .pack file\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {ProgressCallback} [args.onProgress] - optional progress event callback\n * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.filepath - The path to the .pack file to index\n *\n * @returns {Promise<{oids: string[]}>} Resolves with a list of the SHA-1 object ids contained in the packfile\n *\n * @example\n * let packfiles = await fs.promises.readdir('/tutorial/.git/objects/pack')\n * packfiles = packfiles.filter(name => name.endsWith('.pack'))\n * console.log('packfiles', packfiles)\n *\n * const { oids } = await git.indexPack({\n *   fs,\n *   dir: '/tutorial',\n *   filepath: `.git/objects/pack/${packfiles[0]}`,\n *   async onProgress (evt) {\n *     console.log(`${evt.phase}: ${evt.loaded} / ${evt.total}`)\n *   }\n * })\n * console.log(oids)\n *\n */\nfunction _indexPack2() {\n  _indexPack2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    onProgress,\n    dir,\n    gitdir,\n    filepath\n  }) {\n    try {\n      filepath = join(dir, filepath);\n      const pack = yield fs.read(filepath);\n      const getExternalRefDelta = oid => _readObject({\n        fs,\n        cache,\n        gitdir,\n        oid\n      });\n      const idx = yield GitPackIndex.fromPack({\n        pack,\n        getExternalRefDelta,\n        onProgress\n      });\n      yield fs.write(filepath.replace(/\\.pack$/, '.idx'), yield idx.toBuffer());\n      return {\n        oids: [...idx.hashes]\n      };\n    } catch (err) {\n      err.caller = 'git.indexPack';\n      throw err;\n    }\n  });\n  return _indexPack2.apply(this, arguments);\n}\nfunction indexPack(_x101) {\n  return _indexPack3.apply(this, arguments);\n} // @ts-check\n/**\n * Initialize a new repository\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {boolean} [args.bare = false] - Initialize a bare repository\n * @param {string} [args.defaultBranch = 'master'] - The name of the default branch (might be changed to a required argument in 2.0.0)\n * @returns {Promise<void>}  Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.init({ fs, dir: '/tutorial' })\n * console.log('done')\n *\n */\nfunction _indexPack3() {\n  _indexPack3 = _asyncToGenerator(function* ({\n    fs,\n    onProgress,\n    dir,\n    gitdir = join(dir, '.git'),\n    filepath\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('dir', dir);\n      assertParameter('gitdir', dir);\n      assertParameter('filepath', filepath);\n      return yield _indexPack({\n        fs: new FileSystem(fs),\n        cache: {},\n        onProgress,\n        dir,\n        gitdir,\n        filepath\n      });\n    } catch (err) {\n      err.caller = 'git.indexPack';\n      throw err;\n    }\n  });\n  return _indexPack3.apply(this, arguments);\n}\nfunction init(_x102) {\n  return _init3.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} args.gitdir\n * @param {string} args.oid\n * @param {string} args.ancestor\n * @param {number} args.depth - Maximum depth to search before giving up. -1 means no maximum depth.\n *\n * @returns {Promise<boolean>}\n */\nfunction _init3() {\n  _init3 = _asyncToGenerator(function* ({\n    fs,\n    bare = false,\n    dir,\n    gitdir = bare ? dir : join(dir, '.git'),\n    defaultBranch = 'master'\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      if (!bare) {\n        assertParameter('dir', dir);\n      }\n      return yield _init({\n        fs: new FileSystem(fs),\n        bare,\n        dir,\n        gitdir,\n        defaultBranch\n      });\n    } catch (err) {\n      err.caller = 'git.init';\n      throw err;\n    }\n  });\n  return _init3.apply(this, arguments);\n}\nfunction _isDescendent(_x103) {\n  return _isDescendent2.apply(this, arguments);\n} // @ts-check\n/**\n * Check whether a git commit is descended from another\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.oid - The descendent commit\n * @param {string} args.ancestor - The (proposed) ancestor commit\n * @param {number} [args.depth = -1] - Maximum depth to search before giving up. -1 means no maximum depth.\n *\n * @returns {Promise<boolean>} Resolves to true if `oid` is a descendent of `ancestor`\n *\n * @example\n * let oid = await git.resolveRef({ fs, dir: '/tutorial', ref: 'main' })\n * let ancestor = await git.resolveRef({ fs, dir: '/tutorial', ref: 'v0.20.0' })\n * console.log(oid, ancestor)\n * await git.isDescendent({ fs, dir: '/tutorial', oid, ancestor, depth: -1 })\n *\n */\nfunction _isDescendent2() {\n  _isDescendent2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid,\n    ancestor,\n    depth\n  }) {\n    const shallows = yield GitShallowManager.read({\n      fs,\n      gitdir\n    });\n    if (!oid) {\n      throw new MissingParameterError('oid');\n    }\n    if (!ancestor) {\n      throw new MissingParameterError('ancestor');\n    }\n    // If you don't like this behavior, add your own check.\n    // Edge cases are hard to define a perfect solution.\n    if (oid === ancestor) return false;\n    // We do not use recursion here, because that would lead to depth-first traversal,\n    // and we want to maintain a breadth-first traversal to avoid hitting shallow clone depth cutoffs.\n    const queue = [oid];\n    const visited = new Set();\n    let searchdepth = 0;\n    while (queue.length) {\n      if (searchdepth++ === depth) {\n        throw new MaxDepthError(depth);\n      }\n      const oid = queue.shift();\n      const {\n        type,\n        object\n      } = yield _readObject({\n        fs,\n        cache,\n        gitdir,\n        oid\n      });\n      if (type !== 'commit') {\n        throw new ObjectTypeError(oid, type, 'commit');\n      }\n      const commit = GitCommit.from(object).parse();\n      // Are any of the parents the sought-after ancestor?\n      for (const parent of commit.parent) {\n        if (parent === ancestor) return true;\n      }\n      // If not, add them to heads (unless we know this is a shallow commit)\n      if (!shallows.has(oid)) {\n        for (const parent of commit.parent) {\n          if (!visited.has(parent)) {\n            queue.push(parent);\n            visited.add(parent);\n          }\n        }\n      }\n      // Eventually, we'll travel entire tree to the roots where all the parents are empty arrays,\n      // or hit the shallow depth and throw an error. Excluding the possibility of grafts, or\n      // different branches cloned to different depths, you would hit this error at the same time\n      // for all parents, so trying to continue is futile.\n    }\n    return false;\n  });\n  return _isDescendent2.apply(this, arguments);\n}\nfunction isDescendent(_x104) {\n  return _isDescendent3.apply(this, arguments);\n} // @ts-check\n/**\n * List branches\n *\n * By default it lists local branches. If a 'remote' is specified, it lists the remote's branches. When listing remote branches, the HEAD branch is not filtered out, so it may be included in the list of results.\n *\n * Note that specifying a remote does not actually contact the server and update the list of branches.\n * If you want an up-to-date list, first do a `fetch` to that remote.\n * (Which branch you fetch doesn't matter - the list of branches available on the remote is updated during the fetch handshake.)\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.remote] - Instead of the branches in `refs/heads`, list the branches in `refs/remotes/${remote}`.\n *\n * @returns {Promise<Array<string>>} Resolves successfully with an array of branch names\n *\n * @example\n * let branches = await git.listBranches({ fs, dir: '/tutorial' })\n * console.log(branches)\n * let remoteBranches = await git.listBranches({ fs, dir: '/tutorial', remote: 'origin' })\n * console.log(remoteBranches)\n *\n */\nfunction _isDescendent3() {\n  _isDescendent3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    oid,\n    ancestor,\n    depth = -1\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('oid', oid);\n      assertParameter('ancestor', ancestor);\n      return yield _isDescendent({\n        fs: new FileSystem(fs),\n        cache: {},\n        gitdir,\n        oid,\n        ancestor,\n        depth\n      });\n    } catch (err) {\n      err.caller = 'git.isDescendent';\n      throw err;\n    }\n  });\n  return _isDescendent3.apply(this, arguments);\n}\nfunction listBranches(_x105) {\n  return _listBranches.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {object} args.cache\n * @param {string} args.gitdir\n * @param {string} [args.ref]\n *\n * @returns {Promise<Array<string>>}\n */\nfunction _listBranches() {\n  _listBranches = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    remote\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      return GitRefManager.listBranches({\n        fs: new FileSystem(fs),\n        gitdir,\n        remote\n      });\n    } catch (err) {\n      err.caller = 'git.listBranches';\n      throw err;\n    }\n  });\n  return _listBranches.apply(this, arguments);\n}\nfunction _listFiles(_x106) {\n  return _listFiles2.apply(this, arguments);\n}\nfunction _listFiles2() {\n  _listFiles2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    ref,\n    cache\n  }) {\n    if (ref) {\n      const oid = yield GitRefManager.resolve({\n        gitdir,\n        fs,\n        ref\n      });\n      const filenames = [];\n      yield accumulateFilesFromOid({\n        fs,\n        cache,\n        gitdir,\n        oid,\n        filenames,\n        prefix: ''\n      });\n      return filenames;\n    } else {\n      return GitIndexManager.acquire({\n        fs,\n        gitdir,\n        cache\n      }, /*#__PURE__*/function () {\n        var _ref33 = _asyncToGenerator(function* (index) {\n          return index.entries.map(x => x.path);\n        });\n        return function (_x195) {\n          return _ref33.apply(this, arguments);\n        };\n      }());\n    }\n  });\n  return _listFiles2.apply(this, arguments);\n}\nfunction accumulateFilesFromOid(_x107) {\n  return _accumulateFilesFromOid.apply(this, arguments);\n} // @ts-check\n/**\n * List all the files in the git index or a commit\n *\n * > Note: This function is efficient for listing the files in the staging area, but listing all the files in a commit requires recursively walking through the git object store.\n * > If you do not require a complete list of every file, better performance can be achieved by using [walk](./walk) and ignoring subdirectories you don't care about.\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.ref] - Return a list of all the files in the commit at `ref` instead of the files currently in the git index (aka staging area)\n *\n * @returns {Promise<Array<string>>} Resolves successfully with an array of filepaths\n *\n * @example\n * // All the files in the previous commit\n * let files = await git.listFiles({ fs, dir: '/tutorial', ref: 'HEAD' })\n * console.log(files)\n * // All the files in the current staging area\n * files = await git.listFiles({ fs, dir: '/tutorial' })\n * console.log(files)\n *\n */\nfunction _accumulateFilesFromOid() {\n  _accumulateFilesFromOid = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid,\n    filenames,\n    prefix\n  }) {\n    const {\n      tree\n    } = yield _readTree({\n      fs,\n      cache,\n      gitdir,\n      oid\n    });\n    // TODO: Use `walk` to do this. Should be faster.\n    for (const entry of tree) {\n      if (entry.type === 'tree') {\n        yield accumulateFilesFromOid({\n          fs,\n          cache,\n          gitdir,\n          oid: entry.oid,\n          filenames,\n          prefix: join(prefix, entry.path)\n        });\n      } else {\n        filenames.push(join(prefix, entry.path));\n      }\n    }\n  });\n  return _accumulateFilesFromOid.apply(this, arguments);\n}\nfunction listFiles(_x108) {\n  return _listFiles3.apply(this, arguments);\n} // @ts-check\n/**\n * List all the object notes\n *\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} args.gitdir\n * @param {string} args.ref\n *\n * @returns {Promise<Array<{target: string, note: string}>>}\n */\nfunction _listFiles3() {\n  _listFiles3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      return yield _listFiles({\n        fs: new FileSystem(fs),\n        cache: {},\n        gitdir,\n        ref\n      });\n    } catch (err) {\n      err.caller = 'git.listFiles';\n      throw err;\n    }\n  });\n  return _listFiles3.apply(this, arguments);\n}\nfunction _listNotes(_x109) {\n  return _listNotes2.apply(this, arguments);\n} // @ts-check\n/**\n * List all the object notes\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.ref] - The notes ref to look under\n *\n * @returns {Promise<Array<{target: string, note: string}>>} Resolves successfully with an array of entries containing SHA-1 object ids of the note and the object the note targets\n */\nfunction _listNotes2() {\n  _listNotes2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    ref\n  }) {\n    // Get the current note commit\n    let parent;\n    try {\n      parent = yield GitRefManager.resolve({\n        gitdir,\n        fs,\n        ref\n      });\n    } catch (err) {\n      if (err instanceof NotFoundError) {\n        return [];\n      }\n    }\n\n    // Create the current note tree\n    const result = yield _readTree({\n      fs,\n      cache,\n      gitdir,\n      oid: parent\n    });\n\n    // Format the tree entries\n    const notes = result.tree.map(entry => ({\n      target: entry.path,\n      note: entry.oid\n    }));\n    return notes;\n  });\n  return _listNotes2.apply(this, arguments);\n}\nfunction listNotes(_x110) {\n  return _listNotes3.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.gitdir\n *\n * @returns {Promise<Array<{remote: string, url: string}>>}\n */\nfunction _listNotes3() {\n  _listNotes3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref = 'refs/notes/commits'\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('ref', ref);\n      return yield _listNotes({\n        fs: new FileSystem(fs),\n        cache: {},\n        gitdir,\n        ref\n      });\n    } catch (err) {\n      err.caller = 'git.listNotes';\n      throw err;\n    }\n  });\n  return _listNotes3.apply(this, arguments);\n}\nfunction _listRemotes(_x111) {\n  return _listRemotes2.apply(this, arguments);\n} // @ts-check\n/**\n * List remotes\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n *\n * @returns {Promise<Array<{remote: string, url: string}>>} Resolves successfully with an array of `{remote, url}` objects\n *\n * @example\n * let remotes = await git.listRemotes({ fs, dir: '/tutorial' })\n * console.log(remotes)\n *\n */\nfunction _listRemotes2() {\n  _listRemotes2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir\n  }) {\n    const config = yield GitConfigManager.get({\n      fs,\n      gitdir\n    });\n    const remoteNames = yield config.getSubsections('remote');\n    const remotes = Promise.all(remoteNames.map( /*#__PURE__*/function () {\n      var _ref34 = _asyncToGenerator(function* (remote) {\n        const url = yield config.get(`remote.${remote}.url`);\n        return {\n          remote,\n          url\n        };\n      });\n      return function (_x196) {\n        return _ref34.apply(this, arguments);\n      };\n    }()));\n    return remotes;\n  });\n  return _listRemotes2.apply(this, arguments);\n}\nfunction listRemotes(_x112) {\n  return _listRemotes3.apply(this, arguments);\n}\n/**\n * @typedef {Object} ServerRef - This object has the following schema:\n * @property {string} ref - The name of the ref\n * @property {string} oid - The SHA-1 object id the ref points to\n * @property {string} [target] - The target ref pointed to by a symbolic ref\n * @property {string} [peeled] - If the oid is the SHA-1 object id of an annotated tag, this is the SHA-1 object id that the annotated tag points to\n */\nfunction _listRemotes3() {\n  _listRemotes3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git')\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      return yield _listRemotes({\n        fs: new FileSystem(fs),\n        gitdir\n      });\n    } catch (err) {\n      err.caller = 'git.listRemotes';\n      throw err;\n    }\n  });\n  return _listRemotes3.apply(this, arguments);\n}\nfunction parseListRefsResponse(_x113) {\n  return _parseListRefsResponse.apply(this, arguments);\n}\n/**\n * @param {object} args\n * @param {string} [args.prefix] - Only list refs that start with this prefix\n * @param {boolean} [args.symrefs = false] - Include symbolic ref targets\n * @param {boolean} [args.peelTags = false] - Include peeled tags values\n * @returns {Uint8Array[]}\n */\nfunction _parseListRefsResponse() {\n  _parseListRefsResponse = _asyncToGenerator(function* (stream) {\n    const read = GitPktLine.streamReader(stream);\n\n    // TODO: when we re-write everything to minimize memory usage,\n    // we could make this a generator\n    const refs = [];\n    let line;\n    while (true) {\n      line = yield read();\n      if (line === true) break;\n      if (line === null) continue;\n      line = line.toString('utf8').replace(/\\n$/, '');\n      const [oid, ref, ...attrs] = line.split(' ');\n      const r = {\n        ref,\n        oid\n      };\n      for (const attr of attrs) {\n        const [name, value] = attr.split(':');\n        if (name === 'symref-target') {\n          r.target = value;\n        } else if (name === 'peeled') {\n          r.peeled = value;\n        }\n      }\n      refs.push(r);\n    }\n    return refs;\n  });\n  return _parseListRefsResponse.apply(this, arguments);\n}\nfunction writeListRefsRequest(_x114) {\n  return _writeListRefsRequest.apply(this, arguments);\n} // @ts-check\n/**\n * Fetch a list of refs (branches, tags, etc) from a server.\n *\n * This is a rare command that doesn't require an `fs`, `dir`, or even `gitdir` argument.\n * It just requires an `http` argument.\n *\n * ### About `protocolVersion`\n *\n * There's a rather fun trade-off between Git Protocol Version 1 and Git Protocol Version 2.\n * Version 2 actually requires 2 HTTP requests instead of 1, making it similar to fetch or push in that regard.\n * However, version 2 supports server-side filtering by prefix, whereas that filtering is done client-side in version 1.\n * Which protocol is most efficient therefore depends on the number of refs on the remote, the latency of the server, and speed of the network connection.\n * For an small repos (or fast Internet connections), the requirement to make two trips to the server makes protocol 2 slower.\n * But for large repos (or slow Internet connections), the decreased payload size of the second request makes up for the additional request.\n *\n * Hard numbers vary by situation, but here's some numbers from my machine:\n *\n * Using isomorphic-git in a browser, with a CORS proxy, listing only the branches (refs/heads) of https://github.com/isomorphic-git/isomorphic-git\n * - Protocol Version 1 took ~300ms and transfered 84 KB.\n * - Protocol Version 2 took ~500ms and transfered 4.1 KB.\n *\n * Using isomorphic-git in a browser, with a CORS proxy, listing only the branches (refs/heads) of https://gitlab.com/gitlab-org/gitlab\n * - Protocol Version 1 took ~4900ms and transfered 9.41 MB.\n * - Protocol Version 2 took ~1280ms and transfered 433 KB.\n *\n * Finally, there is a fun quirk regarding the `symrefs` parameter.\n * Protocol Version 1 will generally only return the `HEAD` symref and not others.\n * Historically, this meant that servers don't use symbolic refs except for `HEAD`, which is used to point at the \"default branch\".\n * However Protocol Version 2 can return *all* the symbolic refs on the server.\n * So if you are running your own git server, you could take advantage of that I guess.\n *\n * #### TL;DR\n * If you are _not_ taking advantage of `prefix` I would recommend `protocolVersion: 1`.\n * Otherwise, I recommend to use the default which is `protocolVersion: 2`.\n *\n * @param {object} args\n * @param {HttpClient} args.http - an HTTP client\n * @param {AuthCallback} [args.onAuth] - optional auth fill callback\n * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback\n * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback\n * @param {string} args.url - The URL of the remote repository. Will be gotten from gitconfig if absent.\n * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.\n * @param {boolean} [args.forPush = false] - By default, the command queries the 'fetch' capabilities. If true, it will ask for the 'push' capabilities.\n * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config\n * @param {1 | 2} [args.protocolVersion = 2] - Which version of the Git Protocol to use.\n * @param {string} [args.prefix] - Only list refs that start with this prefix\n * @param {boolean} [args.symrefs = false] - Include symbolic ref targets\n * @param {boolean} [args.peelTags = false] - Include annotated tag peeled targets\n *\n * @returns {Promise<ServerRef[]>} Resolves successfully with an array of ServerRef objects\n * @see ServerRef\n *\n * @example\n * // List all the branches on a repo\n * let refs = await git.listServerRefs({\n *   http,\n *   corsProxy: \"https://cors.isomorphic-git.org\",\n *   url: \"https://github.com/isomorphic-git/isomorphic-git.git\",\n *   prefix: \"refs/heads/\",\n * });\n * console.log(refs);\n *\n * @example\n * // Get the default branch on a repo\n * let refs = await git.listServerRefs({\n *   http,\n *   corsProxy: \"https://cors.isomorphic-git.org\",\n *   url: \"https://github.com/isomorphic-git/isomorphic-git.git\",\n *   prefix: \"HEAD\",\n *   symrefs: true,\n * });\n * console.log(refs);\n *\n * @example\n * // List all the tags on a repo\n * let refs = await git.listServerRefs({\n *   http,\n *   corsProxy: \"https://cors.isomorphic-git.org\",\n *   url: \"https://github.com/isomorphic-git/isomorphic-git.git\",\n *   prefix: \"refs/tags/\",\n *   peelTags: true,\n * });\n * console.log(refs);\n *\n * @example\n * // List all the pull requests on a repo\n * let refs = await git.listServerRefs({\n *   http,\n *   corsProxy: \"https://cors.isomorphic-git.org\",\n *   url: \"https://github.com/isomorphic-git/isomorphic-git.git\",\n *   prefix: \"refs/pull/\",\n * });\n * console.log(refs);\n *\n */\nfunction _writeListRefsRequest() {\n  _writeListRefsRequest = _asyncToGenerator(function* ({\n    prefix,\n    symrefs,\n    peelTags\n  }) {\n    const packstream = [];\n    // command\n    packstream.push(GitPktLine.encode('command=ls-refs\\n'));\n    // capability-list\n    packstream.push(GitPktLine.encode(`agent=${pkg.agent}\\n`));\n    // [command-args]\n    if (peelTags || symrefs || prefix) {\n      packstream.push(GitPktLine.delim());\n    }\n    if (peelTags) packstream.push(GitPktLine.encode('peel'));\n    if (symrefs) packstream.push(GitPktLine.encode('symrefs'));\n    if (prefix) packstream.push(GitPktLine.encode(`ref-prefix ${prefix}`));\n    packstream.push(GitPktLine.flush());\n    return packstream;\n  });\n  return _writeListRefsRequest.apply(this, arguments);\n}\nfunction listServerRefs(_x115) {\n  return _listServerRefs.apply(this, arguments);\n} // @ts-check\n/**\n * List tags\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n *\n * @returns {Promise<Array<string>>} Resolves successfully with an array of tag names\n *\n * @example\n * let tags = await git.listTags({ fs, dir: '/tutorial' })\n * console.log(tags)\n *\n */\nfunction _listServerRefs() {\n  _listServerRefs = _asyncToGenerator(function* ({\n    http,\n    onAuth,\n    onAuthSuccess,\n    onAuthFailure,\n    corsProxy,\n    url,\n    headers = {},\n    forPush = false,\n    protocolVersion = 2,\n    prefix,\n    symrefs,\n    peelTags\n  }) {\n    try {\n      assertParameter('http', http);\n      assertParameter('url', url);\n      const remote = yield GitRemoteHTTP.discover({\n        http,\n        onAuth,\n        onAuthSuccess,\n        onAuthFailure,\n        corsProxy,\n        service: forPush ? 'git-receive-pack' : 'git-upload-pack',\n        url,\n        headers,\n        protocolVersion\n      });\n      if (remote.protocolVersion === 1) {\n        return formatInfoRefs(remote, prefix, symrefs, peelTags);\n      }\n\n      // Protocol Version 2\n      const body = yield writeListRefsRequest({\n        prefix,\n        symrefs,\n        peelTags\n      });\n      const res = yield GitRemoteHTTP.connect({\n        http,\n        auth: remote.auth,\n        headers,\n        corsProxy,\n        service: forPush ? 'git-receive-pack' : 'git-upload-pack',\n        url,\n        body\n      });\n      return parseListRefsResponse(res.body);\n    } catch (err) {\n      err.caller = 'git.listServerRefs';\n      throw err;\n    }\n  });\n  return _listServerRefs.apply(this, arguments);\n}\nfunction listTags(_x116) {\n  return _listTags.apply(this, arguments);\n}\nfunction _listTags() {\n  _listTags = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git')\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      return GitRefManager.listTags({\n        fs: new FileSystem(fs),\n        gitdir\n      });\n    } catch (err) {\n      err.caller = 'git.listTags';\n      throw err;\n    }\n  });\n  return _listTags.apply(this, arguments);\n}\nfunction resolveCommit(_x117) {\n  return _resolveCommit.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} args.gitdir\n * @param {string} args.oid\n *\n * @returns {Promise<ReadCommitResult>} Resolves successfully with a git commit object\n * @see ReadCommitResult\n * @see CommitObject\n *\n */\nfunction _resolveCommit() {\n  _resolveCommit = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid\n  }) {\n    const {\n      type,\n      object\n    } = yield _readObject({\n      fs,\n      cache,\n      gitdir,\n      oid\n    });\n    // Resolve annotated tag objects to whatever\n    if (type === 'tag') {\n      oid = GitAnnotatedTag.from(object).parse().object;\n      return resolveCommit({\n        fs,\n        cache,\n        gitdir,\n        oid\n      });\n    }\n    if (type !== 'commit') {\n      throw new ObjectTypeError(oid, type, 'commit');\n    }\n    return {\n      commit: GitCommit.from(object),\n      oid\n    };\n  });\n  return _resolveCommit.apply(this, arguments);\n}\nfunction _readCommit(_x118) {\n  return _readCommit2.apply(this, arguments);\n}\nfunction _readCommit2() {\n  _readCommit2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid\n  }) {\n    const {\n      commit,\n      oid: commitOid\n    } = yield resolveCommit({\n      fs,\n      cache,\n      gitdir,\n      oid\n    });\n    const result = {\n      oid: commitOid,\n      commit: commit.parse(),\n      payload: commit.withoutSignature()\n    };\n    // @ts-ignore\n    return result;\n  });\n  return _readCommit2.apply(this, arguments);\n}\nfunction compareAge(a, b) {\n  return a.committer.timestamp - b.committer.timestamp;\n}\n\n// @ts-check\n\n/**\n * Get commit descriptions from the git history\n *\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} args.gitdir\n * @param {string} args.ref\n * @param {number|void} args.depth\n * @param {Date|void} args.since\n *\n * @returns {Promise<Array<ReadCommitResult>>}\n */\nfunction _log(_x119) {\n  return _log2.apply(this, arguments);\n} // @ts-check\n/**\n * Get commit descriptions from the git history\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.ref = 'HEAD'] - The commit to begin walking backwards through the history from\n * @param {number} [args.depth] - Limit the number of commits returned. No limit by default.\n * @param {Date} [args.since] - Return history newer than the given date. Can be combined with `depth` to get whichever is shorter.\n *\n * @returns {Promise<Array<ReadCommitResult>>} Resolves to an array of ReadCommitResult objects\n * @see ReadCommitResult\n * @see CommitObject\n *\n * @example\n * let commits = await git.log({\n *   fs,\n *   dir: '/tutorial',\n *   depth: 5,\n *   ref: 'main'\n * })\n * console.log(commits)\n *\n */\nfunction _log2() {\n  _log2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    ref,\n    depth,\n    since\n  }) {\n    const sinceTimestamp = typeof since === 'undefined' ? undefined : Math.floor(since.valueOf() / 1000);\n    // TODO: In the future, we may want to have an API where we return a\n    // async iterator that emits commits.\n    const commits = [];\n    const shallowCommits = yield GitShallowManager.read({\n      fs,\n      gitdir\n    });\n    const oid = yield GitRefManager.resolve({\n      fs,\n      gitdir,\n      ref\n    });\n    const tips = [yield _readCommit({\n      fs,\n      cache,\n      gitdir,\n      oid\n    })];\n    while (true) {\n      const commit = tips.pop();\n\n      // Stop the log if we've hit the age limit\n      if (sinceTimestamp !== undefined && commit.commit.committer.timestamp <= sinceTimestamp) {\n        break;\n      }\n      commits.push(commit);\n\n      // Stop the loop if we have enough commits now.\n      if (depth !== undefined && commits.length === depth) break;\n\n      // If this is not a shallow commit...\n      if (!shallowCommits.has(commit.oid)) {\n        // Add the parents of this commit to the queue\n        // Note: for the case of a commit with no parents, it will concat an empty array, having no net effect.\n        for (const oid of commit.commit.parent) {\n          const commit = yield _readCommit({\n            fs,\n            cache,\n            gitdir,\n            oid\n          });\n          if (!tips.map(commit => commit.oid).includes(commit.oid)) {\n            tips.push(commit);\n          }\n        }\n      }\n\n      // Stop the loop if there are no more commit parents\n      if (tips.length === 0) break;\n\n      // Process tips in order by age\n      tips.sort((a, b) => compareAge(a.commit, b.commit));\n    }\n    return commits;\n  });\n  return _log2.apply(this, arguments);\n}\nfunction log(_x120) {\n  return _log3.apply(this, arguments);\n} // @ts-check\n/**\n *\n * @typedef {Object} MergeResult - Returns an object with a schema like this:\n * @property {string} [oid] - The SHA-1 object id that is now at the head of the branch. Absent only if `dryRun` was specified and `mergeCommit` is true.\n * @property {boolean} [alreadyMerged] - True if the branch was already merged so no changes were made\n * @property {boolean} [fastForward] - True if it was a fast-forward merge\n * @property {boolean} [mergeCommit] - True if merge resulted in a merge commit\n * @property {string} [tree] - The SHA-1 object id of the tree resulting from a merge commit\n *\n */\n/**\n * Merge two branches\n *\n * ## Limitations\n *\n * Currently it does not support incomplete merges. That is, if there are merge conflicts it cannot solve\n * with the built in diff3 algorithm it will not modify the working dir, and will throw a [`MergeNotSupportedError`](./errors.md#mergenotsupportedError) error.\n *\n * Currently it will fail if multiple candidate merge bases are found. (It doesn't yet implement the recursive merge strategy.)\n *\n * Currently it does not support selecting alternative merge strategies.\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {SignCallback} [args.onSign] - a PGP signing implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.ours] - The branch receiving the merge. If undefined, defaults to the current branch.\n * @param {string} args.theirs - The branch to be merged\n * @param {boolean} [args.fastForwardOnly = false] - If true, then non-fast-forward merges will throw an Error instead of performing a merge.\n * @param {boolean} [args.dryRun = false] - If true, simulates a merge so you can test whether it would succeed.\n * @param {boolean} [args.noUpdateBranch = false] - If true, does not update the branch pointer after creating the commit.\n * @param {string} [args.message] - Overrides the default auto-generated merge commit message\n * @param {Object} [args.author] - passed to [commit](commit.md) when creating a merge commit\n * @param {string} [args.author.name] - Default is `user.name` config.\n * @param {string} [args.author.email] - Default is `user.email` config.\n * @param {number} [args.author.timestamp=Math.floor(Date.now()/1000)] - Set the author timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).\n * @param {number} [args.author.timezoneOffset] - Set the author timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.\n * @param {Object} [args.committer] - passed to [commit](commit.md) when creating a merge commit\n * @param {string} [args.committer.name] - Default is `user.name` config.\n * @param {string} [args.committer.email] - Default is `user.email` config.\n * @param {number} [args.committer.timestamp=Math.floor(Date.now()/1000)] - Set the committer timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).\n * @param {number} [args.committer.timezoneOffset] - Set the committer timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.\n * @param {string} [args.signingKey] - passed to [commit](commit.md) when creating a merge commit\n *\n * @returns {Promise<MergeResult>} Resolves to a description of the merge operation\n * @see MergeResult\n *\n * @example\n * let m = await git.merge({\n *   fs,\n *   dir: '/tutorial',\n *   ours: 'main',\n *   theirs: 'remotes/origin/main'\n * })\n * console.log(m)\n *\n */\nfunction _log3() {\n  _log3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref = 'HEAD',\n    depth,\n    since // Date\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('ref', ref);\n      return yield _log({\n        fs: new FileSystem(fs),\n        cache: {},\n        gitdir,\n        ref,\n        depth,\n        since\n      });\n    } catch (err) {\n      err.caller = 'git.log';\n      throw err;\n    }\n  });\n  return _log3.apply(this, arguments);\n}\nfunction merge(_x121) {\n  return _merge3.apply(this, arguments);\n}\n/**\n * @enum {number}\n */\nfunction _merge3() {\n  _merge3 = _asyncToGenerator(function* ({\n    fs: _fs,\n    onSign,\n    dir,\n    gitdir = join(dir, '.git'),\n    ours,\n    theirs,\n    fastForwardOnly = false,\n    dryRun = false,\n    noUpdateBranch = false,\n    message,\n    author: _author,\n    committer: _committer,\n    signingKey\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      if (signingKey) {\n        assertParameter('onSign', onSign);\n      }\n      const fs = new FileSystem(_fs);\n      const cache = {};\n      const author = yield normalizeAuthorObject({\n        fs,\n        gitdir,\n        author: _author\n      });\n      if (!author && !fastForwardOnly) throw new MissingNameError('author');\n      const committer = yield normalizeCommitterObject({\n        fs,\n        gitdir,\n        author,\n        committer: _committer\n      });\n      if (!committer && !fastForwardOnly) {\n        throw new MissingNameError('committer');\n      }\n      return yield _merge({\n        fs,\n        cache,\n        gitdir,\n        ours,\n        theirs,\n        fastForwardOnly,\n        dryRun,\n        noUpdateBranch,\n        message,\n        author,\n        committer,\n        signingKey\n      });\n    } catch (err) {\n      err.caller = 'git.merge';\n      throw err;\n    }\n  });\n  return _merge3.apply(this, arguments);\n}\nconst types = {\n  commit: 0b0010000,\n  tree: 0b0100000,\n  blob: 0b0110000,\n  tag: 0b1000000,\n  ofs_delta: 0b1100000,\n  ref_delta: 0b1110000\n};\n\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string[]} args.oids\n */\nfunction _pack(_x122) {\n  return _pack2.apply(this, arguments);\n} // @ts-check\n/**\n *\n * @typedef {Object} PackObjectsResult The packObjects command returns an object with two properties:\n * @property {string} filename - The suggested filename for the packfile if you want to save it to disk somewhere. It includes the packfile SHA.\n * @property {Uint8Array} [packfile] - The packfile contents. Not present if `write` parameter was true, in which case the packfile was written straight to disk.\n */\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} args.gitdir\n * @param {string[]} args.oids\n * @param {boolean} args.write\n *\n * @returns {Promise<PackObjectsResult>}\n * @see PackObjectsResult\n */\nfunction _pack2() {\n  _pack2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    dir,\n    gitdir = join(dir, '.git'),\n    oids\n  }) {\n    const hash = new Hash();\n    const outputStream = [];\n    function write(chunk, enc) {\n      const buff = Buffer.from(chunk, enc);\n      outputStream.push(buff);\n      hash.update(buff);\n    }\n    function writeObject(_x197) {\n      return _writeObject4.apply(this, arguments);\n    }\n    function _writeObject4() {\n      _writeObject4 = _asyncToGenerator(function* ({\n        stype,\n        object\n      }) {\n        // Object type is encoded in bits 654\n        const type = types[stype];\n        // The length encoding gets complicated.\n        let length = object.length;\n        // Whether the next byte is part of the variable-length encoded number\n        // is encoded in bit 7\n        let multibyte = length > 0b1111 ? 0b10000000 : 0b0;\n        // Last four bits of length is encoded in bits 3210\n        const lastFour = length & 0b1111;\n        // Discard those bits\n        length = length >>> 4;\n        // The first byte is then (1-bit multibyte?), (3-bit type), (4-bit least sig 4-bits of length)\n        let byte = (multibyte | type | lastFour).toString(16);\n        write(byte, 'hex');\n        // Now we keep chopping away at length 7-bits at a time until its zero,\n        // writing out the bytes in what amounts to little-endian order.\n        while (multibyte) {\n          multibyte = length > 0b01111111 ? 0b10000000 : 0b0;\n          byte = multibyte | length & 0b01111111;\n          write(padHex(2, byte), 'hex');\n          length = length >>> 7;\n        }\n        // Lastly, we can compress and write the object.\n        write(Buffer.from(yield deflate(object)));\n      });\n      return _writeObject4.apply(this, arguments);\n    }\n    write('PACK');\n    write('00000002', 'hex');\n    // Write a 4 byte (32-bit) int\n    write(padHex(8, oids.length), 'hex');\n    for (const oid of oids) {\n      const {\n        type,\n        object\n      } = yield _readObject({\n        fs,\n        cache,\n        gitdir,\n        oid\n      });\n      yield writeObject({\n        write,\n        object,\n        stype: type\n      });\n    }\n    // Write SHA1 checksum\n    const digest = hash.digest();\n    outputStream.push(digest);\n    return outputStream;\n  });\n  return _pack2.apply(this, arguments);\n}\nfunction _packObjects(_x123) {\n  return _packObjects2.apply(this, arguments);\n} // @ts-check\n/**\n *\n * @typedef {Object} PackObjectsResult The packObjects command returns an object with two properties:\n * @property {string} filename - The suggested filename for the packfile if you want to save it to disk somewhere. It includes the packfile SHA.\n * @property {Uint8Array} [packfile] - The packfile contents. Not present if `write` parameter was true, in which case the packfile was written straight to disk.\n */\n/**\n * Create a packfile from an array of SHA-1 object ids\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string[]} args.oids - An array of SHA-1 object ids to be included in the packfile\n * @param {boolean} [args.write = false] - Whether to save the packfile to disk or not\n *\n * @returns {Promise<PackObjectsResult>} Resolves successfully when the packfile is ready with the filename and buffer\n * @see PackObjectsResult\n *\n * @example\n * // Create a packfile containing only an empty tree\n * let { packfile } = await git.packObjects({\n *   fs,\n *   dir: '/tutorial',\n *   oids: ['4b825dc642cb6eb9a060e54bf8d69288fbee4904']\n * })\n * console.log(packfile)\n *\n */\nfunction _packObjects2() {\n  _packObjects2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oids,\n    write\n  }) {\n    const buffers = yield _pack({\n      fs,\n      cache,\n      gitdir,\n      oids\n    });\n    const packfile = Buffer.from(yield collect(buffers));\n    const packfileSha = packfile.slice(-20).toString('hex');\n    const filename = `pack-${packfileSha}.pack`;\n    if (write) {\n      yield fs.write(join(gitdir, `objects/pack/${filename}`), packfile);\n      return {\n        filename\n      };\n    }\n    return {\n      filename,\n      packfile: new Uint8Array(packfile)\n    };\n  });\n  return _packObjects2.apply(this, arguments);\n}\nfunction packObjects(_x124) {\n  return _packObjects3.apply(this, arguments);\n} // @ts-check\n/**\n * Fetch and merge commits from a remote repository\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {HttpClient} args.http - an HTTP client\n * @param {ProgressCallback} [args.onProgress] - optional progress event callback\n * @param {MessageCallback} [args.onMessage] - optional message event callback\n * @param {AuthCallback} [args.onAuth] - optional auth fill callback\n * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback\n * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback\n * @param {string} args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.ref] - Which branch to merge into. By default this is the currently checked out branch.\n * @param {string} [args.url] - (Added in 1.1.0) The URL of the remote repository. The default is the value set in the git config for that remote.\n * @param {string} [args.remote] - (Added in 1.1.0) If URL is not specified, determines which remote to use.\n * @param {string} [args.remoteRef] - (Added in 1.1.0) The name of the branch on the remote to fetch. By default this is the configured remote tracking branch.\n * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.\n * @param {boolean} [args.singleBranch = false] - Instead of the default behavior of fetching all the branches, only fetch a single branch.\n * @param {boolean} [args.fastForwardOnly = false] - Only perform simple fast-forward merges. (Don't create merge commits.)\n * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config\n * @param {Object} [args.author] - The details about the author.\n * @param {string} [args.author.name] - Default is `user.name` config.\n * @param {string} [args.author.email] - Default is `user.email` config.\n * @param {number} [args.author.timestamp=Math.floor(Date.now()/1000)] - Set the author timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).\n * @param {number} [args.author.timezoneOffset] - Set the author timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.\n * @param {Object} [args.committer = author] - The details about the commit committer, in the same format as the author parameter. If not specified, the author details are used.\n * @param {string} [args.committer.name] - Default is `user.name` config.\n * @param {string} [args.committer.email] - Default is `user.email` config.\n * @param {number} [args.committer.timestamp=Math.floor(Date.now()/1000)] - Set the committer timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).\n * @param {number} [args.committer.timezoneOffset] - Set the committer timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.\n * @param {string} [args.signingKey] - passed to [commit](commit.md) when creating a merge commit\n *\n * @returns {Promise<void>} Resolves successfully when pull operation completes\n *\n * @example\n * await git.pull({\n *   fs,\n *   http,\n *   dir: '/tutorial',\n *   ref: 'main',\n *   singleBranch: true\n * })\n * console.log('done')\n *\n */\nfunction _packObjects3() {\n  _packObjects3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    oids,\n    write = false\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('oids', oids);\n      return yield _packObjects({\n        fs: new FileSystem(fs),\n        cache: {},\n        gitdir,\n        oids,\n        write\n      });\n    } catch (err) {\n      err.caller = 'git.packObjects';\n      throw err;\n    }\n  });\n  return _packObjects3.apply(this, arguments);\n}\nfunction pull(_x125) {\n  return _pull3.apply(this, arguments);\n}\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} [args.dir]\n * @param {string} args.gitdir\n * @param {Iterable<string>} args.start\n * @param {Iterable<string>} args.finish\n * @returns {Promise<Set<string>>}\n */\nfunction _pull3() {\n  _pull3 = _asyncToGenerator(function* ({\n    fs: _fs,\n    http,\n    onProgress,\n    onMessage,\n    onAuth,\n    onAuthSuccess,\n    onAuthFailure,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref,\n    url,\n    remote,\n    remoteRef,\n    fastForwardOnly = false,\n    corsProxy,\n    singleBranch,\n    headers = {},\n    author: _author,\n    committer: _committer,\n    signingKey\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      const fs = new FileSystem(_fs);\n      const author = yield normalizeAuthorObject({\n        fs,\n        gitdir,\n        author: _author\n      });\n      if (!author) throw new MissingNameError('author');\n      const committer = yield normalizeCommitterObject({\n        fs,\n        gitdir,\n        author,\n        committer: _committer\n      });\n      if (!committer) throw new MissingNameError('committer');\n      return yield _pull({\n        fs,\n        cache: {},\n        http,\n        onProgress,\n        onMessage,\n        onAuth,\n        onAuthSuccess,\n        onAuthFailure,\n        dir,\n        gitdir,\n        ref,\n        url,\n        remote,\n        remoteRef,\n        fastForwardOnly,\n        corsProxy,\n        singleBranch,\n        headers,\n        author,\n        committer,\n        signingKey\n      });\n    } catch (err) {\n      err.caller = 'git.pull';\n      throw err;\n    }\n  });\n  return _pull3.apply(this, arguments);\n}\nfunction listCommitsAndTags(_x126) {\n  return _listCommitsAndTags.apply(this, arguments);\n}\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} [args.dir]\n * @param {string} args.gitdir\n * @param {Iterable<string>} args.oids\n * @returns {Promise<Set<string>>}\n */\nfunction _listCommitsAndTags() {\n  _listCommitsAndTags = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    dir,\n    gitdir = join(dir, '.git'),\n    start,\n    finish\n  }) {\n    const shallows = yield GitShallowManager.read({\n      fs,\n      gitdir\n    });\n    const startingSet = new Set();\n    const finishingSet = new Set();\n    for (const ref of start) {\n      startingSet.add(yield GitRefManager.resolve({\n        fs,\n        gitdir,\n        ref\n      }));\n    }\n    for (const ref of finish) {\n      // We may not have these refs locally so we must try/catch\n      try {\n        const oid = yield GitRefManager.resolve({\n          fs,\n          gitdir,\n          ref\n        });\n        finishingSet.add(oid);\n      } catch (err) {}\n    }\n    const visited = new Set();\n    // Because git commits are named by their hash, there is no\n    // way to construct a cycle. Therefore we won't worry about\n    // setting a default recursion limit.\n    function walk(_x198) {\n      return _walk4.apply(this, arguments);\n    } // Let's go walking!\n    function _walk4() {\n      _walk4 = _asyncToGenerator(function* (oid) {\n        visited.add(oid);\n        const {\n          type,\n          object\n        } = yield _readObject({\n          fs,\n          cache,\n          gitdir,\n          oid\n        });\n        // Recursively resolve annotated tags\n        if (type === 'tag') {\n          const tag = GitAnnotatedTag.from(object);\n          const commit = tag.headers().object;\n          return walk(commit);\n        }\n        if (type !== 'commit') {\n          throw new ObjectTypeError(oid, type, 'commit');\n        }\n        if (!shallows.has(oid)) {\n          const commit = GitCommit.from(object);\n          const parents = commit.headers().parent;\n          for (oid of parents) {\n            if (!finishingSet.has(oid) && !visited.has(oid)) {\n              yield walk(oid);\n            }\n          }\n        }\n      });\n      return _walk4.apply(this, arguments);\n    }\n    for (const oid of startingSet) {\n      yield walk(oid);\n    }\n    return visited;\n  });\n  return _listCommitsAndTags.apply(this, arguments);\n}\nfunction listObjects(_x127) {\n  return _listObjects.apply(this, arguments);\n}\nfunction _listObjects() {\n  _listObjects = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    dir,\n    gitdir = join(dir, '.git'),\n    oids\n  }) {\n    const visited = new Set();\n    // We don't do the purest simplest recursion, because we can\n    // avoid reading Blob objects entirely since the Tree objects\n    // tell us which oids are Blobs and which are Trees.\n    function walk(_x199) {\n      return _walk5.apply(this, arguments);\n    } // Let's go walking!\n    function _walk5() {\n      _walk5 = _asyncToGenerator(function* (oid) {\n        if (visited.has(oid)) return;\n        visited.add(oid);\n        const {\n          type,\n          object\n        } = yield _readObject({\n          fs,\n          cache,\n          gitdir,\n          oid\n        });\n        if (type === 'tag') {\n          const tag = GitAnnotatedTag.from(object);\n          const obj = tag.headers().object;\n          yield walk(obj);\n        } else if (type === 'commit') {\n          const commit = GitCommit.from(object);\n          const tree = commit.headers().tree;\n          yield walk(tree);\n        } else if (type === 'tree') {\n          const tree = GitTree.from(object);\n          for (const entry of tree) {\n            // add blobs to the set\n            // skip over submodules whose type is 'commit'\n            if (entry.type === 'blob') {\n              visited.add(entry.oid);\n            }\n            // recurse for trees\n            if (entry.type === 'tree') {\n              yield walk(entry.oid);\n            }\n          }\n        }\n      });\n      return _walk5.apply(this, arguments);\n    }\n    for (const oid of oids) {\n      yield walk(oid);\n    }\n    return visited;\n  });\n  return _listObjects.apply(this, arguments);\n}\nfunction parseReceivePackResponse(_x128) {\n  return _parseReceivePackResponse.apply(this, arguments);\n}\nfunction _parseReceivePackResponse() {\n  _parseReceivePackResponse = _asyncToGenerator(function* (packfile) {\n    /** @type PushResult */\n    const result = {};\n    let response = '';\n    const read = GitPktLine.streamReader(packfile);\n    let line = yield read();\n    while (line !== true) {\n      if (line !== null) response += line.toString('utf8') + '\\n';\n      line = yield read();\n    }\n    const lines = response.toString('utf8').split('\\n');\n    // We're expecting \"unpack {unpack-result}\"\n    line = lines.shift();\n    if (!line.startsWith('unpack ')) {\n      throw new ParseError('unpack ok\" or \"unpack [error message]', line);\n    }\n    result.ok = line === 'unpack ok';\n    if (!result.ok) {\n      result.error = line.slice('unpack '.length);\n    }\n    result.refs = {};\n    for (const line of lines) {\n      if (line.trim() === '') continue;\n      const status = line.slice(0, 2);\n      const refAndMessage = line.slice(3);\n      let space = refAndMessage.indexOf(' ');\n      if (space === -1) space = refAndMessage.length;\n      const ref = refAndMessage.slice(0, space);\n      const error = refAndMessage.slice(space + 1);\n      result.refs[ref] = {\n        ok: status === 'ok',\n        error\n      };\n    }\n    return result;\n  });\n  return _parseReceivePackResponse.apply(this, arguments);\n}\nfunction writeReceivePackRequest(_x129) {\n  return _writeReceivePackRequest.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {HttpClient} args.http\n * @param {ProgressCallback} [args.onProgress]\n * @param {MessageCallback} [args.onMessage]\n * @param {AuthCallback} [args.onAuth]\n * @param {AuthFailureCallback} [args.onAuthFailure]\n * @param {AuthSuccessCallback} [args.onAuthSuccess]\n * @param {string} args.gitdir\n * @param {string} [args.ref]\n * @param {string} [args.remoteRef]\n * @param {string} [args.remote]\n * @param {boolean} [args.force = false]\n * @param {boolean} [args.delete = false]\n * @param {string} [args.url]\n * @param {string} [args.corsProxy]\n * @param {Object<string, string>} [args.headers]\n *\n * @returns {Promise<PushResult>}\n */\nfunction _writeReceivePackRequest() {\n  _writeReceivePackRequest = _asyncToGenerator(function* ({\n    capabilities = [],\n    triplets = []\n  }) {\n    const packstream = [];\n    let capsFirstLine = `\\x00 ${capabilities.join(' ')}`;\n    for (const trip of triplets) {\n      packstream.push(GitPktLine.encode(`${trip.oldoid} ${trip.oid} ${trip.fullRef}${capsFirstLine}\\n`));\n      capsFirstLine = '';\n    }\n    packstream.push(GitPktLine.flush());\n    return packstream;\n  });\n  return _writeReceivePackRequest.apply(this, arguments);\n}\nfunction _push(_x130) {\n  return _push2.apply(this, arguments);\n} // @ts-check\n/**\n * Push a branch or tag\n *\n * The push command returns an object that describes the result of the attempted push operation.\n * *Notes:* If there were no errors, then there will be no `errors` property. There can be a mix of `ok` messages and `errors` messages.\n *\n * | param  | type [= default] | description                                                                                                                                                                                                      |\n * | ------ | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n * | ok     | Array\\<string\\>  | The first item is \"unpack\" if the overall operation was successful. The remaining items are the names of refs that were updated successfully.                                                                    |\n * | errors | Array\\<string\\>  | If the overall operation threw and error, the first item will be \"unpack {Overall error message}\". The remaining items are individual refs that failed to be updated in the format \"{ref name} {error message}\". |\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {HttpClient} args.http - an HTTP client\n * @param {ProgressCallback} [args.onProgress] - optional progress event callback\n * @param {MessageCallback} [args.onMessage] - optional message event callback\n * @param {AuthCallback} [args.onAuth] - optional auth fill callback\n * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback\n * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.ref] - Which branch to push. By default this is the currently checked out branch.\n * @param {string} [args.url] - The URL of the remote repository. The default is the value set in the git config for that remote.\n * @param {string} [args.remote] - If URL is not specified, determines which remote to use.\n * @param {string} [args.remoteRef] - The name of the receiving branch on the remote. By default this is the configured remote tracking branch.\n * @param {boolean} [args.force = false] - If true, behaves the same as `git push --force`\n * @param {boolean} [args.delete = false] - If true, delete the remote ref\n * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.\n * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config\n *\n * @returns {Promise<PushResult>} Resolves successfully when push completes with a detailed description of the operation from the server.\n * @see PushResult\n * @see RefUpdateStatus\n *\n * @example\n * let pushResult = await git.push({\n *   fs,\n *   http,\n *   dir: '/tutorial',\n *   remote: 'origin',\n *   ref: 'main',\n *   onAuth: () => ({ username: process.env.GITHUB_TOKEN }),\n * })\n * console.log(pushResult)\n *\n */\nfunction _push2() {\n  _push2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    http,\n    onProgress,\n    onMessage,\n    onAuth,\n    onAuthSuccess,\n    onAuthFailure,\n    gitdir,\n    ref: _ref,\n    remoteRef: _remoteRef,\n    remote,\n    url: _url,\n    force = false,\n    delete: _delete = false,\n    corsProxy,\n    headers = {}\n  }) {\n    const ref = _ref || (yield _currentBranch({\n      fs,\n      gitdir\n    }));\n    if (typeof ref === 'undefined') {\n      throw new MissingParameterError('ref');\n    }\n    const config = yield GitConfigManager.get({\n      fs,\n      gitdir\n    });\n    // Figure out what remote to use.\n    remote = remote || (yield config.get(`branch.${ref}.pushRemote`)) || (yield config.get('remote.pushDefault')) || (yield config.get(`branch.${ref}.remote`)) || 'origin';\n    // Lookup the URL for the given remote.\n    const url = _url || (yield config.get(`remote.${remote}.pushurl`)) || (yield config.get(`remote.${remote}.url`));\n    if (typeof url === 'undefined') {\n      throw new MissingParameterError('remote OR url');\n    }\n    // Figure out what remote ref to use.\n    const remoteRef = _remoteRef || (yield config.get(`branch.${ref}.merge`));\n    if (typeof url === 'undefined') {\n      throw new MissingParameterError('remoteRef');\n    }\n    if (corsProxy === undefined) {\n      corsProxy = yield config.get('http.corsProxy');\n    }\n    const fullRef = yield GitRefManager.expand({\n      fs,\n      gitdir,\n      ref\n    });\n    const oid = _delete ? '0000000000000000000000000000000000000000' : yield GitRefManager.resolve({\n      fs,\n      gitdir,\n      ref: fullRef\n    });\n\n    /** @type typeof import(\"../managers/GitRemoteHTTP\").GitRemoteHTTP */\n    const GitRemoteHTTP = GitRemoteManager.getRemoteHelperFor({\n      url\n    });\n    const httpRemote = yield GitRemoteHTTP.discover({\n      http,\n      onAuth,\n      onAuthSuccess,\n      onAuthFailure,\n      corsProxy,\n      service: 'git-receive-pack',\n      url,\n      headers,\n      protocolVersion: 1\n    });\n    const auth = httpRemote.auth; // hack to get new credentials from CredentialManager API\n    let fullRemoteRef;\n    if (!remoteRef) {\n      fullRemoteRef = fullRef;\n    } else {\n      try {\n        fullRemoteRef = yield GitRefManager.expandAgainstMap({\n          ref: remoteRef,\n          map: httpRemote.refs\n        });\n      } catch (err) {\n        if (err instanceof NotFoundError) {\n          // The remote reference doesn't exist yet.\n          // If it is fully specified, use that value. Otherwise, treat it as a branch.\n          fullRemoteRef = remoteRef.startsWith('refs/') ? remoteRef : `refs/heads/${remoteRef}`;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const oldoid = httpRemote.refs.get(fullRemoteRef) || '0000000000000000000000000000000000000000';\n\n    // Remotes can always accept thin-packs UNLESS they specify the 'no-thin' capability\n    const thinPack = !httpRemote.capabilities.has('no-thin');\n    let objects = new Set();\n    if (!_delete) {\n      const finish = [...httpRemote.refs.values()];\n      let skipObjects = new Set();\n\n      // If remote branch is present, look for a common merge base.\n      if (oldoid !== '0000000000000000000000000000000000000000') {\n        // trick to speed up common force push scenarios\n        const mergebase = yield _findMergeBase({\n          fs,\n          cache,\n          gitdir,\n          oids: [oid, oldoid]\n        });\n        for (const oid of mergebase) finish.push(oid);\n        if (thinPack) {\n          skipObjects = yield listObjects({\n            fs,\n            cache,\n            gitdir,\n            oids: mergebase\n          });\n        }\n      }\n\n      // If remote does not have the commit, figure out the objects to send\n      if (!finish.includes(oid)) {\n        const commits = yield listCommitsAndTags({\n          fs,\n          cache,\n          gitdir,\n          start: [oid],\n          finish\n        });\n        objects = yield listObjects({\n          fs,\n          cache,\n          gitdir,\n          oids: commits\n        });\n      }\n      if (thinPack) {\n        // If there's a default branch for the remote lets skip those objects too.\n        // Since this is an optional optimization, we just catch and continue if there is\n        // an error (because we can't find a default branch, or can't find a commit, etc)\n        try {\n          // Sadly, the discovery phase with 'forPush' doesn't return symrefs, so we have to\n          // rely on existing ones.\n          const ref = yield GitRefManager.resolve({\n            fs,\n            gitdir,\n            ref: `refs/remotes/${remote}/HEAD`,\n            depth: 2\n          });\n          const {\n            oid\n          } = yield GitRefManager.resolveAgainstMap({\n            ref: ref.replace(`refs/remotes/${remote}/`, ''),\n            fullref: ref,\n            map: httpRemote.refs\n          });\n          const oids = [oid];\n          for (const oid of yield listObjects({\n            fs,\n            cache,\n            gitdir,\n            oids\n          })) {\n            skipObjects.add(oid);\n          }\n        } catch (e) {}\n\n        // Remove objects that we know the remote already has\n        for (const oid of skipObjects) {\n          objects.delete(oid);\n        }\n      }\n      if (!force) {\n        // Is it a tag that already exists?\n        if (fullRef.startsWith('refs/tags') && oldoid !== '0000000000000000000000000000000000000000') {\n          throw new PushRejectedError('tag-exists');\n        }\n        // Is it a non-fast-forward commit?\n        if (oid !== '0000000000000000000000000000000000000000' && oldoid !== '0000000000000000000000000000000000000000' && !(yield _isDescendent({\n          fs,\n          cache,\n          gitdir,\n          oid,\n          ancestor: oldoid,\n          depth: -1\n        }))) {\n          throw new PushRejectedError('not-fast-forward');\n        }\n      }\n    }\n    // We can only safely use capabilities that the server also understands.\n    // For instance, AWS CodeCommit aborts a push if you include the `agent`!!!\n    const capabilities = filterCapabilities([...httpRemote.capabilities], ['report-status', 'side-band-64k', `agent=${pkg.agent}`]);\n    const packstream1 = yield writeReceivePackRequest({\n      capabilities,\n      triplets: [{\n        oldoid,\n        oid,\n        fullRef: fullRemoteRef\n      }]\n    });\n    const packstream2 = _delete ? [] : yield _pack({\n      fs,\n      cache,\n      gitdir,\n      oids: [...objects]\n    });\n    const res = yield GitRemoteHTTP.connect({\n      http,\n      onProgress,\n      corsProxy,\n      service: 'git-receive-pack',\n      url,\n      auth,\n      headers,\n      body: [...packstream1, ...packstream2]\n    });\n    const {\n      packfile,\n      progress\n    } = yield GitSideBand.demux(res.body);\n    if (onMessage) {\n      const lines = splitLines(progress);\n      forAwait(lines, /*#__PURE__*/function () {\n        var _ref35 = _asyncToGenerator(function* (line) {\n          yield onMessage(line);\n        });\n        return function (_x200) {\n          return _ref35.apply(this, arguments);\n        };\n      }());\n    }\n    // Parse the response!\n    const result = yield parseReceivePackResponse(packfile);\n    if (res.headers) {\n      result.headers = res.headers;\n    }\n\n    // Update the local copy of the remote ref\n    if (remote && result.ok && result.refs[fullRemoteRef].ok) {\n      // TODO: I think this should actually be using a refspec transform rather than assuming 'refs/remotes/{remote}'\n      const ref = `refs/remotes/${remote}/${fullRemoteRef.replace('refs/heads', '')}`;\n      if (_delete) {\n        yield GitRefManager.deleteRef({\n          fs,\n          gitdir,\n          ref\n        });\n      } else {\n        yield GitRefManager.writeRef({\n          fs,\n          gitdir,\n          ref,\n          value: oid\n        });\n      }\n    }\n    if (result.ok && Object.values(result.refs).every(result => result.ok)) {\n      return result;\n    } else {\n      const prettyDetails = Object.entries(result.refs).filter(([k, v]) => !v.ok).map(([k, v]) => `\\n  - ${k}: ${v.error}`).join('');\n      throw new GitPushError(prettyDetails, result);\n    }\n  });\n  return _push2.apply(this, arguments);\n}\nfunction push(_x131) {\n  return _push3.apply(this, arguments);\n}\nfunction _push3() {\n  _push3 = _asyncToGenerator(function* ({\n    fs,\n    http,\n    onProgress,\n    onMessage,\n    onAuth,\n    onAuthSuccess,\n    onAuthFailure,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref,\n    remoteRef,\n    remote = 'origin',\n    url,\n    force = false,\n    delete: _delete = false,\n    corsProxy,\n    headers = {}\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('http', http);\n      assertParameter('gitdir', gitdir);\n      return yield _push({\n        fs: new FileSystem(fs),\n        cache: {},\n        http,\n        onProgress,\n        onMessage,\n        onAuth,\n        onAuthSuccess,\n        onAuthFailure,\n        gitdir,\n        ref,\n        remoteRef,\n        remote,\n        url,\n        force,\n        delete: _delete,\n        corsProxy,\n        headers\n      });\n    } catch (err) {\n      err.caller = 'git.push';\n      throw err;\n    }\n  });\n  return _push3.apply(this, arguments);\n}\nfunction resolveBlob(_x132) {\n  return _resolveBlob.apply(this, arguments);\n} // @ts-check\n/**\n *\n * @typedef {Object} ReadBlobResult - The object returned has the following schema:\n * @property {string} oid\n * @property {Uint8Array} blob\n *\n */\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} args.gitdir\n * @param {string} args.oid\n * @param {string} [args.filepath]\n *\n * @returns {Promise<ReadBlobResult>} Resolves successfully with a blob object description\n * @see ReadBlobResult\n */\nfunction _resolveBlob() {\n  _resolveBlob = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid\n  }) {\n    const {\n      type,\n      object\n    } = yield _readObject({\n      fs,\n      cache,\n      gitdir,\n      oid\n    });\n    // Resolve annotated tag objects to whatever\n    if (type === 'tag') {\n      oid = GitAnnotatedTag.from(object).parse().object;\n      return resolveBlob({\n        fs,\n        cache,\n        gitdir,\n        oid\n      });\n    }\n    if (type !== 'blob') {\n      throw new ObjectTypeError(oid, type, 'blob');\n    }\n    return {\n      oid,\n      blob: new Uint8Array(object)\n    };\n  });\n  return _resolveBlob.apply(this, arguments);\n}\nfunction _readBlob(_x133) {\n  return _readBlob2.apply(this, arguments);\n} // @ts-check\n/**\n *\n * @typedef {Object} ReadBlobResult - The object returned has the following schema:\n * @property {string} oid\n * @property {Uint8Array} blob\n *\n */\n/**\n * Read a blob object directly\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.oid - The SHA-1 object id to get. Annotated tags, commits, and trees are peeled.\n * @param {string} [args.filepath] - Don't return the object with `oid` itself, but resolve `oid` to a tree and then return the blob object at that filepath.\n *\n * @returns {Promise<ReadBlobResult>} Resolves successfully with a blob object description\n * @see ReadBlobResult\n *\n * @example\n * // Get the contents of 'README.md' in the main branch.\n * let commitOid = await git.resolveRef({ fs, dir: '/tutorial', ref: 'main' })\n * console.log(commitOid)\n * let { blob } = await git.readBlob({\n *   fs,\n *   dir: '/tutorial',\n *   oid: commitOid,\n *   filepath: 'README.md'\n * })\n * console.log(Buffer.from(blob).toString('utf8'))\n *\n */\nfunction _readBlob2() {\n  _readBlob2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid,\n    filepath = undefined\n  }) {\n    if (filepath !== undefined) {\n      oid = yield resolveFilepath({\n        fs,\n        cache,\n        gitdir,\n        oid,\n        filepath\n      });\n    }\n    const blob = yield resolveBlob({\n      fs,\n      cache,\n      gitdir,\n      oid\n    });\n    return blob;\n  });\n  return _readBlob2.apply(this, arguments);\n}\nfunction readBlob(_x134) {\n  return _readBlob3.apply(this, arguments);\n} // @ts-check\n/**\n * Read a commit object directly\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.oid - The SHA-1 object id to get. Annotated tags are peeled.\n *\n * @returns {Promise<ReadCommitResult>} Resolves successfully with a git commit object\n * @see ReadCommitResult\n * @see CommitObject\n *\n * @example\n * // Read a commit object\n * let sha = await git.resolveRef({ fs, dir: '/tutorial', ref: 'main' })\n * console.log(sha)\n * let commit = await git.readCommit({ fs, dir: '/tutorial', oid: sha })\n * console.log(commit)\n *\n */\nfunction _readBlob3() {\n  _readBlob3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    oid,\n    filepath\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('oid', oid);\n      return yield _readBlob({\n        fs: new FileSystem(fs),\n        cache: {},\n        gitdir,\n        oid,\n        filepath\n      });\n    } catch (err) {\n      err.caller = 'git.readBlob';\n      throw err;\n    }\n  });\n  return _readBlob3.apply(this, arguments);\n}\nfunction readCommit(_x135) {\n  return _readCommit3.apply(this, arguments);\n} // @ts-check\n/**\n * Read the contents of a note\n *\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} args.gitdir\n * @param {string} [args.ref] - The notes ref to look under\n * @param {string} args.oid\n *\n * @returns {Promise<Uint8Array>} Resolves successfully with note contents as a Buffer.\n */\nfunction _readCommit3() {\n  _readCommit3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    oid\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('oid', oid);\n      return yield _readCommit({\n        fs: new FileSystem(fs),\n        cache: {},\n        gitdir,\n        oid\n      });\n    } catch (err) {\n      err.caller = 'git.readCommit';\n      throw err;\n    }\n  });\n  return _readCommit3.apply(this, arguments);\n}\nfunction _readNote(_x136) {\n  return _readNote2.apply(this, arguments);\n} // @ts-check\n/**\n * Read the contents of a note\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.ref] - The notes ref to look under\n * @param {string} args.oid - The SHA-1 object id of the object to get the note for.\n *\n * @returns {Promise<Uint8Array>} Resolves successfully with note contents as a Buffer.\n */\nfunction _readNote2() {\n  _readNote2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    ref = 'refs/notes/commits',\n    oid\n  }) {\n    const parent = yield GitRefManager.resolve({\n      gitdir,\n      fs,\n      ref\n    });\n    const {\n      blob\n    } = yield _readBlob({\n      fs,\n      cache,\n      gitdir,\n      oid: parent,\n      filepath: oid\n    });\n    return blob;\n  });\n  return _readNote2.apply(this, arguments);\n}\nfunction readNote(_x137) {\n  return _readNote3.apply(this, arguments);\n} // @ts-check\n/**\n *\n * @typedef {Object} DeflatedObject\n * @property {string} oid\n * @property {'deflated'} type\n * @property {'deflated'} format\n * @property {Uint8Array} object\n * @property {string} [source]\n *\n */\n/**\n *\n * @typedef {Object} WrappedObject\n * @property {string} oid\n * @property {'wrapped'} type\n * @property {'wrapped'} format\n * @property {Uint8Array} object\n * @property {string} [source]\n *\n */\n/**\n *\n * @typedef {Object} RawObject\n * @property {string} oid\n * @property {'blob'|'commit'|'tree'|'tag'} type\n * @property {'content'} format\n * @property {Uint8Array} object\n * @property {string} [source]\n *\n */\n/**\n *\n * @typedef {Object} ParsedBlobObject\n * @property {string} oid\n * @property {'blob'} type\n * @property {'parsed'} format\n * @property {string} object\n * @property {string} [source]\n *\n */\n/**\n *\n * @typedef {Object} ParsedCommitObject\n * @property {string} oid\n * @property {'commit'} type\n * @property {'parsed'} format\n * @property {CommitObject} object\n * @property {string} [source]\n *\n */\n/**\n *\n * @typedef {Object} ParsedTreeObject\n * @property {string} oid\n * @property {'tree'} type\n * @property {'parsed'} format\n * @property {TreeObject} object\n * @property {string} [source]\n *\n */\n/**\n *\n * @typedef {Object} ParsedTagObject\n * @property {string} oid\n * @property {'tag'} type\n * @property {'parsed'} format\n * @property {TagObject} object\n * @property {string} [source]\n *\n */\n/**\n *\n * @typedef {ParsedBlobObject | ParsedCommitObject | ParsedTreeObject | ParsedTagObject} ParsedObject\n */\n/**\n *\n * @typedef {DeflatedObject | WrappedObject | RawObject | ParsedObject } ReadObjectResult\n */\n/**\n * Read a git object directly by its SHA-1 object id\n *\n * Regarding `ReadObjectResult`:\n *\n * - `oid` will be the same as the `oid` argument unless the `filepath` argument is provided, in which case it will be the oid of the tree or blob being returned.\n * - `type` of deflated objects is `'deflated'`, and `type` of wrapped objects is `'wrapped'`\n * - `format` is usually, but not always, the format you requested. Packfiles do not store each object individually compressed so if you end up reading the object from a packfile it will be returned in format 'content' even if you requested 'deflated' or 'wrapped'.\n * - `object` will be an actual Object if format is 'parsed' and the object is a commit, tree, or annotated tag. Blobs are still formatted as Buffers unless an encoding is provided in which case they'll be strings. If format is anything other than 'parsed', object will be a Buffer.\n * - `source` is the name of the packfile or loose object file where the object was found.\n *\n * The `format` parameter can have the following values:\n *\n * | param      | description                                                                                                                                                                                               |\n * | ---------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n * | 'deflated' | Return the raw deflate-compressed buffer for an object if possible. Useful for efficiently shuffling around loose objects when you don't care about the contents and can save time by not inflating them. |\n * | 'wrapped'  | Return the inflated object buffer wrapped in the git object header if possible. This is the raw data used when calculating the SHA-1 object id of a git object.                                           |\n * | 'content'  | Return the object buffer without the git header.                                                                                                                                                          |\n * | 'parsed'   | Returns a parsed representation of the object.                                                                                                                                                            |\n *\n * The result will be in one of the following schemas:\n *\n * ## `'deflated'` format\n *\n * {@link DeflatedObject typedef}\n *\n * ## `'wrapped'` format\n *\n * {@link WrappedObject typedef}\n *\n * ## `'content'` format\n *\n * {@link RawObject typedef}\n *\n * ## `'parsed'` format\n *\n * ### parsed `'blob'` type\n *\n * {@link ParsedBlobObject typedef}\n *\n * ### parsed `'commit'` type\n *\n * {@link ParsedCommitObject typedef}\n * {@link CommitObject typedef}\n *\n * ### parsed `'tree'` type\n *\n * {@link ParsedTreeObject typedef}\n * {@link TreeObject typedef}\n * {@link TreeEntry typedef}\n *\n * ### parsed `'tag'` type\n *\n * {@link ParsedTagObject typedef}\n * {@link TagObject typedef}\n *\n * @deprecated\n * > This command is overly complicated.\n * >\n * > If you know the type of object you are reading, use [`readBlob`](./readBlob.md), [`readCommit`](./readCommit.md), [`readTag`](./readTag.md), or [`readTree`](./readTree.md).\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.oid - The SHA-1 object id to get\n * @param {'deflated' | 'wrapped' | 'content' | 'parsed'} [args.format = 'parsed'] - What format to return the object in. The choices are described in more detail below.\n * @param {string} [args.filepath] - Don't return the object with `oid` itself, but resolve `oid` to a tree and then return the object at that filepath. To return the root directory of a tree set filepath to `''`\n * @param {string} [args.encoding] - A convenience argument that only affects blobs. Instead of returning `object` as a buffer, it returns a string parsed using the given encoding.\n *\n * @returns {Promise<ReadObjectResult>} Resolves successfully with a git object description\n * @see ReadObjectResult\n *\n * @example\n * // Given a ransom SHA-1 object id, figure out what it is\n * let { type, object } = await git.readObject({\n *   fs,\n *   dir: '/tutorial',\n *   oid: '0698a781a02264a6f37ba3ff41d78067eaf0f075'\n * })\n * switch (type) {\n *   case 'commit': {\n *     console.log(object)\n *     break\n *   }\n *   case 'tree': {\n *     console.log(object)\n *     break\n *   }\n *   case 'blob': {\n *     console.log(object)\n *     break\n *   }\n *   case 'tag': {\n *     console.log(object)\n *     break\n *   }\n * }\n *\n */\nfunction _readNote3() {\n  _readNote3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref = 'refs/notes/commits',\n    oid\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('ref', ref);\n      assertParameter('oid', oid);\n      return yield _readNote({\n        fs: new FileSystem(fs),\n        cache: {},\n        gitdir,\n        ref,\n        oid\n      });\n    } catch (err) {\n      err.caller = 'git.readNote';\n      throw err;\n    }\n  });\n  return _readNote3.apply(this, arguments);\n}\nfunction readObject(_x138) {\n  return _readObject3.apply(this, arguments);\n} // @ts-check\n/**\n *\n * @typedef {Object} ReadTagResult - The object returned has the following schema:\n * @property {string} oid - SHA-1 object id of this tag\n * @property {TagObject} tag - the parsed tag object\n * @property {string} payload - PGP signing payload\n */\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {any} args.cache\n * @param {string} args.gitdir\n * @param {string} args.oid\n *\n * @returns {Promise<ReadTagResult>}\n */\nfunction _readObject3() {\n  _readObject3 = _asyncToGenerator(function* ({\n    fs: _fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    oid,\n    format = 'parsed',\n    filepath = undefined,\n    encoding = undefined\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('oid', oid);\n      const cache = {};\n      const fs = new FileSystem(_fs);\n      if (filepath !== undefined) {\n        oid = yield resolveFilepath({\n          fs,\n          cache,\n          gitdir,\n          oid,\n          filepath\n        });\n      }\n      // GitObjectManager does not know how to parse content, so we tweak that parameter before passing it.\n      const _format = format === 'parsed' ? 'content' : format;\n      const result = yield _readObject({\n        fs,\n        cache,\n        gitdir,\n        oid,\n        format: _format\n      });\n      result.oid = oid;\n      if (format === 'parsed') {\n        result.format = 'parsed';\n        switch (result.type) {\n          case 'commit':\n            result.object = GitCommit.from(result.object).parse();\n            break;\n          case 'tree':\n            result.object = GitTree.from(result.object).entries();\n            break;\n          case 'blob':\n            // Here we consider returning a raw Buffer as the 'content' format\n            // and returning a string as the 'parsed' format\n            if (encoding) {\n              result.object = result.object.toString(encoding);\n            } else {\n              result.object = new Uint8Array(result.object);\n              result.format = 'content';\n            }\n            break;\n          case 'tag':\n            result.object = GitAnnotatedTag.from(result.object).parse();\n            break;\n          default:\n            throw new ObjectTypeError(result.oid, result.type, 'blob|commit|tag|tree');\n        }\n      } else if (result.format === 'deflated' || result.format === 'wrapped') {\n        result.type = result.format;\n      }\n      return result;\n    } catch (err) {\n      err.caller = 'git.readObject';\n      throw err;\n    }\n  });\n  return _readObject3.apply(this, arguments);\n}\nfunction _readTag(_x139) {\n  return _readTag2.apply(this, arguments);\n}\n/**\n *\n * @typedef {Object} ReadTagResult - The object returned has the following schema:\n * @property {string} oid - SHA-1 object id of this tag\n * @property {TagObject} tag - the parsed tag object\n * @property {string} payload - PGP signing payload\n */\n/**\n * Read an annotated tag object directly\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.oid - The SHA-1 object id to get\n *\n * @returns {Promise<ReadTagResult>} Resolves successfully with a git object description\n * @see ReadTagResult\n * @see TagObject\n *\n */\nfunction _readTag2() {\n  _readTag2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    oid\n  }) {\n    const {\n      type,\n      object\n    } = yield _readObject({\n      fs,\n      cache,\n      gitdir,\n      oid,\n      format: 'content'\n    });\n    if (type !== 'tag') {\n      throw new ObjectTypeError(oid, type, 'tag');\n    }\n    const tag = GitAnnotatedTag.from(object);\n    const result = {\n      oid,\n      tag: tag.parse(),\n      payload: tag.payload()\n    };\n    // @ts-ignore\n    return result;\n  });\n  return _readTag2.apply(this, arguments);\n}\nfunction readTag(_x140) {\n  return _readTag3.apply(this, arguments);\n} // @ts-check\n/**\n *\n * @typedef {Object} ReadTreeResult - The object returned has the following schema:\n * @property {string} oid - SHA-1 object id of this tree\n * @property {TreeObject} tree - the parsed tree object\n */\n/**\n * Read a tree object directly\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.oid - The SHA-1 object id to get. Annotated tags and commits are peeled.\n * @param {string} [args.filepath] - Don't return the object with `oid` itself, but resolve `oid` to a tree and then return the tree object at that filepath.\n *\n * @returns {Promise<ReadTreeResult>} Resolves successfully with a git tree object\n * @see ReadTreeResult\n * @see TreeObject\n * @see TreeEntry\n *\n */\nfunction _readTag3() {\n  _readTag3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    oid\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('oid', oid);\n      return yield _readTag({\n        fs: new FileSystem(fs),\n        cache: {},\n        gitdir,\n        oid\n      });\n    } catch (err) {\n      err.caller = 'git.readTag';\n      throw err;\n    }\n  });\n  return _readTag3.apply(this, arguments);\n}\nfunction readTree(_x141) {\n  return _readTree3.apply(this, arguments);\n} // @ts-check\n/**\n * Remove a file from the git index (aka staging area)\n *\n * Note that this does NOT delete the file in the working directory.\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.filepath - The path to the file to remove from the index\n *\n * @returns {Promise<void>} Resolves successfully once the git index has been updated\n *\n * @example\n * await git.remove({ fs, dir: '/tutorial', filepath: 'README.md' })\n * console.log('done')\n *\n */\nfunction _readTree3() {\n  _readTree3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    oid,\n    filepath = undefined\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('oid', oid);\n      return yield _readTree({\n        fs: new FileSystem(fs),\n        cache: {},\n        gitdir,\n        oid,\n        filepath\n      });\n    } catch (err) {\n      err.caller = 'git.readTree';\n      throw err;\n    }\n  });\n  return _readTree3.apply(this, arguments);\n}\nfunction remove(_x142) {\n  return _remove.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {object} args.cache\n * @param {SignCallback} [args.onSign]\n * @param {string} [args.dir]\n * @param {string} [args.gitdir=join(dir,'.git')]\n * @param {string} [args.ref]\n * @param {string} args.oid\n * @param {Object} args.author\n * @param {string} args.author.name\n * @param {string} args.author.email\n * @param {number} args.author.timestamp\n * @param {number} args.author.timezoneOffset\n * @param {Object} args.committer\n * @param {string} args.committer.name\n * @param {string} args.committer.email\n * @param {number} args.committer.timestamp\n * @param {number} args.committer.timezoneOffset\n * @param {string} [args.signingKey]\n *\n * @returns {Promise<string>}\n */\nfunction _remove() {\n  _remove = _asyncToGenerator(function* ({\n    fs: _fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    filepath\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('filepath', filepath);\n      const cache = {};\n      yield GitIndexManager.acquire({\n        fs: new FileSystem(_fs),\n        gitdir,\n        cache\n      }, /*#__PURE__*/function () {\n        var _ref36 = _asyncToGenerator(function* (index) {\n          index.delete({\n            filepath\n          });\n        });\n        return function (_x201) {\n          return _ref36.apply(this, arguments);\n        };\n      }());\n    } catch (err) {\n      err.caller = 'git.remove';\n      throw err;\n    }\n  });\n  return _remove.apply(this, arguments);\n}\nfunction _removeNote(_x143) {\n  return _removeNote2.apply(this, arguments);\n} // @ts-check\n/**\n * Remove an object note\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {SignCallback} [args.onSign] - a PGP signing implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.ref] - The notes ref to look under\n * @param {string} args.oid - The SHA-1 object id of the object to remove the note from.\n * @param {Object} [args.author] - The details about the author.\n * @param {string} [args.author.name] - Default is `user.name` config.\n * @param {string} [args.author.email] - Default is `user.email` config.\n * @param {number} [args.author.timestamp=Math.floor(Date.now()/1000)] - Set the author timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).\n * @param {number} [args.author.timezoneOffset] - Set the author timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.\n * @param {Object} [args.committer = author] - The details about the note committer, in the same format as the author parameter. If not specified, the author details are used.\n * @param {string} [args.committer.name] - Default is `user.name` config.\n * @param {string} [args.committer.email] - Default is `user.email` config.\n * @param {number} [args.committer.timestamp=Math.floor(Date.now()/1000)] - Set the committer timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).\n * @param {number} [args.committer.timezoneOffset] - Set the committer timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.\n * @param {string} [args.signingKey] - Sign the tag object using this private PGP key.\n *\n * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the commit object for the note removal.\n */\nfunction _removeNote2() {\n  _removeNote2 = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    onSign,\n    gitdir,\n    ref = 'refs/notes/commits',\n    oid,\n    author,\n    committer,\n    signingKey\n  }) {\n    // Get the current note commit\n    let parent;\n    try {\n      parent = yield GitRefManager.resolve({\n        gitdir,\n        fs,\n        ref\n      });\n    } catch (err) {\n      if (!(err instanceof NotFoundError)) {\n        throw err;\n      }\n    }\n\n    // I'm using the \"empty tree\" magic number here for brevity\n    const result = yield _readTree({\n      fs,\n      gitdir,\n      oid: parent || '4b825dc642cb6eb9a060e54bf8d69288fbee4904'\n    });\n    let tree = result.tree;\n\n    // Remove the note blob entry from the tree\n    tree = tree.filter(entry => entry.path !== oid);\n\n    // Create the new note tree\n    const treeOid = yield _writeTree({\n      fs,\n      gitdir,\n      tree\n    });\n\n    // Create the new note commit\n    const commitOid = yield _commit({\n      fs,\n      cache,\n      onSign,\n      gitdir,\n      ref,\n      tree: treeOid,\n      parent: parent && [parent],\n      message: `Note removed by 'isomorphic-git removeNote'\\n`,\n      author,\n      committer,\n      signingKey\n    });\n    return commitOid;\n  });\n  return _removeNote2.apply(this, arguments);\n}\nfunction removeNote(_x144) {\n  return _removeNote3.apply(this, arguments);\n} // @ts-check\n/**\n * Rename a branch\n *\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.gitdir\n * @param {string} args.ref - The name of the new branch\n * @param {string} args.oldref - The name of the old branch\n * @param {boolean} [args.checkout = false]\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n */\nfunction _removeNote3() {\n  _removeNote3 = _asyncToGenerator(function* ({\n    fs: _fs,\n    onSign,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref = 'refs/notes/commits',\n    oid,\n    author: _author,\n    committer: _committer,\n    signingKey\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('oid', oid);\n      const fs = new FileSystem(_fs);\n      const cache = {};\n      const author = yield normalizeAuthorObject({\n        fs,\n        gitdir,\n        author: _author\n      });\n      if (!author) throw new MissingNameError('author');\n      const committer = yield normalizeCommitterObject({\n        fs,\n        gitdir,\n        author,\n        committer: _committer\n      });\n      if (!committer) throw new MissingNameError('committer');\n      return yield _removeNote({\n        fs,\n        cache,\n        onSign,\n        gitdir,\n        ref,\n        oid,\n        author,\n        committer,\n        signingKey\n      });\n    } catch (err) {\n      err.caller = 'git.removeNote';\n      throw err;\n    }\n  });\n  return _removeNote3.apply(this, arguments);\n}\nfunction _renameBranch(_x145) {\n  return _renameBranch2.apply(this, arguments);\n} // @ts-check\n/**\n * Rename a branch\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.ref - What to name the branch\n * @param {string} args.oldref - What the name of the branch was\n * @param {boolean} [args.checkout = false] - Update `HEAD` to point at the newly created branch\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.renameBranch({ fs, dir: '/tutorial', ref: 'main', oldref: 'master' })\n * console.log('done')\n *\n */\nfunction _renameBranch2() {\n  _renameBranch2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    oldref,\n    ref,\n    checkout = false\n  }) {\n    if (ref !== cleanGitRef.clean(ref)) {\n      throw new InvalidRefNameError(ref, cleanGitRef.clean(ref));\n    }\n    if (oldref !== cleanGitRef.clean(oldref)) {\n      throw new InvalidRefNameError(oldref, cleanGitRef.clean(oldref));\n    }\n    const fulloldref = `refs/heads/${oldref}`;\n    const fullnewref = `refs/heads/${ref}`;\n    const newexist = yield GitRefManager.exists({\n      fs,\n      gitdir,\n      ref: fullnewref\n    });\n    if (newexist) {\n      throw new AlreadyExistsError('branch', ref, false);\n    }\n    const value = yield GitRefManager.resolve({\n      fs,\n      gitdir,\n      ref: fulloldref,\n      depth: 1\n    });\n    yield GitRefManager.writeRef({\n      fs,\n      gitdir,\n      ref: fullnewref,\n      value\n    });\n    yield GitRefManager.deleteRef({\n      fs,\n      gitdir,\n      ref: fulloldref\n    });\n    if (checkout) {\n      // Update HEAD\n      yield GitRefManager.writeSymbolicRef({\n        fs,\n        gitdir,\n        ref: 'HEAD',\n        value: fullnewref\n      });\n    }\n  });\n  return _renameBranch2.apply(this, arguments);\n}\nfunction renameBranch(_x146) {\n  return _renameBranch3.apply(this, arguments);\n}\nfunction _renameBranch3() {\n  _renameBranch3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref,\n    oldref,\n    checkout = false\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('ref', ref);\n      assertParameter('oldref', oldref);\n      return yield _renameBranch({\n        fs: new FileSystem(fs),\n        gitdir,\n        ref,\n        oldref,\n        checkout\n      });\n    } catch (err) {\n      err.caller = 'git.renameBranch';\n      throw err;\n    }\n  });\n  return _renameBranch3.apply(this, arguments);\n}\nfunction hashObject$1(_x147) {\n  return _hashObject$.apply(this, arguments);\n} // @ts-check\n/**\n * Reset a file in the git index (aka staging area)\n *\n * Note that this does NOT modify the file in the working directory.\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.filepath - The path to the file to reset in the index\n * @param {string} [args.ref = 'HEAD'] - A ref to the commit to use\n *\n * @returns {Promise<void>} Resolves successfully once the git index has been updated\n *\n * @example\n * await git.resetIndex({ fs, dir: '/tutorial', filepath: 'README.md' })\n * console.log('done')\n *\n */\nfunction _hashObject$() {\n  _hashObject$ = _asyncToGenerator(function* ({\n    gitdir,\n    type,\n    object\n  }) {\n    return shasum(GitObject.wrap({\n      type,\n      object\n    }));\n  });\n  return _hashObject$.apply(this, arguments);\n}\nfunction resetIndex(_x148) {\n  return _resetIndex.apply(this, arguments);\n}\n/*\n  Return a resolved conflict back to unresolved state\n  Clients are in charge of checking whether this is an\n  automatically resolvable conflict for instance, using\n  `conflictStatus`. This method just adds the conflicts\n  to the index.\n*/\nfunction _resetIndex() {\n  _resetIndex = _asyncToGenerator(function* ({\n    fs: _fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    filepath,\n    ref = 'HEAD'\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('filepath', filepath);\n      assertParameter('ref', ref);\n      const fs = new FileSystem(_fs);\n      const cache = {};\n      // Resolve commit\n      let oid = yield GitRefManager.resolve({\n        fs,\n        gitdir,\n        ref\n      });\n      let workdirOid;\n      try {\n        // Resolve blob\n        oid = yield resolveFilepath({\n          fs,\n          cache,\n          gitdir,\n          oid,\n          filepath\n        });\n      } catch (e) {\n        // This means we're resetting the file to a \"deleted\" state\n        oid = null;\n      }\n      // For files that aren't in the workdir use zeros\n      let stats = {\n        ctime: new Date(0),\n        mtime: new Date(0),\n        dev: 0,\n        ino: 0,\n        mode: 0,\n        uid: 0,\n        gid: 0,\n        size: 0\n      };\n      // If the file exists in the workdir...\n      if (dir) {\n        workdirOid = yield fs.getOid(join(dir, filepath));\n        if (oid === workdirOid) {\n          // ... use the workdir Stats object\n          stats = yield fs.lstat(join(dir, filepath));\n        }\n      }\n      yield GitIndexManager.acquire({\n        fs,\n        gitdir,\n        cache\n      }, /*#__PURE__*/function () {\n        var _ref37 = _asyncToGenerator(function* (index) {\n          index.delete({\n            filepath\n          });\n          if (oid) {\n            index.insert({\n              filepath,\n              stats,\n              oid\n            });\n          }\n        });\n        return function (_x202) {\n          return _ref37.apply(this, arguments);\n        };\n      }());\n    } catch (err) {\n      err.caller = 'git.reset';\n      throw err;\n    }\n  });\n  return _resetIndex.apply(this, arguments);\n}\nfunction undoResolve(_x149) {\n  return _undoResolve.apply(this, arguments);\n} // @ts-check\n/**\n * Get the value of a symbolic ref or resolve a ref to its SHA-1 object id\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.ref - The ref to resolve\n * @param {number} [args.depth = undefined] - How many symbolic references to follow before returning\n *\n * @returns {Promise<string>} Resolves successfully with a SHA-1 object id or the value of a symbolic ref\n *\n * @example\n * let currentCommit = await git.resolveRef({ fs, dir: '/tutorial', ref: 'HEAD' })\n * console.log(currentCommit)\n * let currentBranch = await git.resolveRef({ fs, dir: '/tutorial', ref: 'HEAD', depth: 2 })\n * console.log(currentBranch)\n *\n */\nfunction _undoResolve() {\n  _undoResolve = _asyncToGenerator(function* ({\n    fs: _fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    filepath,\n    base,\n    theirs = 'MERGE_HEAD',\n    ours = 'HEAD',\n    cache = {},\n    noBase = false\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('filepath', filepath);\n      assertParameter('ours', ours);\n      assertParameter('theirs', theirs);\n      const fs = new FileSystem(_fs);\n      theirs = GitRefManager.resolve({\n        fs,\n        gitdir,\n        theirs\n      });\n      ours = GitRefManager.resolve({\n        fs,\n        gitdir,\n        ours\n      });\n      if (noBase) {\n        //Empty tree sha\n        base = '4b825dc642cb6eb9a060e54bf8d69288fbee4904';\n      } else if (base) {\n        base = GitRefManager.resolve({\n          fs,\n          gitdir,\n          base\n        });\n      } else {\n        if (!cache.bases) {\n          cache.bases = new Map();\n        }\n        const key = gitdir + \":\" + ours + \"|\" + theirs;\n        if (cache.bases.has(key)) {\n          base = cache.bases.get(key);\n        } else {\n          const mergeBases = findMergeBase({\n            fs,\n            gitdir,\n            oids: [ours, theirs]\n          });\n          if (mergeBases.length === 1) {\n            base = mergeBases[0];\n            cache.bases.set(key, mergeBases[0]);\n          }\n          const error = new MergeNotSupportedError('No suitable merge base found');\n          error.data = mergeBases;\n          throw error;\n        }\n      }\n      let _oid = dir ? false : null;\n      const workdirOid = /*#__PURE__*/function () {\n        var _ref38 = _asyncToGenerator(function* () {\n          if (_oid !== false) return _oid;\n          _oid = yield fs.getOid(join(dir, filepath));\n        });\n        return function workdirOid() {\n          return _ref38.apply(this, arguments);\n        };\n      }();\n      let _stats = dir ? false : null;\n      const workdirStats = /*#__PURE__*/function () {\n        var _ref39 = _asyncToGenerator(function* () {\n          if (_stats !== false) return _stats;\n          _stats = yield fs.lstat(join(dir, filepath));\n        });\n        return function workdirStats() {\n          return _ref39.apply(this, arguments);\n        };\n      }();\n      const entries = yield Promise.all([base, ours, theirs].map( /*#__PURE__*/function () {\n        var _ref40 = _asyncToGenerator(function* (oid, index) {\n          try {\n            // Resolve blob\n            oid = yield resolveFilepath({\n              fs,\n              cache,\n              gitdir,\n              oid,\n              filepath\n            });\n          } catch (e) {\n            // This means we're resetting the file to a \"deleted\" state\n            return null;\n          }\n          // For files that aren't in the workdir use zeros\n          let stats = {\n            ctime: new Date(0),\n            mtime: new Date(0),\n            dev: 0,\n            ino: 0,\n            mode: 0,\n            uid: 0,\n            gid: 0,\n            size: 0\n          };\n\n          // If the file exists in the workdir...\n          if (oid === (yield workdirOid())) {\n            // ... use the workdir Stats object\n            stats = yield workdirStats();\n          }\n          return {\n            stats,\n            oid,\n            stage: index + 1\n          };\n        });\n        return function (_x203, _x204) {\n          return _ref40.apply(this, arguments);\n        };\n      }()));\n      entries = entries.filter(Boolean);\n      yield GitIndexManager.acquire({\n        fs,\n        gitdir,\n        cache\n      }, /*#__PURE__*/function () {\n        var _ref41 = _asyncToGenerator(function* (index) {\n          index.delete({\n            filepath\n          });\n          entries.forEach(({\n            stats,\n            oid,\n            stage\n          }) => {\n            index.insert({\n              filepath,\n              stats,\n              oid,\n              stage\n            });\n          });\n        });\n        return function (_x205) {\n          return _ref41.apply(this, arguments);\n        };\n      }());\n    } catch (err) {\n      err.caller = 'git.conflictReset';\n      throw err;\n    }\n  });\n  return _undoResolve.apply(this, arguments);\n}\nfunction resolveRef(_x150) {\n  return _resolveRef.apply(this, arguments);\n} // @ts-check\n/**\n * Write an entry to the git config files.\n *\n * *Caveats:*\n * - Currently only the local `$GIT_DIR/config` file can be read or written. However support for the global `~/.gitconfig` and system `$(prefix)/etc/gitconfig` will be added in the future.\n * - The current parser does not support the more exotic features of the git-config file format such as `[include]` and `[includeIf]`.\n *\n * @param {Object} args\n * @param {FsClient} args.fs - a file system implementation\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.path - The key of the git config entry\n * @param {string | boolean | number | void} args.value - A value to store at that path. (Use `undefined` as the value to delete a config entry.)\n * @param {boolean} [args.append = false] - If true, will append rather than replace when setting (use with multi-valued config options).\n *\n * @returns {Promise<void>} Resolves successfully when operation completed\n *\n * @example\n * // Write config value\n * await git.setConfig({\n *   fs,\n *   dir: '/tutorial',\n *   path: 'user.name',\n *   value: 'Mr. Test'\n * })\n *\n * // Print out config file\n * let file = await fs.promises.readFile('/tutorial/.git/config', 'utf8')\n * console.log(file)\n *\n * // Delete a config entry\n * await git.setConfig({\n *   fs,\n *   dir: '/tutorial',\n *   path: 'user.name',\n *   value: undefined\n * })\n *\n * // Print out config file\n * file = await fs.promises.readFile('/tutorial/.git/config', 'utf8')\n * console.log(file)\n */\nfunction _resolveRef() {\n  _resolveRef = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref,\n    depth\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('ref', ref);\n      const oid = yield GitRefManager.resolve({\n        fs: new FileSystem(fs),\n        gitdir,\n        ref,\n        depth\n      });\n      return oid;\n    } catch (err) {\n      err.caller = 'git.resolveRef';\n      throw err;\n    }\n  });\n  return _resolveRef.apply(this, arguments);\n}\nfunction setConfig(_x151) {\n  return _setConfig.apply(this, arguments);\n} // @ts-check\n/**\n * Tell whether a file has been changed\n *\n * The possible resolve values are:\n *\n * | status                | description                                                                           |\n * | --------------------- | ------------------------------------------------------------------------------------- |\n * | `\"ignored\"`           | file ignored by a .gitignore rule                                                     |\n * | `\"unmodified\"`        | file unchanged from HEAD commit                                                       |\n * | `\"*modified\"`         | file has modifications, not yet staged                                                |\n * | `\"*deleted\"`          | file has been removed, but the removal is not yet staged                              |\n * | `\"*added\"`            | file is untracked, not yet staged                                                     |\n * | `\"absent\"`            | file not present in HEAD commit, staging area, or working dir                         |\n * | `\"modified\"`          | file has modifications, staged                                                        |\n * | `\"deleted\"`           | file has been removed, staged                                                         |\n * | `\"added\"`             | previously untracked file, staged                                                     |\n * | `\"*unmodified\"`       | working dir and HEAD commit match, but index differs                                  |\n * | `\"*absent\"`           | file not present in working dir or HEAD commit, but present in the index              |\n * | `\"*undeleted\"`        | file was deleted from the index, but is still in the working dir                      |\n * | `\"*undeletemodified\"` | file was deleted from the index, but is present with modifications in the working dir |\n * | `\"*conflict\"`         | file has unresolved conflicts                                                         |\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.filepath - The path to the file to query\n *\n * @returns {Promise<'ignored'|'unmodified'|'*modified'|'*deleted'|'*added'|'absent'|'modified'|'deleted'|'added'|'*unmodified'|'*absent'|'*undeleted'|'*undeletemodified'>} Resolves successfully with the file's git status\n *\n * @example\n * let status = await git.status({ fs, dir: '/tutorial', filepath: 'README.md' })\n * console.log(status)\n *\n */\nfunction _setConfig() {\n  _setConfig = _asyncToGenerator(function* ({\n    fs: _fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    path,\n    value,\n    append = false\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('path', path);\n      // assertParameter('value', value) // We actually allow 'undefined' as a value to unset/delete\n\n      const fs = new FileSystem(_fs);\n      const config = yield GitConfigManager.get({\n        fs,\n        gitdir\n      });\n      if (append) {\n        yield config.append(path, value);\n      } else {\n        yield config.set(path, value);\n      }\n      yield GitConfigManager.save({\n        fs,\n        gitdir,\n        config\n      });\n    } catch (err) {\n      err.caller = 'git.setConfig';\n      throw err;\n    }\n  });\n  return _setConfig.apply(this, arguments);\n}\nfunction status(_x152) {\n  return _status.apply(this, arguments);\n}\n/*\n  TODO add proper documentation\n\n\n*/\nfunction _status() {\n  _status = _asyncToGenerator(function* ({\n    fs: _fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    filepath,\n    cache = {}\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('filepath', filepath);\n      const fs = new FileSystem(_fs);\n      const ignored = yield GitIgnoreManager.isIgnored({\n        fs,\n        gitdir,\n        dir,\n        filepath\n      });\n      if (ignored) {\n        return 'ignored';\n      }\n      const headTree = yield getHeadTree({\n        fs,\n        cache,\n        gitdir\n      });\n      const treeOid = yield getOidAtPath({\n        fs,\n        cache,\n        gitdir,\n        tree: headTree,\n        path: filepath\n      });\n      const indexEntry = yield GitIndexManager.acquire({\n        fs,\n        gitdir,\n        cache\n      }, /*#__PURE__*/function () {\n        var _ref42 = _asyncToGenerator(function* (index) {\n          for (const entry of index) {\n            if (entry.path === filepath) return entry;\n          }\n          return null;\n        });\n        return function (_x206) {\n          return _ref42.apply(this, arguments);\n        };\n      }());\n      const stats = yield fs.lstat(join(dir, filepath));\n      const H = treeOid !== null; // head\n      const I = indexEntry !== null; // index\n      const W = stats !== null; // working dir\n\n      const getWorkdirOid = /*#__PURE__*/function () {\n        var _ref43 = _asyncToGenerator(function* () {\n          if (I && !compareStats(indexEntry, stats)) {\n            return indexEntry.oid;\n          } else {\n            const workdirOid = yield fs.getOid(join(dir, filepath));\n\n            // If the oid in the index === working dir oid but stats differed update cache\n            if (I && indexEntry.oid === workdirOid) {\n              // and as long as our fs.stats aren't bad.\n              // size of -1 happens over a BrowserFS HTTP Backend that doesn't serve Content-Length headers\n              // (like the Karma webserver) because BrowserFS HTTP Backend uses HTTP HEAD requests to do fs.stat\n              if (stats.size !== -1) {\n                // We don't await this so we can return faster for one-off cases.\n                GitIndexManager.acquire({\n                  fs,\n                  gitdir,\n                  cache\n                }, /*#__PURE__*/function () {\n                  var _ref44 = _asyncToGenerator(function* (index) {\n                    index.insert({\n                      filepath,\n                      stats,\n                      oid: workdirOid\n                    });\n                  });\n                  return function (_x207) {\n                    return _ref44.apply(this, arguments);\n                  };\n                }());\n              }\n            }\n            return workdirOid;\n          }\n        });\n        return function getWorkdirOid() {\n          return _ref43.apply(this, arguments);\n        };\n      }();\n      if (I && indexEntry.flags.stage !== 0) return '*conflict';\n      if (!H && !W && !I) return 'absent'; // ---\n      if (!H && !W && I) return '*absent'; // -A-\n      if (!H && W && !I) return '*added'; // --A\n      if (!H && W && I) {\n        const workdirOid = yield getWorkdirOid();\n        // @ts-ignore\n        return workdirOid === indexEntry.oid ? 'added' : '*added'; // -AA : -AB\n      }\n      if (H && !W && !I) return 'deleted'; // A--\n      if (H && !W && I) {\n        // @ts-ignore\n        return treeOid === indexEntry.oid ? '*deleted' : '*deleted'; // AA- : AB-\n      }\n      if (H && W && !I) {\n        const workdirOid = yield getWorkdirOid();\n        return workdirOid === treeOid ? '*undeleted' : '*undeletemodified'; // A-A : A-B\n      }\n      if (H && W && I) {\n        const workdirOid = yield getWorkdirOid();\n        if (workdirOid === treeOid) {\n          // @ts-ignore\n          return workdirOid === indexEntry.oid ? 'unmodified' : '*unmodified'; // AAA : ABA\n        } else {\n          // @ts-ignore\n          return workdirOid === indexEntry.oid ? 'modified' : '*modified'; // ABB : AAB\n        }\n      }\n      /*\n      conflict\n      ---\n      -A-\n      --A\n      -AA\n      -AB\n      \n      \n      A--\n      AA-\n      AB-\n      A-A\n      A-B\n      AAA\n      ABA\n      ABB\n      AAB\n      */\n    } catch (err) {\n      err.caller = 'git.status';\n      throw err;\n    }\n  });\n  return _status.apply(this, arguments);\n}\nfunction shortMessage(status) {\n  switch (status) {\n    case '0000':\n    //removed\n    case '0111':\n      //exist in base, unchanged by both\n      return '';\n    //resolved\n    case '0100':\n      //deleted by both\n      return 'DD';\n    case '0101':\n    case '0103':\n      //deleted by us\n      return 'DU';\n    case '0110':\n    case '0120':\n      //deleted by them\n      return 'UD';\n    case '0113':\n    case '0121':\n    case '0122':\n    case '0123':\n      //modified by us or/and them\n      return 'UU';\n    case '0003':\n      //added by them\n      return 'UA';\n    case '0020':\n      //added by us\n      return 'AU';\n    case '0022':\n    case '0023':\n      //added by both\n      return 'AA';\n  }\n}\nfunction conflictStatus(_x153) {\n  return _conflictStatus.apply(this, arguments);\n}\nfunction _conflictStatus() {\n  _conflictStatus = _asyncToGenerator(function* ({\n    fs: _fs,\n    cache = {},\n    gitdir,\n    filepath,\n    entries\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('filepath or entries', filepath || entries);\n      const fs = new FileSystem(_fs);\n      const oids = [undefined, undefined, undefined, undefined];\n      const stats = [undefined, undefined, undefined, undefined];\n      const types = [undefined, undefined, undefined, undefined];\n      function add(entry) {\n        oids[entry.flags.stage] = entry.oid;\n        let stat = stats[entry.flags.stage] = normalizeStats(entry);\n        types[entry.flags.stage] = entry.type === 'tree' ? 'tree' : mode2type(stat.mode);\n      }\n      if (entries) {\n        entries.forEach(add);\n      } else yield GitIndexManager.acquire({\n        fs,\n        gitdir,\n        cache\n      }, /*#__PURE__*/function () {\n        var _ref45 = _asyncToGenerator(function* (index) {\n          for (const entry of index) {\n            if (entry.path === filepath) {\n              add(entry);\n            }\n          }\n        });\n        return function (_x208) {\n          return _ref45.apply(this, arguments);\n        };\n      }());\n      const matrix = oids.map(oid => oids.indexOf(oid));\n      return {\n        short: shortMessage(matrix.join(\"\")),\n        oids,\n        stats,\n        types,\n        statusRow: matrix\n      };\n    } catch (err) {\n      err.caller = 'git.conflictStatus';\n      throw err;\n    }\n  });\n  return _conflictStatus.apply(this, arguments);\n}\nfunction getOidAtPath(_x154) {\n  return _getOidAtPath.apply(this, arguments);\n}\nfunction _getOidAtPath() {\n  _getOidAtPath = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir,\n    tree,\n    path\n  }) {\n    if (typeof path === 'string') path = path.split('/');\n    const dirname = path.shift();\n    for (const entry of tree) {\n      if (entry.path === dirname) {\n        if (path.length === 0) {\n          return entry.oid;\n        }\n        const {\n          type,\n          object\n        } = yield _readObject({\n          fs,\n          cache,\n          gitdir,\n          oid: entry.oid\n        });\n        if (type === 'tree') {\n          const tree = GitTree.from(object);\n          return getOidAtPath({\n            fs,\n            cache,\n            gitdir,\n            tree,\n            path\n          });\n        }\n        if (type === 'blob') {\n          throw new ObjectTypeError(entry.oid, type, 'blob', path.join('/'));\n        }\n      }\n    }\n    return null;\n  });\n  return _getOidAtPath.apply(this, arguments);\n}\nfunction getHeadTree(_x155) {\n  return _getHeadTree.apply(this, arguments);\n} // @ts-check\n/**\n * Efficiently get the status of multiple files at once.\n *\n * The returned `StatusMatrix` is admittedly not the easiest format to read.\n * However it conveys a large amount of information in dense format that should make it easy to create reports about the current state of the repository;\n * without having to do multiple, time-consuming isomorphic-git calls.\n * My hope is that the speed and flexibility of the function will make up for the learning curve of interpreting the return value.\n *\n * ```js live\n * // get the status of all the files in 'src'\n * let status = await git.statusMatrix({\n *   fs,\n *   dir: '/tutorial',\n *   filter: f => f.startsWith('src/')\n * })\n * console.log(status)\n * ```\n *\n * ```js live\n * // get the status of all the JSON and Markdown files\n * let status = await git.statusMatrix({\n *   fs,\n *   dir: '/tutorial',\n *   filter: f => f.endsWith('.json') || f.endsWith('.md')\n * })\n * console.log(status)\n * ```\n *\n * The result is returned as a 2D array.\n * The outer array represents the files and/or blobs in the repo, in alphabetical order.\n * The inner arrays describe the status of the file:\n * the first value is the filepath, and the next three are integers\n * representing the HEAD status, WORKDIR status, and STAGE status of the entry.\n *\n * ```js\n * // example StatusMatrix\n * [\n *   [\"a.txt\", 0, 2, 0], // new, untracked\n *   [\"b.txt\", 0, 2, 2], // added, staged\n *   [\"c.txt\", 0, 2, 3], // added, staged, with unstaged changes\n *   [\"d.txt\", 1, 1, 1], // unmodified\n *   [\"e.txt\", 1, 2, 1], // modified, unstaged\n *   [\"f.txt\", 1, 2, 2], // modified, staged\n *   [\"g.txt\", 1, 2, 3], // modified, staged, with unstaged changes\n *   [\"h.txt\", 1, 0, 1], // deleted, unstaged\n *   [\"i.txt\", 1, 0, 0], // deleted, staged\n * ]\n * ```\n *\n * - The HEAD status is either absent (0) or present (1).\n * - The WORKDIR status is either absent (0), identical to HEAD (1), or different from HEAD (2).\n * - The STAGE status is either absent (0), identical to HEAD (1), identical to WORKDIR (2), or different from WORKDIR (3).\n *\n * ```ts\n * type Filename      = string\n * type HeadStatus    = 0 | 1\n * type WorkdirStatus = 0 | 1 | 2\n * type StageStatus   = 0 | 1 | 2 | 3\n *\n * type StatusRow     = [Filename, HeadStatus, WorkdirStatus, StageStatus]\n *\n * type StatusMatrix  = StatusRow[]\n * ```\n *\n * > Think of the natural progression of file modifications as being from HEAD (previous) -> WORKDIR (current) -> STAGE (next).\n * > Then HEAD is \"version 1\", WORKDIR is \"version 2\", and STAGE is \"version 3\".\n * > Then, imagine a \"version 0\" which is before the file was created.\n * > Then the status value in each column corresponds to the oldest version of the file it is identical to.\n * > (For a file to be identical to \"version 0\" means the file is deleted.)\n *\n * Here are some examples of queries you can answer using the result:\n *\n * #### Q: What files have been deleted?\n * ```js\n * const FILE = 0, WORKDIR = 2\n *\n * const filenames = (await statusMatrix({ dir }))\n *   .filter(row => row[WORKDIR] === 0)\n *   .map(row => row[FILE])\n * ```\n *\n * #### Q: What files have unstaged changes?\n * ```js\n * const FILE = 0, WORKDIR = 2, STAGE = 3\n *\n * const filenames = (await statusMatrix({ dir }))\n *   .filter(row => row[WORKDIR] !== row[STAGE])\n *   .map(row => row[FILE])\n * ```\n *\n * #### Q: What files have been modified since the last commit?\n * ```js\n * const FILE = 0, HEAD = 1, WORKDIR = 2\n *\n * const filenames = (await statusMatrix({ dir }))\n *   .filter(row => row[HEAD] !== row[WORKDIR])\n *   .map(row => row[FILE])\n * ```\n *\n * #### Q: What files will NOT be changed if I commit right now?\n * ```js\n * const FILE = 0, HEAD = 1, STAGE = 3\n *\n * const filenames = (await statusMatrix({ dir }))\n *   .filter(row => row[HEAD] === row[STAGE])\n *   .map(row => row[FILE])\n * ```\n *\n * For reference, here are all possible combinations:\n *\n * | HEAD | WORKDIR | STAGE | `git status --short` equivalent |\n * | ---- | ------- | ----- | ------------------------------- |\n * | 0    | 0       | 0     | ``                              |\n * | 0    | 0       | 3     | `AD`                            |\n * | 0    | 2       | 0     | `??`                            |\n * | 0    | 2       | 2     | `A `                            |\n * | 0    | 2       | 3     | `AM`                            |\n * | 1    | 0       | 0     | `D `                            |\n * | 1    | 0       | 1     | ` D`                            |\n * | 1    | 0       | 3     | `MD`                            |\n * | 1    | 1       | 0     | `D ` + `??`                     |\n * | 1    | 1       | 1     | ``                              |\n * | 1    | 1       | 3     | `MM`                            |\n * | 1    | 2       | 0     | `D ` + `??`                     |\n * | 1    | 2       | 1     | ` M`                            |\n * | 1    | 2       | 2     | `M `                            |\n * | 1    | 2       | 3     | `MM`                            |\n * | [01] | [012]   | 4     | `merge conflict;use git.conflictStatus`|   \n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} [args.ref = 'HEAD'] - Optionally specify a different commit to compare against the workdir and stage instead of the HEAD\n * @param {string[]} [args.filepaths = ['.']] - Limit the query to the given files and directories\n * @param {function(string): boolean} [args.filter] - Filter the results to only those whose filepath matches a function.\n *\n * @returns {Promise<Array<StatusRow>>} Resolves with a status matrix, described below.\n * @see StatusRow\n */\nfunction _getHeadTree() {\n  _getHeadTree = _asyncToGenerator(function* ({\n    fs,\n    cache,\n    gitdir\n  }) {\n    // Get the tree from the HEAD commit.\n    let oid;\n    try {\n      oid = yield GitRefManager.resolve({\n        fs,\n        gitdir,\n        ref: 'HEAD'\n      });\n    } catch (e) {\n      // Handle fresh branches with no commits\n      if (e instanceof NotFoundError) {\n        return [];\n      }\n    }\n    const {\n      tree\n    } = yield _readTree({\n      fs,\n      cache,\n      gitdir,\n      oid\n    });\n    return tree;\n  });\n  return _getHeadTree.apply(this, arguments);\n}\nfunction statusMatrix(_x156) {\n  return _statusMatrix.apply(this, arguments);\n} // @ts-check\n/**\n * Create a lightweight tag\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.ref - What to name the tag\n * @param {string} [args.object = 'HEAD'] - What oid the tag refers to. (Will resolve to oid if value is a ref.) By default, the commit object which is referred by the current `HEAD` is used.\n * @param {boolean} [args.force = false] - Instead of throwing an error if a tag named `ref` already exists, overwrite the existing tag.\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.tag({ fs, dir: '/tutorial', ref: 'test-tag' })\n * console.log('done')\n *\n */\nfunction _statusMatrix() {\n  _statusMatrix = _asyncToGenerator(function* ({\n    fs: _fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref = 'HEAD',\n    cache = {},\n    filepaths = ['.'],\n    filter\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('ref', ref);\n      const fs = new FileSystem(_fs);\n      return yield _walk({\n        fs,\n        cache,\n        dir,\n        gitdir,\n        trees: [TREE({\n          ref\n        }), WORKDIR(), STAGE()],\n        map: function () {\n          var _ref46 = _asyncToGenerator(function* (filepath, [head, workdir, stage]) {\n            // Ignore ignored files, but only if they are not already tracked.\n            if (!head && !stage && workdir) {\n              if (yield GitIgnoreManager.isIgnored({\n                fs,\n                dir,\n                filepath\n              })) {\n                return null;\n              }\n            }\n            // match against base paths\n            if (!filepaths.some(base => worthWalking(filepath, base))) {\n              return null;\n            }\n            // Late filter against file names\n            if (filter) {\n              if (!filter(filepath)) return;\n            }\n\n            // For now, just bail on directories\n            const headType = head && (yield head.type());\n            if (headType === 'tree' || headType === 'special') return;\n            if (headType === 'commit') return null;\n            const workdirType = workdir && (yield workdir.type());\n            if (workdirType === 'tree' || workdirType === 'special') return;\n            const stageType = stage && (yield stage.type());\n            if (stageType === 'commit') return null;\n            if (stageType === 'tree' || stageType === 'special') return;\n\n            // Figure out the oids, using the staged oid for the working dir oid if the stats match.\n            const headOid = head ? yield head.oid() : undefined;\n            const isConflict = yield stage && stage.isConflict();\n            const stageOid = isConflict ? '42' : stage ? yield stage.oid() : undefined;\n            const conflictOid = isConflict ? '35' : stageOid;\n            let workdirOid;\n            if (!head && workdir && !stage) {\n              // We don't actually NEED the sha. Any sha will do\n              // TODO: update this logic to handle N trees instead of just 3.\n              workdirOid = '42';\n            } else if (workdir) {\n              workdirOid = yield workdir.oid();\n            }\n            const entry = [undefined, headOid, workdirOid, conflictOid, stageOid];\n            const result = entry.map(value => entry.indexOf(value));\n            // remove leading undefined entry\n            return [filepath, result[1], result[2], result[4]];\n          });\n          return function map(_x209, _x210) {\n            return _ref46.apply(this, arguments);\n          };\n        }()\n      });\n    } catch (err) {\n      err.caller = 'git.statusMatrix';\n      throw err;\n    }\n  });\n  return _statusMatrix.apply(this, arguments);\n}\nfunction tag(_x157) {\n  return _tag.apply(this, arguments);\n} // @ts-check\n/**\n * Return the version number of isomorphic-git\n *\n * I don't know why you might need this. I added it just so I could check that I was getting\n * the correct version of the library and not a cached version.\n *\n * @returns {string} the version string taken from package.json at publication time\n *\n * @example\n * console.log(git.version())\n *\n */\nfunction _tag() {\n  _tag = _asyncToGenerator(function* ({\n    fs: _fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref,\n    object,\n    force = false\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('ref', ref);\n      const fs = new FileSystem(_fs);\n      if (ref === undefined) {\n        throw new MissingParameterError('ref');\n      }\n      ref = ref.startsWith('refs/tags/') ? ref : `refs/tags/${ref}`;\n\n      // Resolve passed object\n      const value = yield GitRefManager.resolve({\n        fs,\n        gitdir,\n        ref: object || 'HEAD'\n      });\n      if (!force && (yield GitRefManager.exists({\n        fs,\n        gitdir,\n        ref\n      }))) {\n        throw new AlreadyExistsError('tag', ref);\n      }\n      yield GitRefManager.writeRef({\n        fs,\n        gitdir,\n        ref,\n        value\n      });\n    } catch (err) {\n      err.caller = 'git.tag';\n      throw err;\n    }\n  });\n  return _tag.apply(this, arguments);\n}\nfunction version() {\n  try {\n    return pkg.version;\n  } catch (err) {\n    err.caller = 'git.version';\n    throw err;\n  }\n}\n\n// @ts-check\n\n/**\n * @callback WalkerMap\n * @param {string} filename\n * @param {?WalkerEntry[]} entries\n * @returns {Promise<any>}\n */\n\n/**\n * @callback WalkerReduce\n * @param {any} parent\n * @param {any[]} children\n * @returns {Promise<any>}\n */\n\n/**\n * @callback WalkerIterateCallback\n * @param {WalkerEntry[]} entries\n * @returns {Promise<any[]>}\n */\n\n/**\n * @callback WalkerIterate\n * @param {WalkerIterateCallback} walk\n * @param {IterableIterator<WalkerEntry[]>} children\n * @returns {Promise<any[]>}\n */\n\n/**\n * A powerful recursive tree-walking utility.\n *\n * The `walk` API simplifies gathering detailed information about a tree or comparing all the filepaths in two or more trees.\n * Trees can be git commits, the working directory, or the or git index (staging area).\n * As long as a file or directory is present in at least one of the trees, it will be traversed.\n * Entries are traversed in alphabetical order.\n *\n * The arguments to `walk` are the `trees` you want to traverse, and 3 optional transform functions:\n *  `map`, `reduce`, and `iterate`.\n *\n * ## `TREE`, `WORKDIR`, and `STAGE`\n *\n * Tree walkers are represented by three separate functions that can be imported:\n *\n * ```js\n * import { TREE, WORKDIR, STAGE } from 'isomorphic-git'\n * ```\n *\n * These functions return opaque handles called `Walker`s.\n * The only thing that `Walker` objects are good for is passing into `walk`.\n * Here are the three `Walker`s passed into `walk` by the `statusMatrix` command for example:\n *\n * ```js\n * let ref = 'HEAD'\n *\n * let trees = [TREE({ ref }), WORKDIR(), STAGE()]\n * ```\n *\n * For the arguments, see the doc pages for [TREE](./TREE.md), [WORKDIR](./WORKDIR.md), and [STAGE](./STAGE.md).\n *\n * `map`, `reduce`, and `iterate` allow you control the recursive walk by pruning and transforming `WalkerEntry`s into the desired result.\n *\n * ## WalkerEntry\n *\n * {@link WalkerEntry typedef}\n *\n * `map` receives an array of `WalkerEntry[]` as its main argument, one `WalkerEntry` for each `Walker` in the `trees` argument.\n * The methods are memoized per `WalkerEntry` so calling them multiple times in a `map` function does not adversely impact performance.\n * By only computing these values if needed, you build can build lean, mean, efficient walking machines.\n *\n * ### WalkerEntry#type()\n *\n * Returns the kind as a string. This is normally either `tree` or `blob`.\n *\n * `TREE`, `STAGE`, and `WORKDIR` walkers all return a string.\n *\n * Possible values:\n *\n * - `'tree'` directory\n * - `'blob'` file\n * - `'special'` used by `WORKDIR` to represent irregular files like sockets and FIFOs\n * - `'commit'` used by `TREE` to represent submodules\n *\n * ```js\n * await entry.type()\n * ```\n *\n * ### WalkerEntry#mode()\n *\n * Returns the file mode as a number. Use this to distinguish between regular files, symlinks, and executable files.\n *\n * `TREE`, `STAGE`, and `WORKDIR` walkers all return a number for all `type`s of entries.\n *\n * It has been normalized to one of the 4 values that are allowed in git commits:\n *\n * - `0o40000` directory\n * - `0o100644` file\n * - `0o100755` file (executable)\n * - `0o120000` symlink\n *\n * Tip: to make modes more readable, you can print them to octal using `.toString(8)`.\n *\n * ```js\n * await entry.mode()\n * ```\n *\n * ### WalkerEntry#oid()\n *\n * Returns the SHA-1 object id for blobs and trees.\n *\n * `TREE` walkers return a string for `blob` and `tree` entries.\n *\n * `STAGE` and `WORKDIR` walkers return a string for `blob` entries and `undefined` for `tree` entries.\n *\n * ```js\n * await entry.oid()\n * ```\n *\n * ### WalkerEntry#content()\n *\n * Returns the file contents as a Buffer.\n *\n * `TREE` and `WORKDIR` walkers return a Buffer for `blob` entries and `undefined` for `tree` entries.\n *\n * `STAGE` walkers always return `undefined` since the file contents are never stored in the stage.\n *\n * ```js\n * await entry.content()\n * ```\n *\n * ### WalkerEntry#stat()\n *\n * Returns a normalized subset of filesystem Stat data.\n *\n * `WORKDIR` walkers return a `Stat` for `blob` and `tree` entries.\n *\n * `STAGE` walkers return a `Stat` for `blob` entries and `undefined` for `tree` entries.\n *\n * `TREE` walkers return `undefined` for all entry types.\n *\n * ```js\n * await entry.stat()\n * ```\n *\n * {@link Stat typedef}\n *\n * ## map(string, Array<WalkerEntry|null>) => Promise<any>\n *\n * {@link WalkerMap typedef}\n *\n * This is the function that is called once per entry BEFORE visiting the children of that node.\n *\n * If you return `null` for a `tree` entry, then none of the children of that `tree` entry will be walked.\n *\n * This is a good place for query logic, such as examining the contents of a file.\n * Ultimately, compare all the entries and return any values you are interested in.\n * If you do not return a value (or return undefined) that entry will be filtered from the results.\n *\n * Example 1: Find all the files containing the word 'foo'.\n * ```js\n * async function map(filepath, [head, workdir]) {\n *   let content = (await workdir.content()).toString('utf8')\n *   if (content.contains('foo')) {\n *     return {\n *       filepath,\n *       content\n *     }\n *   }\n * }\n * ```\n *\n * Example 2: Return the difference between the working directory and the HEAD commit\n * ```js\n * const diff = require('diff-lines')\n * async function map(filepath, [head, workdir]) {\n *   return {\n *     filepath,\n *     oid: await head.oid(),\n *     diff: diff((await head.content()).toString('utf8'), (await workdir.content()).toString('utf8'))\n *   }\n * }\n * ```\n *\n * Example 3:\n * ```js\n * let path = require('path')\n * // Only examine files in the directory `cwd`\n * let cwd = 'src/app'\n * async function map (filepath, [head, workdir, stage]) {\n *   if (\n *     // don't skip the root directory\n *     head.fullpath !== '.' &&\n *     // return true for 'src' and 'src/app'\n *     !cwd.startsWith(filepath) &&\n *     // return true for 'src/app/*'\n *     path.dirname(filepath) !== cwd\n *   ) {\n *     return null\n *   } else {\n *     return filepath\n *   }\n * }\n * ```\n *\n * ## reduce(parent, children)\n *\n * {@link WalkerReduce typedef}\n *\n * This is the function that is called once per entry AFTER visiting the children of that node.\n *\n * Default: `async (parent, children) => parent === undefined ? children.flat() : [parent, children].flat()`\n *\n * The default implementation of this function returns all directories and children in a giant flat array.\n * You can define a different accumulation method though.\n *\n * Example: Return a hierarchical structure\n * ```js\n * async function reduce (parent, children) {\n *   return Object.assign(parent, { children })\n * }\n * ```\n *\n * ## iterate(walk, children)\n *\n * {@link WalkerIterate typedef}\n *\n * {@link WalkerIterateCallback typedef}\n *\n * Default: `(walk, children) => Promise.all([...children].map(walk))`\n *\n * The default implementation recurses all children concurrently using Promise.all.\n * However you could use a custom function to traverse children serially or use a global queue to throttle recursion.\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {Walker[]} args.trees - The trees you want to traverse\n * @param {WalkerMap} [args.map] - Transform `WalkerEntry`s into a result form\n * @param {WalkerReduce} [args.reduce] - Control how mapped entries are combined with their parent result\n * @param {WalkerIterate} [args.iterate] - Fine-tune how entries within a tree are iterated over\n *\n * @returns {Promise<any>} The finished tree-walking result\n */\nfunction walk(_x158) {\n  return _walk3.apply(this, arguments);\n} // @ts-check\n/**\n * Write a blob object directly\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {Uint8Array} args.blob - The blob object to write\n *\n * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly written object\n *\n * @example\n * // Manually create a blob.\n * let oid = await git.writeBlob({\n *   fs,\n *   dir: '/tutorial',\n *   blob: new Uint8Array([])\n * })\n *\n * console.log('oid', oid) // should be 'e69de29bb2d1d6434b8b29ae775ad8c2e48c5391'\n *\n */\nfunction _walk3() {\n  _walk3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    trees,\n    map,\n    reduce,\n    iterate\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('trees', trees);\n      return yield _walk({\n        fs: new FileSystem(fs),\n        cache: {},\n        dir,\n        gitdir,\n        trees,\n        map,\n        reduce,\n        iterate\n      });\n    } catch (err) {\n      err.caller = 'git.walk';\n      throw err;\n    }\n  });\n  return _walk3.apply(this, arguments);\n}\nfunction writeBlob(_x159) {\n  return _writeBlob.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.gitdir\n * @param {CommitObject} args.commit\n *\n * @returns {Promise<string>}\n * @see CommitObject\n *\n */\nfunction _writeBlob() {\n  _writeBlob = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    blob\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('blob', blob);\n      return yield _writeObject({\n        fs: new FileSystem(fs),\n        gitdir,\n        type: 'blob',\n        object: blob,\n        format: 'content'\n      });\n    } catch (err) {\n      err.caller = 'git.writeBlob';\n      throw err;\n    }\n  });\n  return _writeBlob.apply(this, arguments);\n}\nfunction _writeCommit(_x160) {\n  return _writeCommit2.apply(this, arguments);\n} // @ts-check\n/**\n * Write a commit object directly\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {CommitObject} args.commit - The object to write\n *\n * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly written object\n * @see CommitObject\n *\n */\nfunction _writeCommit2() {\n  _writeCommit2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    commit\n  }) {\n    // Convert object to buffer\n    const object = GitCommit.from(commit).toObject();\n    const oid = yield _writeObject({\n      fs,\n      gitdir,\n      type: 'commit',\n      object,\n      format: 'content'\n    });\n    return oid;\n  });\n  return _writeCommit2.apply(this, arguments);\n}\nfunction writeCommit(_x161) {\n  return _writeCommit3.apply(this, arguments);\n} // @ts-check\n/**\n * Write a git object directly\n *\n * `format` can have the following values:\n *\n * | param      | description                                                                                                                                                      |\n * | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n * | 'deflated' | Treat `object` as the raw deflate-compressed buffer for an object, meaning can be written to `.git/objects/**` as-is.                                           |\n * | 'wrapped'  | Treat `object` as the inflated object buffer wrapped in the git object header. This is the raw buffer used when calculating the SHA-1 object id of a git object. |\n * | 'content'  | Treat `object` as the object buffer without the git header.                                                                                                      |\n * | 'parsed'   | Treat `object` as a parsed representation of the object.                                                                                                         |\n *\n * If `format` is `'parsed'`, then `object` must match one of the schemas for `CommitObject`, `TreeObject`, `TagObject`, or a `string` (for blobs).\n *\n * {@link CommitObject typedef}\n *\n * {@link TreeObject typedef}\n *\n * {@link TagObject typedef}\n *\n * If `format` is `'content'`, `'wrapped'`, or `'deflated'`, `object` should be a `Uint8Array`.\n *\n * @deprecated\n * > This command is overly complicated.\n * >\n * > If you know the type of object you are writing, use [`writeBlob`](./writeBlob.md), [`writeCommit`](./writeCommit.md), [`writeTag`](./writeTag.md), or [`writeTree`](./writeTree.md).\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string | Uint8Array | CommitObject | TreeObject | TagObject} args.object - The object to write.\n * @param {'blob'|'tree'|'commit'|'tag'} [args.type] - The kind of object to write.\n * @param {'deflated' | 'wrapped' | 'content' | 'parsed'} [args.format = 'parsed'] - What format the object is in. The possible choices are listed below.\n * @param {string} [args.oid] - If `format` is `'deflated'` then this param is required. Otherwise it is calculated.\n * @param {string} [args.encoding] - If `type` is `'blob'` then `object` will be converted to a Uint8Array using `encoding`.\n *\n * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly written object.\n *\n * @example\n * // Manually create an annotated tag.\n * let sha = await git.resolveRef({ fs, dir: '/tutorial', ref: 'HEAD' })\n * console.log('commit', sha)\n *\n * let oid = await git.writeObject({\n *   fs,\n *   dir: '/tutorial',\n *   type: 'tag',\n *   object: {\n *     object: sha,\n *     type: 'commit',\n *     tag: 'my-tag',\n *     tagger: {\n *       name: 'your name',\n *       email: 'email@example.com',\n *       timestamp: Math.floor(Date.now()/1000),\n *       timezoneOffset: new Date().getTimezoneOffset()\n *     },\n *     message: 'Optional message'\n *   }\n * })\n *\n * console.log('tag', oid)\n *\n */\nfunction _writeCommit3() {\n  _writeCommit3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    commit\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('commit', commit);\n      return yield _writeCommit({\n        fs: new FileSystem(fs),\n        gitdir,\n        commit\n      });\n    } catch (err) {\n      err.caller = 'git.writeCommit';\n      throw err;\n    }\n  });\n  return _writeCommit3.apply(this, arguments);\n}\nfunction writeObject(_x162) {\n  return _writeObject3.apply(this, arguments);\n} // @ts-check\n/**\n * Write a ref which refers to the specified SHA-1 object id, or a symbolic ref which refers to the specified ref.\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {string} args.ref - The name of the ref to write\n * @param {string} args.value - When `symbolic` is false, a ref or an SHA-1 object id. When true, a ref starting with `refs/`.\n * @param {boolean} [args.force = false] - Instead of throwing an error if a ref named `ref` already exists, overwrite the existing ref.\n * @param {boolean} [args.symbolic = false] - Whether the ref is symbolic or not.\n *\n * @returns {Promise<void>} Resolves successfully when filesystem operations are complete\n *\n * @example\n * await git.writeRef({\n *   fs,\n *   dir: '/tutorial',\n *   ref: 'refs/heads/another-branch',\n *   value: 'HEAD'\n * })\n * await git.writeRef({\n *   fs,\n *   dir: '/tutorial',\n *   ref: 'HEAD',\n *   value: 'refs/heads/another-branch',\n *   force: true,\n *   symbolic: true\n * })\n * console.log('done')\n *\n */\nfunction _writeObject3() {\n  _writeObject3 = _asyncToGenerator(function* ({\n    fs: _fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    type,\n    object,\n    format = 'parsed',\n    oid,\n    encoding = undefined\n  }) {\n    try {\n      const fs = new FileSystem(_fs);\n      // Convert object to buffer\n      if (format === 'parsed') {\n        switch (type) {\n          case 'commit':\n            object = GitCommit.from(object).toObject();\n            break;\n          case 'tree':\n            object = GitTree.from(object).toObject();\n            break;\n          case 'blob':\n            object = Buffer.from(object, encoding);\n            break;\n          case 'tag':\n            object = GitAnnotatedTag.from(object).toObject();\n            break;\n          default:\n            throw new ObjectTypeError(oid || '', type, 'blob|commit|tag|tree');\n        }\n        // GitObjectManager does not know how to serialize content, so we tweak that parameter before passing it.\n        format = 'content';\n      }\n      oid = yield _writeObject({\n        fs,\n        gitdir,\n        type,\n        object,\n        oid,\n        format\n      });\n      return oid;\n    } catch (err) {\n      err.caller = 'git.writeObject';\n      throw err;\n    }\n  });\n  return _writeObject3.apply(this, arguments);\n}\nfunction writeRef(_x163) {\n  return _writeRef.apply(this, arguments);\n} // @ts-check\n/**\n * @param {object} args\n * @param {import('../models/FileSystem.js').FileSystem} args.fs\n * @param {string} args.gitdir\n * @param {TagObject} args.tag\n *\n * @returns {Promise<string>}\n */\nfunction _writeRef() {\n  _writeRef = _asyncToGenerator(function* ({\n    fs: _fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    ref,\n    value,\n    force = false,\n    symbolic = false\n  }) {\n    try {\n      assertParameter('fs', _fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('ref', ref);\n      assertParameter('value', value);\n      const fs = new FileSystem(_fs);\n      if (ref !== cleanGitRef.clean(ref)) {\n        throw new InvalidRefNameError(ref, cleanGitRef.clean(ref));\n      }\n      if (!force && (yield GitRefManager.exists({\n        fs,\n        gitdir,\n        ref\n      }))) {\n        throw new AlreadyExistsError('ref', ref);\n      }\n      if (symbolic) {\n        yield GitRefManager.writeSymbolicRef({\n          fs,\n          gitdir,\n          ref,\n          value\n        });\n      } else {\n        value = yield GitRefManager.resolve({\n          fs,\n          gitdir,\n          ref: value\n        });\n        yield GitRefManager.writeRef({\n          fs,\n          gitdir,\n          ref,\n          value\n        });\n      }\n    } catch (err) {\n      err.caller = 'git.writeRef';\n      throw err;\n    }\n  });\n  return _writeRef.apply(this, arguments);\n}\nfunction _writeTag(_x164) {\n  return _writeTag2.apply(this, arguments);\n} // @ts-check\n/**\n * Write an annotated tag object directly\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {TagObject} args.tag - The object to write\n *\n * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly written object\n * @see TagObject\n *\n * @example\n * // Manually create an annotated tag.\n * let sha = await git.resolveRef({ fs, dir: '/tutorial', ref: 'HEAD' })\n * console.log('commit', sha)\n *\n * let oid = await git.writeTag({\n *   fs,\n *   dir: '/tutorial',\n *   tag: {\n *     object: sha,\n *     type: 'commit',\n *     tag: 'my-tag',\n *     tagger: {\n *       name: 'your name',\n *       email: 'email@example.com',\n *       timestamp: Math.floor(Date.now()/1000),\n *       timezoneOffset: new Date().getTimezoneOffset()\n *     },\n *     message: 'Optional message'\n *   }\n * })\n *\n * console.log('tag', oid)\n *\n */\nfunction _writeTag2() {\n  _writeTag2 = _asyncToGenerator(function* ({\n    fs,\n    gitdir,\n    tag\n  }) {\n    // Convert object to buffer\n    const object = GitAnnotatedTag.from(tag).toObject();\n    const oid = yield _writeObject({\n      fs,\n      gitdir,\n      type: 'tag',\n      object,\n      format: 'content'\n    });\n    return oid;\n  });\n  return _writeTag2.apply(this, arguments);\n}\nfunction writeTag(_x165) {\n  return _writeTag3.apply(this, arguments);\n} // @ts-check\n/**\n * Write a tree object directly\n *\n * @param {object} args\n * @param {FsClient} args.fs - a file system client\n * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path\n * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path\n * @param {TreeObject} args.tree - The object to write\n *\n * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly written object.\n * @see TreeObject\n * @see TreeEntry\n *\n */\nfunction _writeTag3() {\n  _writeTag3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    tag\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('tag', tag);\n      return yield _writeTag({\n        fs: new FileSystem(fs),\n        gitdir,\n        tag\n      });\n    } catch (err) {\n      err.caller = 'git.writeTag';\n      throw err;\n    }\n  });\n  return _writeTag3.apply(this, arguments);\n}\nfunction writeTree(_x166) {\n  return _writeTree3.apply(this, arguments);\n} // default export\nfunction _writeTree3() {\n  _writeTree3 = _asyncToGenerator(function* ({\n    fs,\n    dir,\n    gitdir = join(dir, '.git'),\n    tree\n  }) {\n    try {\n      assertParameter('fs', fs);\n      assertParameter('gitdir', gitdir);\n      assertParameter('tree', tree);\n      return yield _writeTree({\n        fs: new FileSystem(fs),\n        gitdir,\n        tree\n      });\n    } catch (err) {\n      err.caller = 'git.writeTree';\n      throw err;\n    }\n  });\n  return _writeTree3.apply(this, arguments);\n}\nvar index = {\n  Errors,\n  STAGE,\n  TREE,\n  WORKDIR,\n  add,\n  addNote,\n  addRemote,\n  annotatedTag,\n  branch,\n  showCheckout,\n  checkout,\n  clone,\n  commit,\n  getConfig,\n  getConfigAll,\n  setConfig,\n  currentBranch,\n  deleteBranch,\n  deleteRef,\n  deleteRemote,\n  deleteTag,\n  expandOid,\n  expandRef,\n  fastForward,\n  fetch,\n  findMergeBase,\n  findRoot,\n  getRemoteInfo,\n  getRemoteInfo2,\n  hashBlob,\n  indexPack,\n  init,\n  isDescendent,\n  listBranches,\n  listFiles,\n  listNotes,\n  listRemotes,\n  listServerRefs,\n  listTags,\n  log,\n  merge,\n  packObjects,\n  pull,\n  push,\n  readBlob,\n  readCommit,\n  readNote,\n  readObject,\n  readTag,\n  readTree,\n  remove,\n  removeNote,\n  renameBranch,\n  undoResolve,\n  resetIndex,\n  resolveRef,\n  status,\n  conflictStatus,\n  statusMatrix,\n  tag,\n  version,\n  walk,\n  writeBlob,\n  writeCommit,\n  writeObject,\n  writeRef,\n  writeTag,\n  writeTree\n};\nexports.Errors = Errors;\nexports.STAGE = STAGE;\nexports.TREE = TREE;\nexports.WORKDIR = WORKDIR;\nexports.add = add;\nexports.addNote = addNote;\nexports.addRemote = addRemote;\nexports.annotatedTag = annotatedTag;\nexports.branch = branch;\nexports.showCheckout = showCheckout;\nexports.checkout = checkout;\nexports.clone = clone;\nexports.commit = commit;\nexports.currentBranch = currentBranch;\nexports[\"default\"] = index;\nexports.deleteBranch = deleteBranch;\nexports.deleteRef = deleteRef;\nexports.deleteRemote = deleteRemote;\nexports.deleteTag = deleteTag;\nexports.expandOid = expandOid;\nexports.expandRef = expandRef;\nexports.fastForward = fastForward;\nexports.fetch = fetch;\nexports.findMergeBase = findMergeBase;\nexports.findRoot = findRoot;\nexports.getConfig = getConfig;\nexports.getConfigAll = getConfigAll;\nexports.getRemoteInfo = getRemoteInfo;\nexports.getRemoteInfo2 = getRemoteInfo2;\nexports.hashBlob = hashBlob;\nexports.indexPack = indexPack;\nexports.init = init;\nexports.isDescendent = isDescendent;\nexports.listBranches = listBranches;\nexports.listFiles = listFiles;\nexports.listNotes = listNotes;\nexports.listRemotes = listRemotes;\nexports.listServerRefs = listServerRefs;\nexports.listTags = listTags;\nexports.log = log;\nexports.merge = merge;\nexports.packObjects = packObjects;\nexports.pull = pull;\nexports.push = push;\nexports.readBlob = readBlob;\nexports.readCommit = readCommit;\nexports.readNote = readNote;\nexports.readObject = readObject;\nexports.readTag = readTag;\nexports.readTree = readTree;\nexports.remove = remove;\nexports.removeNote = removeNote;\nexports.renameBranch = renameBranch;\nexports.resetIndex = resetIndex;\nexports.undoResolve = undoResolve;\nexports.resolveRef = resolveRef;\nexports.setConfig = setConfig;\nexports.status = status;\nexports.statusMatrix = statusMatrix;\nexports.conflictStatus = conflictStatus;\nexports.tag = tag;\nexports.version = version;\nexports.walk = walk;\nexports.writeBlob = writeBlob;\nexports.writeCommit = writeCommit;\nexports.writeObject = writeObject;\nexports.writeRef = writeRef;\nexports.writeTag = writeTag;\nexports.writeTree = writeTree;\n\n//# sourceURL=webpack://git/./src/index.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://git/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nconst base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n\n\n//# sourceURL=webpack://git/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/clean-git-ref/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/clean-git-ref/lib/index.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nfunction replaceAll(str, search, replacement) {\n  search = search instanceof RegExp ? search : new RegExp(escapeRegExp(search), 'g');\n\n  return str.replace(search, replacement);\n}\n\nvar CleanGitRef = {\n  clean: function clean(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Expected a string, received: ' + value);\n    }\n\n    value = replaceAll(value, './', '/');\n    value = replaceAll(value, '..', '.');\n    value = replaceAll(value, ' ', '-');\n    value = replaceAll(value, /^[~^:?*\\\\\\-]/g, '');\n    value = replaceAll(value, /[~^:?*\\\\]/g, '-');\n    value = replaceAll(value, /[~^:?*\\\\\\-]$/g, '');\n    value = replaceAll(value, '@{', '-');\n    value = replaceAll(value, /\\.$/g, '');\n    value = replaceAll(value, /\\/$/g, '');\n    value = replaceAll(value, /\\.lock$/g, '');\n    return value;\n  }\n};\n\nmodule.exports = CleanGitRef;\n\n//# sourceURL=webpack://git/./node_modules/clean-git-ref/lib/index.js?");

/***/ }),

/***/ "./node_modules/crc-32/crc32.js":
/*!**************************************!*\
  !*** ./node_modules/crc-32/crc32.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported CRC32 */\nvar CRC32;\n(function (factory) {\n\t/*jshint ignore:start */\n\t/*eslint-disable */\n\tif(typeof DO_NOT_EXPORT_CRC === 'undefined') {\n\t\tif(true) {\n\t\t\tfactory(exports);\n\t\t} else {}\n\t} else {\n\t\tfactory(CRC32 = {});\n\t}\n\t/*eslint-enable */\n\t/*jshint ignore:end */\n}(function(CRC32) {\nCRC32.version = '1.2.2';\n/*global Int32Array */\nfunction signed_crc_table() {\n\tvar c = 0, table = new Array(256);\n\n\tfor(var n =0; n != 256; ++n){\n\t\tc = n;\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\ttable[n] = c;\n\t}\n\n\treturn typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n}\n\nvar T0 = signed_crc_table();\nfunction slice_by_16_tables(T) {\n\tvar c = 0, v = 0, n = 0, table = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096) ;\n\n\tfor(n = 0; n != 256; ++n) table[n] = T[n];\n\tfor(n = 0; n != 256; ++n) {\n\t\tv = T[n];\n\t\tfor(c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 0xFF];\n\t}\n\tvar out = [];\n\tfor(n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);\n\treturn out;\n}\nvar TT = slice_by_16_tables(T0);\nvar T1 = TT[0],  T2 = TT[1],  T3 = TT[2],  T4 = TT[3],  T5 = TT[4];\nvar T6 = TT[5],  T7 = TT[6],  T8 = TT[7],  T9 = TT[8],  Ta = TT[9];\nvar Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];\nfunction crc32_bstr(bstr, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = bstr.length; i < L;) C = (C>>>8) ^ T0[(C^bstr.charCodeAt(i++))&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_buf(B, seed) {\n\tvar C = seed ^ -1, L = B.length - 15, i = 0;\n\tfor(; i < L;) C =\n\t\tTf[B[i++] ^ (C & 255)] ^\n\t\tTe[B[i++] ^ ((C >> 8) & 255)] ^\n\t\tTd[B[i++] ^ ((C >> 16) & 255)] ^\n\t\tTc[B[i++] ^ (C >>> 24)] ^\n\t\tTb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^\n\t\tT7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^\n\t\tT3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];\n\tL += 15;\n\twhile(i < L) C = (C>>>8) ^ T0[(C^B[i++])&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_str(str, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = str.length, c = 0, d = 0; i < L;) {\n\t\tc = str.charCodeAt(i++);\n\t\tif(c < 0x80) {\n\t\t\tC = (C>>>8) ^ T0[(C^c)&0xFF];\n\t\t} else if(c < 0x800) {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (192|((c>>6)&31)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t} else if(c >= 0xD800 && c < 0xE000) {\n\t\t\tc = (c&1023)+64; d = str.charCodeAt(i++)&1023;\n\t\t\tC = (C>>>8) ^ T0[(C ^ (240|((c>>8)&7)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>2)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(d&63)))&0xFF];\n\t\t} else {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (224|((c>>12)&15)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>6)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t}\n\t}\n\treturn ~C;\n}\nCRC32.table = T0;\n// $FlowIgnore\nCRC32.bstr = crc32_bstr;\n// $FlowIgnore\nCRC32.buf = crc32_buf;\n// $FlowIgnore\nCRC32.str = crc32_str;\n}));\n\n\n//# sourceURL=webpack://git/./node_modules/crc-32/crc32.js?");

/***/ }),

/***/ "./node_modules/diff3/diff3.js":
/*!*************************************!*\
  !*** ./node_modules/diff3/diff3.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright (c) 2006, 2008 Tony Garnock-Jones <tonyg@lshift.net>\n// Copyright (c) 2006, 2008 LShift Ltd. <query@lshift.net>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar onp = __webpack_require__(/*! ./onp */ \"./node_modules/diff3/onp.js\");\n\nfunction longestCommonSubsequence(file1, file2) {\n  var diff = new onp(file1, file2);\n  diff.compose();\n  var ses = diff.getses();\n\n  var root;\n  var prev;\n  var file1RevIdx = file1.length - 1,\n      file2RevIdx = file2.length - 1;\n  for (var i = ses.length - 1; i >= 0; --i) {\n      if (ses[i].t === diff.SES_COMMON) {\n        if (prev) {\n          prev.chain = {\n            file1index: file1RevIdx,\n            file2index: file2RevIdx,\n            chain: null\n          };\n          prev = prev.chain;\n        } else {\n          root = {\n            file1index: file1RevIdx,\n            file2index: file2RevIdx,\n            chain: null\n          };\n          prev = root;\n        }\n        file1RevIdx--;\n        file2RevIdx--;\n      } else if (ses[i].t === diff.SES_DELETE) {\n        file1RevIdx--;\n      } else if (ses[i].t === diff.SES_ADD) {\n        file2RevIdx--;\n      }\n  }\n\n  var tail = {\n    file1index: -1,\n    file2index: -1,\n    chain: null\n  };\n\n  if (!prev) {\n    return tail;\n  }\n\n  prev.chain = tail;\n\n  return root;\n}\n\nfunction diffIndices(file1, file2) {\n  // We apply the LCS to give a simple representation of the\n  // offsets and lengths of mismatched chunks in the input\n  // files. This is used by diff3_merge_indices below.\n\n  var result = [];\n  var tail1 = file1.length;\n  var tail2 = file2.length;\n\n  for (var candidate = longestCommonSubsequence(file1, file2); candidate !== null; candidate = candidate.chain) {\n    var mismatchLength1 = tail1 - candidate.file1index - 1;\n    var mismatchLength2 = tail2 - candidate.file2index - 1;\n    tail1 = candidate.file1index;\n    tail2 = candidate.file2index;\n\n    if (mismatchLength1 || mismatchLength2) {\n      result.push({\n        file1: [tail1 + 1, mismatchLength1],\n        file2: [tail2 + 1, mismatchLength2]\n      });\n    }\n  }\n\n  result.reverse();\n  return result;\n}\n\nfunction diff3MergeIndices(a, o, b) {\n  // Given three files, A, O, and B, where both A and B are\n  // independently derived from O, returns a fairly complicated\n  // internal representation of merge decisions it's taken. The\n  // interested reader may wish to consult\n  //\n  // Sanjeev Khanna, Keshav Kunal, and Benjamin C. Pierce. \"A\n  // Formal Investigation of Diff3.\" In Arvind and Prasad,\n  // editors, Foundations of Software Technology and Theoretical\n  // Computer Science (FSTTCS), December 2007.\n  //\n  // (http://www.cis.upenn.edu/~bcpierce/papers/diff3-short.pdf)\n  var i;\n\n  var m1 = diffIndices(o, a);\n  var m2 = diffIndices(o, b);\n\n  var hunks = [];\n\n  function addHunk(h, side) {\n    hunks.push([h.file1[0], side, h.file1[1], h.file2[0], h.file2[1]]);\n  }\n  for (i = 0; i < m1.length; i++) {\n    addHunk(m1[i], 0);\n  }\n  for (i = 0; i < m2.length; i++) {\n    addHunk(m2[i], 2);\n  }\n  hunks.sort(function(x, y) {\n    return x[0] - y[0]\n  });\n\n  var result = [];\n  var commonOffset = 0;\n\n  function copyCommon(targetOffset) {\n    if (targetOffset > commonOffset) {\n      result.push([1, commonOffset, targetOffset - commonOffset]);\n      commonOffset = targetOffset;\n    }\n  }\n\n  for (var hunkIndex = 0; hunkIndex < hunks.length; hunkIndex++) {\n    var firstHunkIndex = hunkIndex;\n    var hunk = hunks[hunkIndex];\n    var regionLhs = hunk[0];\n    var regionRhs = regionLhs + hunk[2];\n    while (hunkIndex < hunks.length - 1) {\n      var maybeOverlapping = hunks[hunkIndex + 1];\n      var maybeLhs = maybeOverlapping[0];\n      if (maybeLhs > regionRhs) break;\n      regionRhs = Math.max(regionRhs, maybeLhs + maybeOverlapping[2]);\n      hunkIndex++;\n    }\n\n    copyCommon(regionLhs);\n    if (firstHunkIndex == hunkIndex) {\n      // The \"overlap\" was only one hunk long, meaning that\n      // there's no conflict here. Either a and o were the\n      // same, or b and o were the same.\n      if (hunk[4] > 0) {\n        result.push([hunk[1], hunk[3], hunk[4]]);\n      }\n    } else {\n      // A proper conflict. Determine the extents of the\n      // regions involved from a, o and b. Effectively merge\n      // all the hunks on the left into one giant hunk, and\n      // do the same for the right; then, correct for skew\n      // in the regions of o that each side changed, and\n      // report appropriate spans for the three sides.\n      var regions = {\n        0: [a.length, -1, o.length, -1],\n        2: [b.length, -1, o.length, -1]\n      };\n      for (i = firstHunkIndex; i <= hunkIndex; i++) {\n        hunk = hunks[i];\n        var side = hunk[1];\n        var r = regions[side];\n        var oLhs = hunk[0];\n        var oRhs = oLhs + hunk[2];\n        var abLhs = hunk[3];\n        var abRhs = abLhs + hunk[4];\n        r[0] = Math.min(abLhs, r[0]);\n        r[1] = Math.max(abRhs, r[1]);\n        r[2] = Math.min(oLhs, r[2]);\n        r[3] = Math.max(oRhs, r[3]);\n      }\n      var aLhs = regions[0][0] + (regionLhs - regions[0][2]);\n      var aRhs = regions[0][1] + (regionRhs - regions[0][3]);\n      var bLhs = regions[2][0] + (regionLhs - regions[2][2]);\n      var bRhs = regions[2][1] + (regionRhs - regions[2][3]);\n      result.push([-1,\n        aLhs, aRhs - aLhs,\n        regionLhs, regionRhs - regionLhs,\n        bLhs, bRhs - bLhs\n      ]);\n    }\n    commonOffset = regionRhs;\n  }\n\n  copyCommon(o.length);\n  return result;\n}\n\nfunction diff3Merge(a, o, b) {\n  // Applies the output of Diff.diff3_merge_indices to actually\n  // construct the merged file; the returned result alternates\n  // between \"ok\" and \"conflict\" blocks.\n\n  var result = [];\n  var files = [a, o, b];\n  var indices = diff3MergeIndices(a, o, b);\n\n  var okLines = [];\n\n  function flushOk() {\n    if (okLines.length) {\n      result.push({\n        ok: okLines\n      });\n    }\n    okLines = [];\n  }\n\n  function pushOk(xs) {\n    for (var j = 0; j < xs.length; j++) {\n      okLines.push(xs[j]);\n    }\n  }\n\n  function isTrueConflict(rec) {\n    if (rec[2] != rec[6]) return true;\n    var aoff = rec[1];\n    var boff = rec[5];\n    for (var j = 0; j < rec[2]; j++) {\n      if (a[j + aoff] != b[j + boff]) return true;\n    }\n    return false;\n  }\n\n  for (var i = 0; i < indices.length; i++) {\n    var x = indices[i];\n    var side = x[0];\n    if (side == -1) {\n      if (!isTrueConflict(x)) {\n        pushOk(files[0].slice(x[1], x[1] + x[2]));\n      } else {\n        flushOk();\n        result.push({\n          conflict: {\n            a: a.slice(x[1], x[1] + x[2]),\n            aIndex: x[1],\n            o: o.slice(x[3], x[3] + x[4]),\n            oIndex: x[3],\n            b: b.slice(x[5], x[5] + x[6]),\n            bIndex: x[5]\n          }\n        });\n      }\n    } else {\n      pushOk(files[side].slice(x[1], x[1] + x[2]));\n    }\n  }\n\n  flushOk();\n  return result;\n}\n\nmodule.exports = diff3Merge;\n\n\n//# sourceURL=webpack://git/./node_modules/diff3/diff3.js?");

/***/ }),

/***/ "./node_modules/diff3/onp.js":
/*!***********************************!*\
  !*** ./node_modules/diff3/onp.js ***!
  \***********************************/
/***/ ((module) => {

eval("/*\n * URL: https://github.com/cubicdaiya/onp\n *\n * Copyright (c) 2013 Tatsuhiko Kubo <cubicdaiya@gmail.com>\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"Software\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\n/**\n * The algorithm implemented here is based on \"An O(NP) Sequence Comparison Algorithm\"\n * by described by Sun Wu, Udi Manber and Gene Myers\n*/\nmodule.exports = function (a_, b_) {\n    var a          = a_,\n        b          = b_,\n        m          = a.length,\n        n          = b.length,\n        reverse    = false,\n        ed         = null,\n        offset     = m + 1,\n        path       = [],\n        pathposi   = [],\n        ses        = [],\n        lcs        = \"\",\n        SES_DELETE = -1,\n        SES_COMMON = 0,\n        SES_ADD    = 1;\n\n    var tmp1,\n        tmp2;\n\n    var init = function () {\n        if (m >= n) {\n            tmp1    = a;\n            tmp2    = m;\n            a       = b;\n            b       = tmp1;\n            m       = n;\n            n       = tmp2;\n            reverse = true;\n            offset = m + 1;\n        }\n    };\n\n    var P = function (x, y, k) {\n        return {\n            'x' : x,\n            'y' : y,\n            'k' : k,\n        };\n    };\n\n    var seselem = function (elem, t) {\n        return {\n            'elem' : elem,\n            't'    : t,\n        };\n    };\n\n    var snake = function (k, p, pp) {\n        var r, x, y;\n        if (p > pp) {\n            r = path[k-1+offset];\n        } else {\n            r = path[k+1+offset];\n        }\n\n        y = Math.max(p, pp);\n        x = y - k;\n        while (x < m && y < n && a[x] === b[y]) {\n            ++x;\n            ++y;\n        }\n\n        path[k+offset] = pathposi.length;\n        pathposi[pathposi.length] = new P(x, y, r);\n        return y;\n    };\n\n    var recordseq = function (epc) {\n        var x_idx, y_idx, px_idx, py_idx, i;\n        x_idx  = y_idx  = 1;\n        px_idx = py_idx = 0;\n        for (i=epc.length-1;i>=0;--i) {\n            while(px_idx < epc[i].x || py_idx < epc[i].y) {\n                if (epc[i].y - epc[i].x > py_idx - px_idx) {\n                    if (reverse) {\n                        ses[ses.length] = new seselem(b[py_idx], SES_DELETE);\n                    } else {\n                        ses[ses.length] = new seselem(b[py_idx], SES_ADD);\n                    }\n                    ++y_idx;\n                    ++py_idx;\n                } else if (epc[i].y - epc[i].x < py_idx - px_idx) {\n                    if (reverse) {\n                        ses[ses.length] = new seselem(a[px_idx], SES_ADD);\n                    } else {\n                        ses[ses.length] = new seselem(a[px_idx], SES_DELETE);\n                    }\n                    ++x_idx;\n                    ++px_idx;\n                } else {\n                    ses[ses.length] = new seselem(a[px_idx], SES_COMMON);\n                    lcs += a[px_idx];\n                    ++x_idx;\n                    ++y_idx;\n                    ++px_idx;\n                    ++py_idx;\n                }\n            }\n        }\n    };\n\n    init();\n\n    return {\n        SES_DELETE : -1,\n        SES_COMMON :  0,\n        SES_ADD    :  1,\n        editdistance : function () {\n            return ed;\n        },\n        getlcs : function () {\n            return lcs;\n        },\n        getses : function () {\n            return ses;\n        },\n        compose : function () {\n            var delta, size, fp, p, r, epc, i, k;\n            delta  = n - m;\n            size   = m + n + 3;\n            fp     = {};\n            for (i=0;i<size;++i) {\n                fp[i] = -1;\n                path[i] = -1;\n            }\n            p = -1;\n            do {\n                ++p;\n                for (k=-p;k<=delta-1;++k) {\n                    fp[k+offset] = snake(k, fp[k-1+offset]+1, fp[k+1+offset]);\n                }\n                for (k=delta+p;k>=delta+1;--k) {\n                    fp[k+offset] = snake(k, fp[k-1+offset]+1, fp[k+1+offset]);\n                }\n                fp[delta+offset] = snake(delta, fp[delta-1+offset]+1, fp[delta+1+offset]);\n            } while (fp[delta+offset] !== n);\n\n            ed = delta + 2 * p;\n\n            r = path[delta+offset];\n\n            epc  = [];\n            while (r !== -1) {\n                epc[epc.length] = new P(pathposi[r].x, pathposi[r].y, null);\n                r = pathposi[r].k;\n            }\n            recordseq(epc);\n        }\n    };\n};\n\n\n//# sourceURL=webpack://git/./node_modules/diff3/onp.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://git/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/ignore/index.js":
/*!**************************************!*\
  !*** ./node_modules/ignore/index.js ***!
  \**************************************/
/***/ ((module) => {

eval("// A simple implementation of make-array\nfunction makeArray (subject) {\n  return Array.isArray(subject)\n    ? subject\n    : [subject]\n}\n\nconst EMPTY = ''\nconst SPACE = ' '\nconst ESCAPE = '\\\\'\nconst REGEX_TEST_BLANK_LINE = /^\\s+$/\nconst REGEX_INVALID_TRAILING_BACKSLASH = /(?:[^\\\\]|^)\\\\$/\nconst REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\\\!/\nconst REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\\\#/\nconst REGEX_SPLITALL_CRLF = /\\r?\\n/g\n// /foo,\n// ./foo,\n// ../foo,\n// .\n// ..\nconst REGEX_TEST_INVALID_PATH = /^\\.*\\/|^\\.+$/\n\nconst SLASH = '/'\n\n// Do not use ternary expression here, since \"istanbul ignore next\" is buggy\nlet TMP_KEY_IGNORE = 'node-ignore'\n/* istanbul ignore else */\nif (typeof Symbol !== 'undefined') {\n  TMP_KEY_IGNORE = Symbol.for('node-ignore')\n}\nconst KEY_IGNORE = TMP_KEY_IGNORE\n\nconst define = (object, key, value) =>\n  Object.defineProperty(object, key, {value})\n\nconst REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g\n\nconst RETURN_FALSE = () => false\n\n// Sanitize the range of a regular expression\n// The cases are complicated, see test cases for details\nconst sanitizeRange = range => range.replace(\n  REGEX_REGEXP_RANGE,\n  (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0)\n    ? match\n    // Invalid range (out of order) which is ok for gitignore rules but\n    //   fatal for JavaScript regular expression, so eliminate it.\n    : EMPTY\n)\n\n// See fixtures #59\nconst cleanRangeBackSlash = slashes => {\n  const {length} = slashes\n  return slashes.slice(0, length - length % 2)\n}\n\n// > If the pattern ends with a slash,\n// > it is removed for the purpose of the following description,\n// > but it would only find a match with a directory.\n// > In other words, foo/ will match a directory foo and paths underneath it,\n// > but will not match a regular file or a symbolic link foo\n// >  (this is consistent with the way how pathspec works in general in Git).\n// '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'\n// -> ignore-rules will not deal with it, because it costs extra `fs.stat` call\n//      you could use option `mark: true` with `glob`\n\n// '`foo/`' should not continue with the '`..`'\nconst REPLACERS = [\n\n  // > Trailing spaces are ignored unless they are quoted with backslash (\"\\\")\n  [\n    // (a\\ ) -> (a )\n    // (a  ) -> (a)\n    // (a \\ ) -> (a  )\n    /\\\\?\\s+$/,\n    match => match.indexOf('\\\\') === 0\n      ? SPACE\n      : EMPTY\n  ],\n\n  // replace (\\ ) with ' '\n  [\n    /\\\\\\s/g,\n    () => SPACE\n  ],\n\n  // Escape metacharacters\n  // which is written down by users but means special for regular expressions.\n\n  // > There are 12 characters with special meanings:\n  // > - the backslash \\,\n  // > - the caret ^,\n  // > - the dollar sign $,\n  // > - the period or dot .,\n  // > - the vertical bar or pipe symbol |,\n  // > - the question mark ?,\n  // > - the asterisk or star *,\n  // > - the plus sign +,\n  // > - the opening parenthesis (,\n  // > - the closing parenthesis ),\n  // > - and the opening square bracket [,\n  // > - the opening curly brace {,\n  // > These special characters are often called \"metacharacters\".\n  [\n    /[\\\\$.|*+(){^]/g,\n    match => `\\\\${match}`\n  ],\n\n  [\n    // > a question mark (?) matches a single character\n    /(?!\\\\)\\?/g,\n    () => '[^/]'\n  ],\n\n  // leading slash\n  [\n\n    // > A leading slash matches the beginning of the pathname.\n    // > For example, \"/*.c\" matches \"cat-file.c\" but not \"mozilla-sha1/sha1.c\".\n    // A leading slash matches the beginning of the pathname\n    /^\\//,\n    () => '^'\n  ],\n\n  // replace special metacharacter slash after the leading slash\n  [\n    /\\//g,\n    () => '\\\\/'\n  ],\n\n  [\n    // > A leading \"**\" followed by a slash means match in all directories.\n    // > For example, \"**/foo\" matches file or directory \"foo\" anywhere,\n    // > the same as pattern \"foo\".\n    // > \"**/foo/bar\" matches file or directory \"bar\" anywhere that is directly\n    // >   under directory \"foo\".\n    // Notice that the '*'s have been replaced as '\\\\*'\n    /^\\^*\\\\\\*\\\\\\*\\\\\\//,\n\n    // '**/foo' <-> 'foo'\n    () => '^(?:.*\\\\/)?'\n  ],\n\n  // starting\n  [\n    // there will be no leading '/'\n    //   (which has been replaced by section \"leading slash\")\n    // If starts with '**', adding a '^' to the regular expression also works\n    /^(?=[^^])/,\n    function startingReplacer () {\n      // If has a slash `/` at the beginning or middle\n      return !/\\/(?!$)/.test(this)\n        // > Prior to 2.22.1\n        // > If the pattern does not contain a slash /,\n        // >   Git treats it as a shell glob pattern\n        // Actually, if there is only a trailing slash,\n        //   git also treats it as a shell glob pattern\n\n        // After 2.22.1 (compatible but clearer)\n        // > If there is a separator at the beginning or middle (or both)\n        // > of the pattern, then the pattern is relative to the directory\n        // > level of the particular .gitignore file itself.\n        // > Otherwise the pattern may also match at any level below\n        // > the .gitignore level.\n        ? '(?:^|\\\\/)'\n\n        // > Otherwise, Git treats the pattern as a shell glob suitable for\n        // >   consumption by fnmatch(3)\n        : '^'\n    }\n  ],\n\n  // two globstars\n  [\n    // Use lookahead assertions so that we could match more than one `'/**'`\n    /\\\\\\/\\\\\\*\\\\\\*(?=\\\\\\/|$)/g,\n\n    // Zero, one or several directories\n    // should not use '*', or it will be replaced by the next replacer\n\n    // Check if it is not the last `'/**'`\n    (_, index, str) => index + 6 < str.length\n\n      // case: /**/\n      // > A slash followed by two consecutive asterisks then a slash matches\n      // >   zero or more directories.\n      // > For example, \"a/**/b\" matches \"a/b\", \"a/x/b\", \"a/x/y/b\" and so on.\n      // '/**/'\n      ? '(?:\\\\/[^\\\\/]+)*'\n\n      // case: /**\n      // > A trailing `\"/**\"` matches everything inside.\n\n      // #21: everything inside but it should not include the current folder\n      : '\\\\/.+'\n  ],\n\n  // normal intermediate wildcards\n  [\n    // Never replace escaped '*'\n    // ignore rule '\\*' will match the path '*'\n\n    // 'abc.*/' -> go\n    // 'abc.*'  -> skip this rule,\n    //    coz trailing single wildcard will be handed by [trailing wildcard]\n    /(^|[^\\\\]+)(\\\\\\*)+(?=.+)/g,\n\n    // '*.js' matches '.js'\n    // '*.js' doesn't match 'abc'\n    (_, p1, p2) => {\n      // 1.\n      // > An asterisk \"*\" matches anything except a slash.\n      // 2.\n      // > Other consecutive asterisks are considered regular asterisks\n      // > and will match according to the previous rules.\n      const unescaped = p2.replace(/\\\\\\*/g, '[^\\\\/]*')\n      return p1 + unescaped\n    }\n  ],\n\n  [\n    // unescape, revert step 3 except for back slash\n    // For example, if a user escape a '\\\\*',\n    // after step 3, the result will be '\\\\\\\\\\\\*'\n    /\\\\\\\\\\\\(?=[$.|*+(){^])/g,\n    () => ESCAPE\n  ],\n\n  [\n    // '\\\\\\\\' -> '\\\\'\n    /\\\\\\\\/g,\n    () => ESCAPE\n  ],\n\n  [\n    // > The range notation, e.g. [a-zA-Z],\n    // > can be used to match one of the characters in a range.\n\n    // `\\` is escaped by step 3\n    /(\\\\)?\\[([^\\]/]*?)(\\\\*)($|\\])/g,\n    (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE\n      // '\\\\[bar]' -> '\\\\\\\\[bar\\\\]'\n      ? `\\\\[${range}${cleanRangeBackSlash(endEscape)}${close}`\n      : close === ']'\n        ? endEscape.length % 2 === 0\n          // A normal case, and it is a range notation\n          // '[bar]'\n          // '[bar\\\\\\\\]'\n          ? `[${sanitizeRange(range)}${endEscape}]`\n          // Invalid range notaton\n          // '[bar\\\\]' -> '[bar\\\\\\\\]'\n          : '[]'\n        : '[]'\n  ],\n\n  // ending\n  [\n    // 'js' will not match 'js.'\n    // 'ab' will not match 'abc'\n    /(?:[^*])$/,\n\n    // WTF!\n    // https://git-scm.com/docs/gitignore\n    // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)\n    // which re-fixes #24, #38\n\n    // > If there is a separator at the end of the pattern then the pattern\n    // > will only match directories, otherwise the pattern can match both\n    // > files and directories.\n\n    // 'js*' will not match 'a.js'\n    // 'js/' will not match 'a.js'\n    // 'js' will match 'a.js' and 'a.js/'\n    match => /\\/$/.test(match)\n      // foo/ will not match 'foo'\n      ? `${match}$`\n      // foo matches 'foo' and 'foo/'\n      : `${match}(?=$|\\\\/$)`\n  ],\n\n  // trailing wildcard\n  [\n    /(\\^|\\\\\\/)?\\\\\\*$/,\n    (_, p1) => {\n      const prefix = p1\n        // '\\^':\n        // '/*' does not match EMPTY\n        // '/*' does not match everything\n\n        // '\\\\\\/':\n        // 'abc/*' does not match 'abc/'\n        ? `${p1}[^/]+`\n\n        // 'a*' matches 'a'\n        // 'a*' matches 'aa'\n        : '[^/]*'\n\n      return `${prefix}(?=$|\\\\/$)`\n    }\n  ],\n]\n\n// A simple cache, because an ignore rule only has only one certain meaning\nconst regexCache = Object.create(null)\n\n// @param {pattern}\nconst makeRegex = (pattern, ignoreCase) => {\n  let source = regexCache[pattern]\n\n  if (!source) {\n    source = REPLACERS.reduce(\n      (prev, current) => prev.replace(current[0], current[1].bind(pattern)),\n      pattern\n    )\n    regexCache[pattern] = source\n  }\n\n  return ignoreCase\n    ? new RegExp(source, 'i')\n    : new RegExp(source)\n}\n\nconst isString = subject => typeof subject === 'string'\n\n// > A blank line matches no files, so it can serve as a separator for readability.\nconst checkPattern = pattern => pattern\n  && isString(pattern)\n  && !REGEX_TEST_BLANK_LINE.test(pattern)\n  && !REGEX_INVALID_TRAILING_BACKSLASH.test(pattern)\n\n  // > A line starting with # serves as a comment.\n  && pattern.indexOf('#') !== 0\n\nconst splitPattern = pattern => pattern.split(REGEX_SPLITALL_CRLF)\n\nclass IgnoreRule {\n  constructor (\n    origin,\n    pattern,\n    negative,\n    regex\n  ) {\n    this.origin = origin\n    this.pattern = pattern\n    this.negative = negative\n    this.regex = regex\n  }\n}\n\nconst createRule = (pattern, ignoreCase) => {\n  const origin = pattern\n  let negative = false\n\n  // > An optional prefix \"!\" which negates the pattern;\n  if (pattern.indexOf('!') === 0) {\n    negative = true\n    pattern = pattern.substr(1)\n  }\n\n  pattern = pattern\n  // > Put a backslash (\"\\\") in front of the first \"!\" for patterns that\n  // >   begin with a literal \"!\", for example, `\"\\!important!.txt\"`.\n  .replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, '!')\n  // > Put a backslash (\"\\\") in front of the first hash for patterns that\n  // >   begin with a hash.\n  .replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, '#')\n\n  const regex = makeRegex(pattern, ignoreCase)\n\n  return new IgnoreRule(\n    origin,\n    pattern,\n    negative,\n    regex\n  )\n}\n\nconst throwError = (message, Ctor) => {\n  throw new Ctor(message)\n}\n\nconst checkPath = (path, originalPath, doThrow) => {\n  if (!isString(path)) {\n    return doThrow(\n      `path must be a string, but got \\`${originalPath}\\``,\n      TypeError\n    )\n  }\n\n  // We don't know if we should ignore EMPTY, so throw\n  if (!path) {\n    return doThrow(`path must not be empty`, TypeError)\n  }\n\n  // Check if it is a relative path\n  if (checkPath.isNotRelative(path)) {\n    const r = '`path.relative()`d'\n    return doThrow(\n      `path should be a ${r} string, but got \"${originalPath}\"`,\n      RangeError\n    )\n  }\n\n  return true\n}\n\nconst isNotRelative = path => REGEX_TEST_INVALID_PATH.test(path)\n\ncheckPath.isNotRelative = isNotRelative\ncheckPath.convert = p => p\n\nclass Ignore {\n  constructor ({\n    ignorecase = true,\n    ignoreCase = ignorecase,\n    allowRelativePaths = false\n  } = {}) {\n    define(this, KEY_IGNORE, true)\n\n    this._rules = []\n    this._ignoreCase = ignoreCase\n    this._allowRelativePaths = allowRelativePaths\n    this._initCache()\n  }\n\n  _initCache () {\n    this._ignoreCache = Object.create(null)\n    this._testCache = Object.create(null)\n  }\n\n  _addPattern (pattern) {\n    // #32\n    if (pattern && pattern[KEY_IGNORE]) {\n      this._rules = this._rules.concat(pattern._rules)\n      this._added = true\n      return\n    }\n\n    if (checkPattern(pattern)) {\n      const rule = createRule(pattern, this._ignoreCase)\n      this._added = true\n      this._rules.push(rule)\n    }\n  }\n\n  // @param {Array<string> | string | Ignore} pattern\n  add (pattern) {\n    this._added = false\n\n    makeArray(\n      isString(pattern)\n        ? splitPattern(pattern)\n        : pattern\n    ).forEach(this._addPattern, this)\n\n    // Some rules have just added to the ignore,\n    // making the behavior changed.\n    if (this._added) {\n      this._initCache()\n    }\n\n    return this\n  }\n\n  // legacy\n  addPattern (pattern) {\n    return this.add(pattern)\n  }\n\n  //          |           ignored : unignored\n  // negative |   0:0   |   0:1   |   1:0   |   1:1\n  // -------- | ------- | ------- | ------- | --------\n  //     0    |  TEST   |  TEST   |  SKIP   |    X\n  //     1    |  TESTIF |  SKIP   |  TEST   |    X\n\n  // - SKIP: always skip\n  // - TEST: always test\n  // - TESTIF: only test if checkUnignored\n  // - X: that never happen\n\n  // @param {boolean} whether should check if the path is unignored,\n  //   setting `checkUnignored` to `false` could reduce additional\n  //   path matching.\n\n  // @returns {TestResult} true if a file is ignored\n  _testOne (path, checkUnignored) {\n    let ignored = false\n    let unignored = false\n\n    this._rules.forEach(rule => {\n      const {negative} = rule\n      if (\n        unignored === negative && ignored !== unignored\n        || negative && !ignored && !unignored && !checkUnignored\n      ) {\n        return\n      }\n\n      const matched = rule.regex.test(path)\n\n      if (matched) {\n        ignored = !negative\n        unignored = negative\n      }\n    })\n\n    return {\n      ignored,\n      unignored\n    }\n  }\n\n  // @returns {TestResult}\n  _test (originalPath, cache, checkUnignored, slices) {\n    const path = originalPath\n      // Supports nullable path\n      && checkPath.convert(originalPath)\n\n    checkPath(\n      path,\n      originalPath,\n      this._allowRelativePaths\n        ? RETURN_FALSE\n        : throwError\n    )\n\n    return this._t(path, cache, checkUnignored, slices)\n  }\n\n  _t (path, cache, checkUnignored, slices) {\n    if (path in cache) {\n      return cache[path]\n    }\n\n    if (!slices) {\n      // path/to/a.js\n      // ['path', 'to', 'a.js']\n      slices = path.split(SLASH)\n    }\n\n    slices.pop()\n\n    // If the path has no parent directory, just test it\n    if (!slices.length) {\n      return cache[path] = this._testOne(path, checkUnignored)\n    }\n\n    const parent = this._t(\n      slices.join(SLASH) + SLASH,\n      cache,\n      checkUnignored,\n      slices\n    )\n\n    // If the path contains a parent directory, check the parent first\n    return cache[path] = parent.ignored\n      // > It is not possible to re-include a file if a parent directory of\n      // >   that file is excluded.\n      ? parent\n      : this._testOne(path, checkUnignored)\n  }\n\n  ignores (path) {\n    return this._test(path, this._ignoreCache, false).ignored\n  }\n\n  createFilter () {\n    return path => !this.ignores(path)\n  }\n\n  filter (paths) {\n    return makeArray(paths).filter(this.createFilter())\n  }\n\n  // @returns {TestResult}\n  test (path) {\n    return this._test(path, this._testCache, true)\n  }\n}\n\nconst factory = options => new Ignore(options)\n\nconst isPathValid = path =>\n  checkPath(path && checkPath.convert(path), path, RETURN_FALSE)\n\nfactory.isPathValid = isPathValid\n\n// Fixes typescript\nfactory.default = factory\n\nmodule.exports = factory\n\n// Windows\n// --------------------------------------------------------------\n/* istanbul ignore if */\nif (\n  // Detect `process` so that it can run in browsers.\n  typeof process !== 'undefined'\n  && (\n    process.env && process.env.IGNORE_TEST_WIN32\n    || process.platform === 'win32'\n  )\n) {\n  /* eslint no-control-regex: \"off\" */\n  const makePosix = str => /^\\\\\\\\\\?\\\\/.test(str)\n  || /[\"<>|\\u0000-\\u001F]+/u.test(str)\n    ? str\n    : str.replace(/\\\\/g, '/')\n\n  checkPath.convert = makePosix\n\n  // 'C:\\\\foo'     <- 'C:\\\\foo' has been converted to 'C:/'\n  // 'd:\\\\foo'\n  const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\\//i\n  checkPath.isNotRelative = path =>\n    REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path)\n    || isNotRelative(path)\n}\n\n\n//# sourceURL=webpack://git/./node_modules/ignore/index.js?");

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/***/ ((module) => {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n\n\n//# sourceURL=webpack://git/./node_modules/inherits/inherits_browser.js?");

/***/ }),

/***/ "./node_modules/pako/index.js":
/*!************************************!*\
  !*** ./node_modules/pako/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Top level file is just a mixin of submodules & constants\n\n\nconst { Deflate, deflate, deflateRaw, gzip } = __webpack_require__(/*! ./lib/deflate */ \"./node_modules/pako/lib/deflate.js\");\n\nconst { Inflate, inflate, inflateRaw, ungzip } = __webpack_require__(/*! ./lib/inflate */ \"./node_modules/pako/lib/inflate.js\");\n\nconst constants = __webpack_require__(/*! ./lib/zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = ungzip;\nmodule.exports.constants = constants;\n\n\n//# sourceURL=webpack://git/./node_modules/pako/index.js?");

/***/ }),

/***/ "./node_modules/pako/lib/deflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/deflate.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n\nconst zlib_deflate = __webpack_require__(/*! ./zlib/deflate */ \"./node_modules/pako/lib/zlib/deflate.js\");\nconst utils        = __webpack_require__(/*! ./utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nconst strings      = __webpack_require__(/*! ./utils/strings */ \"./node_modules/pako/lib/utils/strings.js\");\nconst msg          = __webpack_require__(/*! ./zlib/messages */ \"./node_modules/pako/lib/zlib/messages.js\");\nconst ZStream      = __webpack_require__(/*! ./zlib/zstream */ \"./node_modules/pako/lib/zlib/zstream.js\");\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED\n} = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = zlib_deflate.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = zlib_deflate.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    this.result = utils.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  const deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.constants = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/deflate.js?");

/***/ }),

/***/ "./node_modules/pako/lib/inflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/inflate.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n\nconst zlib_inflate = __webpack_require__(/*! ./zlib/inflate */ \"./node_modules/pako/lib/zlib/inflate.js\");\nconst utils        = __webpack_require__(/*! ./utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nconst strings      = __webpack_require__(/*! ./utils/strings */ \"./node_modules/pako/lib/utils/strings.js\");\nconst msg          = __webpack_require__(/*! ./zlib/messages */ \"./node_modules/pako/lib/zlib/messages.js\");\nconst ZStream      = __webpack_require__(/*! ./zlib/zstream */ \"./node_modules/pako/lib/zlib/zstream.js\");\nconst GZheader     = __webpack_require__(/*! ./zlib/gzheader */ \"./node_modules/pako/lib/zlib/gzheader.js\");\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  this.options = utils.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = zlib_inflate.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      zlib_inflate.inflateReset(strm);\n      status = zlib_inflate.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = zlib_inflate.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  const inflator = new Inflate(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || msg[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = inflate;\nmodule.exports.constants = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/inflate.js?");

/***/ }),

/***/ "./node_modules/pako/lib/utils/common.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/utils/common.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nmodule.exports.assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nmodule.exports.flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/utils/common.js?");

/***/ }),

/***/ "./node_modules/pako/lib/utils/strings.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/utils/strings.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("// String encode/decode helpers\n\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nmodule.exports.string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nmodule.exports.buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nmodule.exports.utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/utils/strings.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/adler32.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/adler32.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nmodule.exports = adler32;\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/zlib/adler32.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/pako/lib/zlib/constants.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/zlib/constants.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/crc32.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/crc32.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nmodule.exports = crc32;\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/zlib/crc32.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/deflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/deflate.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = __webpack_require__(/*! ./trees */ \"./node_modules/pako/lib/zlib/trees.js\");\nconst adler32 = __webpack_require__(/*! ./adler32 */ \"./node_modules/pako/lib/zlib/adler32.js\");\nconst crc32   = __webpack_require__(/*! ./crc32 */ \"./node_modules/pako/lib/zlib/crc32.js\");\nconst msg     = __webpack_require__(/*! ./messages */ \"./node_modules/pako/lib/zlib/messages.js\");\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,\n  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,\n  Z_DEFAULT_COMPRESSION,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY,\n  Z_UNKNOWN,\n  Z_DEFLATED\n} = __webpack_require__(/*! ./constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = msg[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH) ||\n                        flush === Z_NO_FLUSH ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH && flush !== Z_FINISH &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH) && flush !== Z_NO_FLUSH &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR;\n  }\n  strm.state.gzhead = head;\n  return Z_OK;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n};\n\n\n/* ========================================================================= */\nconst deflate = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n};\n\n\nmodule.exports.deflateInit = deflateInit;\nmodule.exports.deflateInit2 = deflateInit2;\nmodule.exports.deflateReset = deflateReset;\nmodule.exports.deflateResetKeep = deflateResetKeep;\nmodule.exports.deflateSetHeader = deflateSetHeader;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateEnd = deflateEnd;\nmodule.exports.deflateSetDictionary = deflateSetDictionary;\nmodule.exports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/zlib/deflate.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/gzheader.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/gzheader.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/zlib/gzheader.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inffast.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inffast.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD = 16209;       /* got a data error -- remain here until reset */\nconst TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/zlib/inffast.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inflate.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32       = __webpack_require__(/*! ./adler32 */ \"./node_modules/pako/lib/zlib/adler32.js\");\nconst crc32         = __webpack_require__(/*! ./crc32 */ \"./node_modules/pako/lib/zlib/crc32.js\");\nconst inflate_fast  = __webpack_require__(/*! ./inffast */ \"./node_modules/pako/lib/zlib/inffast.js\");\nconst inflate_table = __webpack_require__(/*! ./inftrees */ \"./node_modules/pako/lib/zlib/inftrees.js\");\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH, Z_BLOCK, Z_TREES,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR,\n  Z_DEFLATED\n} = __webpack_require__(/*! ./constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n};\n\n\nmodule.exports.inflateReset = inflateReset;\nmodule.exports.inflateReset2 = inflateReset2;\nmodule.exports.inflateResetKeep = inflateResetKeep;\nmodule.exports.inflateInit = inflateInit;\nmodule.exports.inflateInit2 = inflateInit2;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateEnd = inflateEnd;\nmodule.exports.inflateGetHeader = inflateGetHeader;\nmodule.exports.inflateSetDictionary = inflateSetDictionary;\nmodule.exports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/zlib/inflate.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inftrees.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/inftrees.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nmodule.exports = inflate_table;\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/zlib/inftrees.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/messages.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/messages.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/zlib/messages.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/trees.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/trees.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH    = 3;\nconst MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES       = 30;\n/* number of distance codes */\n\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nconst MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nmodule.exports._tr_init  = _tr_init;\nmodule.exports._tr_stored_block = _tr_stored_block;\nmodule.exports._tr_flush_block  = _tr_flush_block;\nmodule.exports._tr_tally = _tr_tally;\nmodule.exports._tr_align = _tr_align;\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/zlib/trees.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/zstream.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/zstream.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n\n//# sourceURL=webpack://git/./node_modules/pako/lib/zlib/zstream.js?");

/***/ }),

/***/ "./node_modules/pify/index.js":
/*!************************************!*\
  !*** ./node_modules/pify/index.js ***!
  \************************************/
/***/ ((module) => {

"use strict";
eval("\n\nconst processFn = (fn, options) => function (...args) {\n\tconst P = options.promiseModule;\n\n\treturn new P((resolve, reject) => {\n\t\tif (options.multiArgs) {\n\t\t\targs.push((...result) => {\n\t\t\t\tif (options.errorFirst) {\n\t\t\t\t\tif (result[0]) {\n\t\t\t\t\t\treject(result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.shift();\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (options.errorFirst) {\n\t\t\targs.push((error, result) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\targs.push(resolve);\n\t\t}\n\n\t\tfn.apply(this, args);\n\t});\n};\n\nmodule.exports = (input, options) => {\n\toptions = Object.assign({\n\t\texclude: [/.+(Sync|Stream)$/],\n\t\terrorFirst: true,\n\t\tpromiseModule: Promise\n\t}, options);\n\n\tconst objType = typeof input;\n\tif (!(input !== null && (objType === 'object' || objType === 'function'))) {\n\t\tthrow new TypeError(`Expected \\`input\\` to be a \\`Function\\` or \\`Object\\`, got \\`${input === null ? 'null' : objType}\\``);\n\t}\n\n\tconst filter = key => {\n\t\tconst match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\t\treturn options.include ? options.include.some(match) : !options.exclude.some(match);\n\t};\n\n\tlet ret;\n\tif (objType === 'function') {\n\t\tret = function (...args) {\n\t\t\treturn options.excludeMain ? input(...args) : processFn(input, options).apply(this, args);\n\t\t};\n\t} else {\n\t\tret = Object.create(Object.getPrototypeOf(input));\n\t}\n\n\tfor (const key in input) { // eslint-disable-line guard-for-in\n\t\tconst property = input[key];\n\t\tret[key] = typeof property === 'function' && filter(key) ? processFn(property, options) : property;\n\t}\n\n\treturn ret;\n};\n\n\n//# sourceURL=webpack://git/./node_modules/pify/index.js?");

/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n\n\n//# sourceURL=webpack://git/./node_modules/safe-buffer/index.js?");

/***/ }),

/***/ "./node_modules/sha.js/hash.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/hash.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Buffer = (__webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer)\n\n// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = Buffer.from(data, enc)\n  }\n\n  var block = this._block\n  var blockSize = this._blockSize\n  var length = data.length\n  var accum = this._len\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize\n    var remainder = Math.min(length - offset, blockSize - assigned)\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i]\n    }\n\n    accum += remainder\n    offset += remainder\n\n    if ((accum % blockSize) === 0) {\n      this._update(block)\n    }\n  }\n\n  this._len += length\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize\n\n  this._block[rem] = 0x80\n\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n  this._block.fill(0, rem + 1)\n\n  if (rem >= this._finalSize) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  var bits = this._len * 8\n\n  // uint32\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\n\n  // uint64\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0\n    var highBits = (bits - lowBits) / 0x100000000\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\n  }\n\n  this._update(this._block)\n  var hash = this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n\n\n//# sourceURL=webpack://git/./node_modules/sha.js/hash.js?");

/***/ }),

/***/ "./node_modules/sha.js/sha1.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/sha1.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\")\nvar Hash = __webpack_require__(/*! ./hash */ \"./node_modules/sha.js/hash.js\")\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer)\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha1 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha1, Hash)\n\nSha1.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl1 (num) {\n  return (num << 1) | (num >>> 31)\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha1.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha1.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha1\n\n\n//# sourceURL=webpack://git/./node_modules/sha.js/sha1.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	git = __webpack_exports__;
/******/ 	
/******/ })()
;